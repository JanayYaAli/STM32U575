
blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000646c  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080067a0  080067a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080067a8  080067a8  000167a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000019  20000000  080067b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000fc  2000001c  080067c9  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000118  080067c9  00020118  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020019  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001641c  00000000  00000000  0002004f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000267a  00000000  00000000  0003646b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011e8  00000000  00000000  00038ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001110  00000000  00000000  00039cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031cb0  00000000  00000000  0003ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001590b  00000000  00000000  0006ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001402b1  00000000  00000000  0008239b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c264c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c88  00000000  00000000  001c269c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000001c 	.word	0x2000001c
 8000250:	00000000 	.word	0x00000000
 8000254:	08006688 	.word	0x08006688

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000020 	.word	0x20000020
 8000270:	08006688 	.word	0x08006688

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fb64 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f824 	bl	80005e8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005a0:	f000 f86b 	bl	800067a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f8d8 	bl	8000758 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005a8:	f000 f877 	bl	800069a <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 80005ac:	f000 f888 	bl	80006c0 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <main+0x44>)
 80005b4:	f000 fe98 	bl	80012e8 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	4808      	ldr	r0, [pc, #32]	; (80005dc <main+0x48>)
 80005bc:	f000 fe94 	bl	80012e8 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart1, arr, sizeof(arr), HAL_MAX_DELAY);
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	220e      	movs	r2, #14
 80005c6:	4906      	ldr	r1, [pc, #24]	; (80005e0 <main+0x4c>)
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <main+0x50>)
 80005ca:	f005 fb31 	bl	8005c30 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d2:	f000 fb95 	bl	8000d00 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80005d6:	e7eb      	b.n	80005b0 <main+0x1c>
 80005d8:	42020800 	.word	0x42020800
 80005dc:	42020400 	.word	0x42020400
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000038 	.word	0x20000038

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09e      	sub	sp, #120	; 0x78
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	2260      	movs	r2, #96	; 0x60
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f006 f83e 	bl	8006678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
 800060a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 800060c:	2000      	movs	r0, #0
 800060e:	f000 feb5 	bl	800137c <HAL_PWREx_ControlVoltageScaling>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000618:	f000 f992 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800061c:	2310      	movs	r3, #16
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800062c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062e:	2300      	movs	r3, #0
 8000630:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4618      	mov	r0, r3
 8000638:	f000 ff92 	bl	8001560 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000642:	f000 f97d 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	231f      	movs	r3, #31
 8000648:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fe52 	bl	800230c <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800066e:	f000 f967 	bl	8000940 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3778      	adds	r7, #120	; 0x78
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800067e:	f000 ff4f 	bl	8001520 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000682:	f000 ff5d 	bl	8001540 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000686:	2002      	movs	r0, #2
 8000688:	f000 fefa 	bl	8001480 <HAL_PWREx_ConfigSupply>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8000692:	f000 f955 	bl	8000940 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}

0800069a <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 fe3c 	bl	800131c <HAL_ICACHE_ConfigAssociativityMode>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80006aa:	f000 f949 	bl	8000940 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80006ae:	f000 fe55 	bl	800135c <HAL_ICACHE_Enable>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80006b8:	f000 f942 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006c6:	4a23      	ldr	r2, [pc, #140]	; (8000754 <MX_USART1_UART_Init+0x94>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART1_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000708:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x90>)
 800070a:	f005 fa41 	bl	8005b90 <HAL_UART_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000714:	f000 f914 	bl	8000940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_USART1_UART_Init+0x90>)
 800071c:	f005 febe 	bl	800649c <HAL_UARTEx_SetTxFifoThreshold>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000726:	f000 f90b 	bl	8000940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072a:	2100      	movs	r1, #0
 800072c:	4808      	ldr	r0, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x90>)
 800072e:	f005 fef3 	bl	8006518 <HAL_UARTEx_SetRxFifoThreshold>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000738:	f000 f902 	bl	8000940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_USART1_UART_Init+0x90>)
 800073e:	f005 fe74 	bl	800642a <HAL_UARTEx_DisableFifoMode>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000748:	f000 f8fa 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000038 	.word	0x20000038
 8000754:	40013800 	.word	0x40013800

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b65      	ldr	r3, [pc, #404]	; (8000904 <MX_GPIO_Init+0x1ac>)
 8000770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000774:	4a63      	ldr	r2, [pc, #396]	; (8000904 <MX_GPIO_Init+0x1ac>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800077e:	4b61      	ldr	r3, [pc, #388]	; (8000904 <MX_GPIO_Init+0x1ac>)
 8000780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b5d      	ldr	r3, [pc, #372]	; (8000904 <MX_GPIO_Init+0x1ac>)
 800078e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000792:	4a5c      	ldr	r2, [pc, #368]	; (8000904 <MX_GPIO_Init+0x1ac>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800079c:	4b59      	ldr	r3, [pc, #356]	; (8000904 <MX_GPIO_Init+0x1ac>)
 800079e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007aa:	4b56      	ldr	r3, [pc, #344]	; (8000904 <MX_GPIO_Init+0x1ac>)
 80007ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007b0:	4a54      	ldr	r2, [pc, #336]	; (8000904 <MX_GPIO_Init+0x1ac>)
 80007b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007ba:	4b52      	ldr	r3, [pc, #328]	; (8000904 <MX_GPIO_Init+0x1ac>)
 80007bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b4e      	ldr	r3, [pc, #312]	; (8000904 <MX_GPIO_Init+0x1ac>)
 80007ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007ce:	4a4d      	ldr	r2, [pc, #308]	; (8000904 <MX_GPIO_Init+0x1ac>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007d8:	4b4a      	ldr	r3, [pc, #296]	; (8000904 <MX_GPIO_Init+0x1ac>)
 80007da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2104      	movs	r1, #4
 80007ea:	4847      	ldr	r0, [pc, #284]	; (8000908 <MX_GPIO_Init+0x1b0>)
 80007ec:	f000 fd64 	bl	80012b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2180      	movs	r1, #128	; 0x80
 80007f4:	4845      	ldr	r0, [pc, #276]	; (800090c <MX_GPIO_Init+0x1b4>)
 80007f6:	f000 fd5f 	bl	80012b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	21a0      	movs	r1, #160	; 0xa0
 80007fe:	4844      	ldr	r0, [pc, #272]	; (8000910 <MX_GPIO_Init+0x1b8>)
 8000800:	f000 fd5a 	bl	80012b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	4b42      	ldr	r3, [pc, #264]	; (8000914 <MX_GPIO_Init+0x1bc>)
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	483c      	ldr	r0, [pc, #240]	; (800090c <MX_GPIO_Init+0x1b4>)
 800081a:	f000 fb75 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800081e:	2304      	movs	r3, #4
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000822:	2303      	movs	r3, #3
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4836      	ldr	r0, [pc, #216]	; (800090c <MX_GPIO_Init+0x1b4>)
 8000832:	f000 fb69 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000836:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4831      	ldr	r0, [pc, #196]	; (8000910 <MX_GPIO_Init+0x1b8>)
 800084c:	f000 fb5c 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000856:	2303      	movs	r3, #3
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	482a      	ldr	r0, [pc, #168]	; (8000910 <MX_GPIO_Init+0x1b8>)
 8000866:	f000 fb4f 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	4821      	ldr	r0, [pc, #132]	; (8000908 <MX_GPIO_Init+0x1b0>)
 8000882:	f000 fb41 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	481b      	ldr	r0, [pc, #108]	; (800090c <MX_GPIO_Init+0x1b4>)
 800089e:	f000 fb33 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80008b4:	230a      	movs	r3, #10
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4816      	ldr	r0, [pc, #88]	; (8000918 <MX_GPIO_Init+0x1c0>)
 80008c0:	f000 fb22 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ca:	2303      	movs	r3, #3
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	480f      	ldr	r0, [pc, #60]	; (8000918 <MX_GPIO_Init+0x1c0>)
 80008da:	f000 fb15 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 80008de:	23a0      	movs	r3, #160	; 0xa0
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4806      	ldr	r0, [pc, #24]	; (8000910 <MX_GPIO_Init+0x1b8>)
 80008f6:	f000 fb07 	bl	8000f08 <HAL_GPIO_Init>

}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	46020c00 	.word	0x46020c00
 8000908:	42021800 	.word	0x42021800
 800090c:	42020800 	.word	0x42020800
 8000910:	42020400 	.word	0x42020400
 8000914:	10110000 	.word	0x10110000
 8000918:	42020000 	.word	0x42020000

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 f9c7 	bl	8000cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40014800 	.word	0x40014800

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_MspInit+0x34>)
 8000954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000958:	4a09      	ldr	r2, [pc, #36]	; (8000980 <HAL_MspInit+0x34>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <HAL_MspInit+0x34>)
 8000964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000970:	2004      	movs	r0, #4
 8000972:	f000 fa96 	bl	8000ea2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	46020c00 	.word	0x46020c00

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b0bc      	sub	sp, #240	; 0xf0
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	22c8      	movs	r2, #200	; 0xc8
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f005 fe67 	bl	8006678 <memset>
  if(huart->Instance==USART1)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <HAL_UART_MspInit+0xc4>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d145      	bne.n	8000a40 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009b4:	f04f 0201 	mov.w	r2, #1
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009c0:	2300      	movs	r3, #0
 80009c2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 f8ad 	bl	8002b28 <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80009d4:	f7ff ffb4 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_UART_MspInit+0xc8>)
 80009da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80009de:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <HAL_UART_MspInit+0xc8>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_MspInit+0xc8>)
 80009ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_UART_MspInit+0xc8>)
 80009f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <HAL_UART_MspInit+0xc8>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_UART_MspInit+0xc8>)
 8000a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a2e:	2307      	movs	r3, #7
 8000a30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_UART_MspInit+0xcc>)
 8000a3c:	f000 fa64 	bl	8000f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	37f0      	adds	r7, #240	; 0xf0
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40013800 	.word	0x40013800
 8000a4c:	46020c00 	.word	0x46020c00
 8000a50:	42020000 	.word	0x42020000

08000a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	; 0x38
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000a64:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <HAL_InitTick+0xcc>)
 8000a66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a6a:	4a2d      	ldr	r2, [pc, #180]	; (8000b20 <HAL_InitTick+0xcc>)
 8000a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a70:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <HAL_InitTick+0xcc>)
 8000a76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a82:	f107 0210 	add.w	r2, r7, #16
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 ff8d 	bl	80029ac <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a92:	f001 ff63 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 8000a96:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9a:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <HAL_InitTick+0xd0>)
 8000a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa0:	0c9b      	lsrs	r3, r3, #18
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <HAL_InitTick+0xd4>)
 8000aa8:	4a20      	ldr	r2, [pc, #128]	; (8000b2c <HAL_InitTick+0xd8>)
 8000aaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <HAL_InitTick+0xd4>)
 8000aae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000ab4:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <HAL_InitTick+0xd4>)
 8000ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_InitTick+0xd4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_InitTick+0xd4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <HAL_InitTick+0xd4>)
 8000ac8:	f004 fc78 	bl	80053bc <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000ad2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d118      	bne.n	8000b0c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <HAL_InitTick+0xd4>)
 8000adc:	f004 fcd0 	bl	8005480 <HAL_TIM_Base_Start_IT>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8000ae6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d10e      	bne.n	8000b0c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d808      	bhi.n	8000b06 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	2047      	movs	r0, #71	; 0x47
 8000afa:	f000 f9dd 	bl	8000eb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afe:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <HAL_InitTick+0xdc>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e002      	b.n	8000b0c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000b0c:	2047      	movs	r0, #71	; 0x47
 8000b0e:	f000 f9ed 	bl	8000eec <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000b12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3738      	adds	r7, #56	; 0x38
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	46020c00 	.word	0x46020c00
 8000b24:	431bde83 	.word	0x431bde83
 8000b28:	200000c8 	.word	0x200000c8
 8000b2c:	40014800 	.word	0x40014800
 8000b30:	20000014 	.word	0x20000014

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <TIM17_IRQHandler+0x10>)
 8000b92:	f004 fd15 	bl	80055c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000c8 	.word	0x200000c8

08000ba0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <SystemInit+0x68>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <SystemInit+0x68>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <SystemInit+0x6c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <SystemInit+0x6c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <SystemInit+0x6c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <SystemInit+0x6c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <SystemInit+0x6c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <SystemInit+0x6c>)
 8000bd2:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000bd6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bda:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <SystemInit+0x6c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <SystemInit+0x6c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <SystemInit+0x6c>)
 8000be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <SystemInit+0x6c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <SystemInit+0x68>)
 8000bf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bfa:	609a      	str	r2, [r3, #8]
  #endif
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00
 8000c0c:	46020c00 	.word	0x46020c00

08000c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c16:	e003      	b.n	8000c20 <LoopCopyDataInit>

08000c18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c1e:	3104      	adds	r1, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c28:	d3f6      	bcc.n	8000c18 <CopyDataInit>
	ldr	r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c2c:	e002      	b.n	8000c34 <LoopFillZerobss>

08000c2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c30:	f842 3b04 	str.w	r3, [r2], #4

08000c34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <LoopForever+0x16>)
	cmp	r2, r3
 8000c36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c38:	d3f9      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c3a:	f7ff ffb1 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f005 fcf7 	bl	8006630 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c42:	f7ff fca7 	bl	8000594 <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000c48:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000c4c:	080067b0 	.word	0x080067b0
	ldr	r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c54:	20000019 	.word	0x20000019
	ldr	r2, =_sbss
 8000c58:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8000c5c:	20000118 	.word	0x20000118

08000c60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_IRQHandler>
	...

08000c64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_Init+0x4c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <HAL_Init+0x4c>)
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f914 	bl	8000ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c7a:	f001 fd39 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_Init+0x50>)
 8000c82:	6a1b      	ldr	r3, [r3, #32]
 8000c84:	f003 030f 	and.w	r3, r3, #15
 8000c88:	490b      	ldr	r1, [pc, #44]	; (8000cb8 <HAL_Init+0x54>)
 8000c8a:	5ccb      	ldrb	r3, [r1, r3]
 8000c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x58>)
 8000c92:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c94:	2007      	movs	r0, #7
 8000c96:	f7ff fedd 	bl	8000a54 <HAL_InitTick>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e002      	b.n	8000caa <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe52 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40022000 	.word	0x40022000
 8000cb4:	46020c00 	.word	0x46020c00
 8000cb8:	080066a0 	.word	0x080066a0
 8000cbc:	20000010 	.word	0x20000010

08000cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000018 	.word	0x20000018
 8000ce4:	20000114 	.word	0x20000114

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000114 	.word	0x20000114

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff ffee 	bl	8000ce8 <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_Delay+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffde 	bl	8000ce8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000018 	.word	0x20000018

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff4c 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec6:	f7ff ff63 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000eca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	6978      	ldr	r0, [r7, #20]
 8000ed2:	f7ff ffb3 	bl	8000e3c <NVIC_EncodePriority>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff82 	bl	8000de8 <__NVIC_SetPriority>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff56 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f1a:	e1ba      	b.n	8001292 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 81aa 	beq.w	800128c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a55      	ldr	r2, [pc, #340]	; (8001090 <HAL_GPIO_Init+0x188>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d15d      	bne.n	8000ffc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000f46:	2201      	movs	r2, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0201 	and.w	r2, r3, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000f70:	4a48      	ldr	r2, [pc, #288]	; (8001094 <HAL_GPIO_Init+0x18c>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f78:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000f7a:	4a46      	ldr	r2, [pc, #280]	; (8001094 <HAL_GPIO_Init+0x18c>)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4413      	add	r3, r2
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220b      	movs	r2, #11
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	69f9      	ldr	r1, [r7, #28]
 8000fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69fa      	ldr	r2, [r7, #28]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2202      	movs	r2, #2
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e067      	b.n	80010cc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x104>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b12      	cmp	r3, #18
 800100a:	d145      	bne.n	8001098 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	4013      	ands	r3, r2
 800102e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f003 020f 	and.w	r2, r3, #15
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	4313      	orrs	r3, r2
 8001048:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	69f9      	ldr	r1, [r7, #28]
 8001054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	4013      	ands	r3, r2
 800106e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	4313      	orrs	r3, r2
 8001084:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e01e      	b.n	80010cc <HAL_GPIO_Init+0x1c4>
 800108e:	bf00      	nop
 8001090:	46020000 	.word	0x46020000
 8001094:	080066f8 	.word	0x080066f8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d00b      	beq.n	80010ec <HAL_GPIO_Init+0x1e4>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d007      	beq.n	80010ec <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e0:	2b11      	cmp	r3, #17
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b12      	cmp	r3, #18
 80010ea:	d130      	bne.n	800114e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	4013      	ands	r3, r2
 8001102:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	4313      	orrs	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001122:	2201      	movs	r2, #1
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	4013      	ands	r3, r2
 8001130:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	f003 0201 	and.w	r2, r3, #1
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	4313      	orrs	r3, r2
 8001146:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d017      	beq.n	8001186 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	4013      	ands	r3, r2
 800116c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	4313      	orrs	r3, r2
 800117e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d07c      	beq.n	800128c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001192:	4a47      	ldr	r2, [pc, #284]	; (80012b0 <HAL_GPIO_Init+0x3a8>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3318      	adds	r3, #24
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	0a9a      	lsrs	r2, r3, #10
 80011ba:	4b3e      	ldr	r3, [pc, #248]	; (80012b4 <HAL_GPIO_Init+0x3ac>)
 80011bc:	4013      	ands	r3, r2
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	f002 0203 	and.w	r2, r2, #3
 80011c4:	00d2      	lsls	r2, r2, #3
 80011c6:	4093      	lsls	r3, r2
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011ce:	4938      	ldr	r1, [pc, #224]	; (80012b0 <HAL_GPIO_Init+0x3a8>)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3318      	adds	r3, #24
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011dc:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <HAL_GPIO_Init+0x3a8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001200:	4a2b      	ldr	r2, [pc, #172]	; (80012b0 <HAL_GPIO_Init+0x3a8>)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <HAL_GPIO_Init+0x3a8>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43db      	mvns	r3, r3
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	4013      	ands	r3, r2
 8001214:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800122a:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <HAL_GPIO_Init+0x3a8>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <HAL_GPIO_Init+0x3a8>)
 8001232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001236:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43db      	mvns	r3, r3
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	4013      	ands	r3, r2
 8001240:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001256:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <HAL_GPIO_Init+0x3a8>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_GPIO_Init+0x3a8>)
 8001260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001264:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	4013      	ands	r3, r2
 800126e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_GPIO_Init+0x3a8>)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa22 f303 	lsr.w	r3, r2, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	f47f ae3d 	bne.w	8000f1c <HAL_GPIO_Init+0x14>
  }
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	3724      	adds	r7, #36	; 0x24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	46022000 	.word	0x46022000
 80012b4:	002f7f7f 	.word	0x002f7f7f

080012b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
 80012c4:	4613      	mov	r3, r2
 80012c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c8:	787b      	ldrb	r3, [r7, #1]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4013      	ands	r3, r2
 8001300:	041a      	lsls	r2, r3, #16
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43d9      	mvns	r1, r3
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	400b      	ands	r3, r1
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e007      	b.n	800134a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 0204 	bic.w	r2, r3, #4
 8001342:	4905      	ldr	r1, [pc, #20]	; (8001358 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
  }

  return status;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40030400 	.word	0x40030400

0800135c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_ICACHE_Enable+0x1c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_ICACHE_Enable+0x1c>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40030400 	.word	0x40030400

0800137c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001384:	4b34      	ldr	r3, [pc, #208]	; (8001458 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800138c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	d101      	bne.n	800139a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e057      	b.n	800144a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d90a      	bls.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	4a2a      	ldr	r2, [pc, #168]	; (8001458 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b4:	60d3      	str	r3, [r2, #12]
 80013b6:	e007      	b.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80013c0:	4925      	ldr	r1, [pc, #148]	; (8001458 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a24      	ldr	r2, [pc, #144]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	099b      	lsrs	r3, r3, #6
 80013d4:	2232      	movs	r2, #50	; 0x32
 80013d6:	fb02 f303 	mul.w	r3, r2, r3
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80013dc:	fba2 2303 	umull	r2, r3, r2, r3
 80013e0:	099b      	lsrs	r3, r3, #6
 80013e2:	3301      	adds	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80013e6:	e002      	b.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <HAL_PWREx_ControlVoltageScaling+0x84>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f3      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d01b      	beq.n	800143e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a15      	ldr	r2, [pc, #84]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	099b      	lsrs	r3, r3, #6
 8001412:	2232      	movs	r2, #50	; 0x32
 8001414:	fb02 f303 	mul.w	r3, r2, r3
 8001418:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	099b      	lsrs	r3, r3, #6
 8001420:	3301      	adds	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001424:	e002      	b.n	800142c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	3b01      	subs	r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800142e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f3      	bne.n	8001426 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e000      	b.n	800144a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	46020800 	.word	0x46020800
 800145c:	20000010 	.word	0x20000010
 8001460:	10624dd3 	.word	0x10624dd3

08001464 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <HAL_PWREx_GetVoltageRange+0x18>)
 800146a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	46020800 	.word	0x46020800

08001480 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_PWREx_ConfigSupply+0x94>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a22      	ldr	r2, [pc, #136]	; (8001518 <HAL_PWREx_ConfigSupply+0x98>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	099b      	lsrs	r3, r3, #6
 8001494:	2232      	movs	r2, #50	; 0x32
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_PWREx_ConfigSupply+0x98>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	099b      	lsrs	r3, r3, #6
 80014a2:	3301      	adds	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d113      	bne.n	80014d4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_PWREx_ConfigSupply+0x9c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a1a      	ldr	r2, [pc, #104]	; (800151c <HAL_PWREx_ConfigSupply+0x9c>)
 80014b2:	f023 0302 	bic.w	r3, r3, #2
 80014b6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014b8:	e002      	b.n	80014c0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3b01      	subs	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_PWREx_ConfigSupply+0x9c>)
 80014c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d116      	bne.n	80014fa <HAL_PWREx_ConfigSupply+0x7a>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f3      	bne.n	80014ba <HAL_PWREx_ConfigSupply+0x3a>
 80014d2:	e012      	b.n	80014fa <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_PWREx_ConfigSupply+0x9c>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_PWREx_ConfigSupply+0x9c>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014e0:	e002      	b.n	80014e8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_PWREx_ConfigSupply+0x9c>)
 80014ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <HAL_PWREx_ConfigSupply+0x7a>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f3      	bne.n	80014e2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e000      	b.n	8001506 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000010 	.word	0x20000010
 8001518:	10624dd3 	.word	0x10624dd3
 800151c:	46020800 	.word	0x46020800

08001520 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <HAL_PWREx_EnableVddIO2+0x1c>)
 800152a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800152e:	6113      	str	r3, [r2, #16]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	46020800 	.word	0x46020800

08001540 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	46020800 	.word	0x46020800

08001560 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	f000 bec3 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157a:	4b9c      	ldr	r3, [pc, #624]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001584:	4b99      	ldr	r3, [pc, #612]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0310 	and.w	r3, r3, #16
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8172 	beq.w	8001880 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_RCC_OscConfig+0x52>
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	2b0c      	cmp	r3, #12
 80015a6:	f040 80e4 	bne.w	8001772 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	f040 80e0 	bne.w	8001772 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b2:	4b8e      	ldr	r3, [pc, #568]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_RCC_OscConfig+0x6c>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f000 be9a 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d0:	4b86      	ldr	r3, [pc, #536]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <HAL_RCC_OscConfig+0x86>
 80015dc:	4b83      	ldr	r3, [pc, #524]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80015e4:	e005      	b.n	80015f2 <HAL_RCC_OscConfig+0x92>
 80015e6:	4b81      	ldr	r3, [pc, #516]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80015e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015ec:	041b      	lsls	r3, r3, #16
 80015ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d255      	bcs.n	80016a2 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80015f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10a      	bne.n	8001612 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	4618      	mov	r0, r3
 8001602:	f001 fa0b 	bl	8002a1c <RCC_SetFlashLatencyFromMSIRange>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	f000 be77 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001612:	4b76      	ldr	r3, [pc, #472]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	4a75      	ldr	r2, [pc, #468]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800161c:	6093      	str	r3, [r2, #8]
 800161e:	4b73      	ldr	r3, [pc, #460]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	4970      	ldr	r1, [pc, #448]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 800162c:	4313      	orrs	r3, r2
 800162e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001638:	d309      	bcc.n	800164e <HAL_RCC_OscConfig+0xee>
 800163a:	4b6c      	ldr	r3, [pc, #432]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f023 021f 	bic.w	r2, r3, #31
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4969      	ldr	r1, [pc, #420]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001648:	4313      	orrs	r3, r2
 800164a:	60cb      	str	r3, [r1, #12]
 800164c:	e07e      	b.n	800174c <HAL_RCC_OscConfig+0x1ec>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	2b00      	cmp	r3, #0
 8001654:	da0a      	bge.n	800166c <HAL_RCC_OscConfig+0x10c>
 8001656:	4b65      	ldr	r3, [pc, #404]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	015b      	lsls	r3, r3, #5
 8001664:	4961      	ldr	r1, [pc, #388]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001666:	4313      	orrs	r3, r2
 8001668:	60cb      	str	r3, [r1, #12]
 800166a:	e06f      	b.n	800174c <HAL_RCC_OscConfig+0x1ec>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001674:	d30a      	bcc.n	800168c <HAL_RCC_OscConfig+0x12c>
 8001676:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	029b      	lsls	r3, r3, #10
 8001684:	4959      	ldr	r1, [pc, #356]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001686:	4313      	orrs	r3, r2
 8001688:	60cb      	str	r3, [r1, #12]
 800168a:	e05f      	b.n	800174c <HAL_RCC_OscConfig+0x1ec>
 800168c:	4b57      	ldr	r3, [pc, #348]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	03db      	lsls	r3, r3, #15
 800169a:	4954      	ldr	r1, [pc, #336]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 800169c:	4313      	orrs	r3, r2
 800169e:	60cb      	str	r3, [r1, #12]
 80016a0:	e054      	b.n	800174c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80016a2:	4b52      	ldr	r3, [pc, #328]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	4a51      	ldr	r2, [pc, #324]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80016a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016ac:	6093      	str	r3, [r2, #8]
 80016ae:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	494c      	ldr	r1, [pc, #304]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80016c8:	d309      	bcc.n	80016de <HAL_RCC_OscConfig+0x17e>
 80016ca:	4b48      	ldr	r3, [pc, #288]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f023 021f 	bic.w	r2, r3, #31
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4945      	ldr	r1, [pc, #276]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	60cb      	str	r3, [r1, #12]
 80016dc:	e028      	b.n	8001730 <HAL_RCC_OscConfig+0x1d0>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	da0a      	bge.n	80016fc <HAL_RCC_OscConfig+0x19c>
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	015b      	lsls	r3, r3, #5
 80016f4:	493d      	ldr	r1, [pc, #244]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60cb      	str	r3, [r1, #12]
 80016fa:	e019      	b.n	8001730 <HAL_RCC_OscConfig+0x1d0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001704:	d30a      	bcc.n	800171c <HAL_RCC_OscConfig+0x1bc>
 8001706:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	029b      	lsls	r3, r3, #10
 8001714:	4935      	ldr	r1, [pc, #212]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001716:	4313      	orrs	r3, r2
 8001718:	60cb      	str	r3, [r1, #12]
 800171a:	e009      	b.n	8001730 <HAL_RCC_OscConfig+0x1d0>
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	03db      	lsls	r3, r3, #15
 800172a:	4930      	ldr	r1, [pc, #192]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 800172c:	4313      	orrs	r3, r2
 800172e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10a      	bne.n	800174c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	4618      	mov	r0, r3
 800173c:	f001 f96e 	bl	8002a1c <RCC_SetFlashLatencyFromMSIRange>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	f000 bdda 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800174c:	f001 f8d8 	bl	8002900 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_OscConfig+0x290>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff f97d 	bl	8000a54 <HAL_InitTick>
 800175a:	4603      	mov	r3, r0
 800175c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 808a 	beq.w	800187e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800176a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800176e:	f000 bdc7 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d066      	beq.n	8001848 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800177a:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001786:	f7ff faaf 	bl	8000ce8 <HAL_GetTick>
 800178a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800178c:	e009      	b.n	80017a2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800178e:	f7ff faab 	bl	8000ce8 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d902      	bls.n	80017a2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	f000 bdaf 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0ef      	beq.n	800178e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80017b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017b8:	6093      	str	r3, [r2, #8]
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	4909      	ldr	r1, [pc, #36]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80017d4:	d30e      	bcc.n	80017f4 <HAL_RCC_OscConfig+0x294>
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f023 021f 	bic.w	r2, r3, #31
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4902      	ldr	r1, [pc, #8]	; (80017ec <HAL_RCC_OscConfig+0x28c>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60cb      	str	r3, [r1, #12]
 80017e8:	e04a      	b.n	8001880 <HAL_RCC_OscConfig+0x320>
 80017ea:	bf00      	nop
 80017ec:	46020c00 	.word	0x46020c00
 80017f0:	20000014 	.word	0x20000014
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da0a      	bge.n	8001812 <HAL_RCC_OscConfig+0x2b2>
 80017fc:	4b9b      	ldr	r3, [pc, #620]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	015b      	lsls	r3, r3, #5
 800180a:	4998      	ldr	r1, [pc, #608]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 800180c:	4313      	orrs	r3, r2
 800180e:	60cb      	str	r3, [r1, #12]
 8001810:	e036      	b.n	8001880 <HAL_RCC_OscConfig+0x320>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181a:	d30a      	bcc.n	8001832 <HAL_RCC_OscConfig+0x2d2>
 800181c:	4b93      	ldr	r3, [pc, #588]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	029b      	lsls	r3, r3, #10
 800182a:	4990      	ldr	r1, [pc, #576]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 800182c:	4313      	orrs	r3, r2
 800182e:	60cb      	str	r3, [r1, #12]
 8001830:	e026      	b.n	8001880 <HAL_RCC_OscConfig+0x320>
 8001832:	4b8e      	ldr	r3, [pc, #568]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	03db      	lsls	r3, r3, #15
 8001840:	498a      	ldr	r1, [pc, #552]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001842:	4313      	orrs	r3, r2
 8001844:	60cb      	str	r3, [r1, #12]
 8001846:	e01b      	b.n	8001880 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001848:	4b88      	ldr	r3, [pc, #544]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a87      	ldr	r2, [pc, #540]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001854:	f7ff fa48 	bl	8000ce8 <HAL_GetTick>
 8001858:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800185a:	e009      	b.n	8001870 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800185c:	f7ff fa44 	bl	8000ce8 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d902      	bls.n	8001870 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	f000 bd48 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001870:	4b7e      	ldr	r3, [pc, #504]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1ef      	bne.n	800185c <HAL_RCC_OscConfig+0x2fc>
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800187e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 8094 	beq.w	80019b6 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001890:	2b08      	cmp	r3, #8
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_OscConfig+0x340>
 8001894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d110      	bne.n	80018bc <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	2b03      	cmp	r3, #3
 800189e:	d10d      	bne.n	80018bc <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	4b72      	ldr	r3, [pc, #456]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 8083 	beq.w	80019b4 <HAL_RCC_OscConfig+0x454>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d17e      	bne.n	80019b4 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	f000 bd22 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d106      	bne.n	80018d4 <HAL_RCC_OscConfig+0x374>
 80018c6:	4b69      	ldr	r3, [pc, #420]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a68      	ldr	r2, [pc, #416]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e041      	b.n	8001958 <HAL_RCC_OscConfig+0x3f8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018dc:	d112      	bne.n	8001904 <HAL_RCC_OscConfig+0x3a4>
 80018de:	4b63      	ldr	r3, [pc, #396]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a62      	ldr	r2, [pc, #392]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b60      	ldr	r3, [pc, #384]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a5f      	ldr	r2, [pc, #380]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80018f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a5c      	ldr	r2, [pc, #368]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e029      	b.n	8001958 <HAL_RCC_OscConfig+0x3f8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800190c:	d112      	bne.n	8001934 <HAL_RCC_OscConfig+0x3d4>
 800190e:	4b57      	ldr	r3, [pc, #348]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a56      	ldr	r2, [pc, #344]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b54      	ldr	r3, [pc, #336]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a53      	ldr	r2, [pc, #332]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b51      	ldr	r3, [pc, #324]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a50      	ldr	r2, [pc, #320]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e011      	b.n	8001958 <HAL_RCC_OscConfig+0x3f8>
 8001934:	4b4d      	ldr	r3, [pc, #308]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a4c      	ldr	r2, [pc, #304]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 800193a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a49      	ldr	r2, [pc, #292]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b47      	ldr	r3, [pc, #284]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a46      	ldr	r2, [pc, #280]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001952:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d014      	beq.n	800198a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8001960:	f7ff f9c2 	bl	8000ce8 <HAL_GetTick>
 8001964:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001966:	e009      	b.n	800197c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff f9be 	bl	8000ce8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d902      	bls.n	800197c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	f000 bcc2 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197c:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0ef      	beq.n	8001968 <HAL_RCC_OscConfig+0x408>
 8001988:	e015      	b.n	80019b6 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800198a:	f7ff f9ad 	bl	8000ce8 <HAL_GetTick>
 800198e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001990:	e009      	b.n	80019a6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001992:	f7ff f9a9 	bl	8000ce8 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	; 0x64
 800199e:	d902      	bls.n	80019a6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	f000 bcad 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1ef      	bne.n	8001992 <HAL_RCC_OscConfig+0x432>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d066      	beq.n	8001a90 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_OscConfig+0x474>
 80019c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	d11a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d117      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_RCC_OscConfig+0x48e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f000 bc89 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	491b      	ldr	r1, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a02:	e045      	b.n	8001a90 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d024      	beq.n	8001a56 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a18:	f7ff f966 	bl	8000ce8 <HAL_GetTick>
 8001a1c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1e:	e009      	b.n	8001a34 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a20:	f7ff f962 	bl	8000ce8 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d902      	bls.n	8001a34 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	f000 bc66 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ef      	beq.n	8001a20 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	4907      	ldr	r1, [pc, #28]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	610b      	str	r3, [r1, #16]
 8001a54:	e01c      	b.n	8001a90 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_RCC_OscConfig+0x50c>)
 8001a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a60:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a62:	f7ff f941 	bl	8000ce8 <HAL_GetTick>
 8001a66:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a68:	e00c      	b.n	8001a84 <HAL_RCC_OscConfig+0x524>
 8001a6a:	bf00      	nop
 8001a6c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff f93a 	bl	8000ce8 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d902      	bls.n	8001a84 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	f000 bc3e 	b.w	8002300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a84:	4baf      	ldr	r3, [pc, #700]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ef      	bne.n	8001a70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80c7 	beq.w	8001c2c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa4:	4ba7      	ldr	r3, [pc, #668]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d111      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	4ba4      	ldr	r3, [pc, #656]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab8:	4aa2      	ldr	r2, [pc, #648]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ac2:	4ba0      	ldr	r3, [pc, #640]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ad6:	4b9c      	ldr	r3, [pc, #624]	; (8001d48 <HAL_RCC_OscConfig+0x7e8>)
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001ae2:	4b99      	ldr	r3, [pc, #612]	; (8001d48 <HAL_RCC_OscConfig+0x7e8>)
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	4a98      	ldr	r2, [pc, #608]	; (8001d48 <HAL_RCC_OscConfig+0x7e8>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7ff f8fb 	bl	8000ce8 <HAL_GetTick>
 8001af2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7ff f8f7 	bl	8000ce8 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e3fb      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b08:	4b8f      	ldr	r3, [pc, #572]	; (8001d48 <HAL_RCC_OscConfig+0x7e8>)
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d05f      	beq.n	8001bdc <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001b1c:	4b89      	ldr	r3, [pc, #548]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b22:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699a      	ldr	r2, [r3, #24]
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d037      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e3da      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01b      	beq.n	8001b8c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b54:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b5a:	4a7a      	ldr	r2, [pc, #488]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001b5c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001b60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001b64:	f7ff f8c0 	bl	8000ce8 <HAL_GetTick>
 8001b68:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff f8bc 	bl	8000ce8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e3c0      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b7e:	4b71      	ldr	r3, [pc, #452]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ef      	bne.n	8001b6c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001b8c:	4b6d      	ldr	r3, [pc, #436]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	496a      	ldr	r1, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001ba2:	4b68      	ldr	r3, [pc, #416]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba8:	4a66      	ldr	r2, [pc, #408]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001baa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001bb2:	f7ff f899 	bl	8000ce8 <HAL_GetTick>
 8001bb6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bba:	f7ff f895 	bl	8000ce8 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e399      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bcc:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0ef      	beq.n	8001bba <HAL_RCC_OscConfig+0x65a>
 8001bda:	e01b      	b.n	8001c14 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001bdc:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be2:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001be4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001be8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001bec:	f7ff f87c 	bl	8000ce8 <HAL_GetTick>
 8001bf0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7ff f878 	bl	8000ce8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e37c      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c06:	4b4f      	ldr	r3, [pc, #316]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1ef      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1c:	4b49      	ldr	r3, [pc, #292]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c22:	4a48      	ldr	r2, [pc, #288]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001c24:	f023 0304 	bic.w	r3, r3, #4
 8001c28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8112 	beq.w	8001e5e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c40:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d111      	bne.n	8001c72 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c54:	4a3b      	ldr	r2, [pc, #236]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c5e:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c72:	4b35      	ldr	r3, [pc, #212]	; (8001d48 <HAL_RCC_OscConfig+0x7e8>)
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001c7e:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <HAL_RCC_OscConfig+0x7e8>)
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <HAL_RCC_OscConfig+0x7e8>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f82d 	bl	8000ce8 <HAL_GetTick>
 8001c8e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c92:	f7ff f829 	bl	8000ce8 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e32d      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ca4:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_RCC_OscConfig+0x7e8>)
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01f      	beq.n	8001cfc <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d010      	beq.n	8001cea <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cce:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cde:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ce8:	e018      	b.n	8001d1c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cf0:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cfa:	e00f      	b.n	8001d1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d02:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d12:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <HAL_RCC_OscConfig+0x7e4>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d058      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8001d24:	f7fe ffe0 	bl	8000ce8 <HAL_GetTick>
 8001d28:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d2a:	e00f      	b.n	8001d4c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2c:	f7fe ffdc 	bl	8000ce8 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d906      	bls.n	8001d4c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e2de      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
 8001d42:	bf00      	nop
 8001d44:	46020c00 	.word	0x46020c00
 8001d48:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4c:	4b9c      	ldr	r3, [pc, #624]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0e8      	beq.n	8001d2c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d01b      	beq.n	8001d9e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d66:	4b96      	ldr	r3, [pc, #600]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d6c:	4a94      	ldr	r2, [pc, #592]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d78:	f7fe ffb6 	bl	8000ce8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e2b8      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d8e:	4b8c      	ldr	r3, [pc, #560]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0ed      	beq.n	8001d78 <HAL_RCC_OscConfig+0x818>
 8001d9c:	e053      	b.n	8001e46 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d9e:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001da4:	4a86      	ldr	r2, [pc, #536]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001daa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7fe ff9a 	bl	8000ce8 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e29c      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001dc6:	4b7e      	ldr	r3, [pc, #504]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ed      	bne.n	8001db0 <HAL_RCC_OscConfig+0x850>
 8001dd4:	e037      	b.n	8001e46 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001dd6:	f7fe ff87 	bl	8000ce8 <HAL_GetTick>
 8001dda:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7fe ff83 	bl	8000ce8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e285      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df4:	4b72      	ldr	r3, [pc, #456]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ed      	bne.n	8001dde <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001e02:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01a      	beq.n	8001e46 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e10:	4b6b      	ldr	r3, [pc, #428]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e16:	4a6a      	ldr	r2, [pc, #424]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe ff61 	bl	8000ce8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e263      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e38:	4b61      	ldr	r3, [pc, #388]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ed      	bne.n	8001e22 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4e:	4b5c      	ldr	r3, [pc, #368]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e54:	4a5a      	ldr	r2, [pc, #360]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001e56:	f023 0304 	bic.w	r3, r3, #4
 8001e5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d036      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d019      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001e72:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a52      	ldr	r2, [pc, #328]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e7c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e7e:	f7fe ff33 	bl	8000ce8 <HAL_GetTick>
 8001e82:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e86:	f7fe ff2f 	bl	8000ce8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e233      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e98:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x926>
 8001ea4:	e018      	b.n	8001ed8 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a45      	ldr	r2, [pc, #276]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001eac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eb0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001eb2:	f7fe ff19 	bl	8000ce8 <HAL_GetTick>
 8001eb6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eba:	f7fe ff15 	bl	8000ce8 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e219      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f0      	bne.n	8001eba <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d036      	beq.n	8001f52 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d019      	beq.n	8001f20 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001eec:	4b34      	ldr	r3, [pc, #208]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a33      	ldr	r2, [pc, #204]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ef8:	f7fe fef6 	bl	8000ce8 <HAL_GetTick>
 8001efc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001f00:	f7fe fef2 	bl	8000ce8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1f6      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x9a0>
 8001f1e:	e018      	b.n	8001f52 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001f26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f2a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f2c:	f7fe fedc 	bl	8000ce8 <HAL_GetTick>
 8001f30:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001f34:	f7fe fed8 	bl	8000ce8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1dc      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d07f      	beq.n	800205e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d062      	beq.n	800202c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001f6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f70:	6093      	str	r3, [r2, #8]
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	4910      	ldr	r1, [pc, #64]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001f8c:	d309      	bcc.n	8001fa2 <HAL_RCC_OscConfig+0xa42>
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f023 021f 	bic.w	r2, r3, #31
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4909      	ldr	r1, [pc, #36]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
 8001fa0:	e02a      	b.n	8001ff8 <HAL_RCC_OscConfig+0xa98>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	da0c      	bge.n	8001fc4 <HAL_RCC_OscConfig+0xa64>
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	015b      	lsls	r3, r3, #5
 8001fb8:	4901      	ldr	r1, [pc, #4]	; (8001fc0 <HAL_RCC_OscConfig+0xa60>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60cb      	str	r3, [r1, #12]
 8001fbe:	e01b      	b.n	8001ff8 <HAL_RCC_OscConfig+0xa98>
 8001fc0:	46020c00 	.word	0x46020c00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fcc:	d30a      	bcc.n	8001fe4 <HAL_RCC_OscConfig+0xa84>
 8001fce:	4ba5      	ldr	r3, [pc, #660]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	029b      	lsls	r3, r3, #10
 8001fdc:	49a1      	ldr	r1, [pc, #644]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60cb      	str	r3, [r1, #12]
 8001fe2:	e009      	b.n	8001ff8 <HAL_RCC_OscConfig+0xa98>
 8001fe4:	4b9f      	ldr	r3, [pc, #636]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	03db      	lsls	r3, r3, #15
 8001ff2:	499c      	ldr	r1, [pc, #624]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001ff8:	4b9a      	ldr	r3, [pc, #616]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a99      	ldr	r2, [pc, #612]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8001ffe:	f043 0310 	orr.w	r3, r3, #16
 8002002:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002004:	f7fe fe70 	bl	8000ce8 <HAL_GetTick>
 8002008:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800200c:	f7fe fe6c 	bl	8000ce8 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e170      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800201e:	4b91      	ldr	r3, [pc, #580]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0xaac>
 800202a:	e018      	b.n	800205e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800202c:	4b8d      	ldr	r3, [pc, #564]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a8c      	ldr	r2, [pc, #560]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002032:	f023 0310 	bic.w	r3, r3, #16
 8002036:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002038:	f7fe fe56 	bl	8000ce8 <HAL_GetTick>
 800203c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002040:	f7fe fe52 	bl	8000ce8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e156      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002052:	4b84      	ldr	r3, [pc, #528]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 814b 	beq.w	80022fe <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206e:	4b7d      	ldr	r3, [pc, #500]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b0c      	cmp	r3, #12
 8002078:	f000 80fa 	beq.w	8002270 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	2b02      	cmp	r3, #2
 8002082:	f040 80cc 	bne.w	800221e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002086:	4b77      	ldr	r3, [pc, #476]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a76      	ldr	r2, [pc, #472]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 800208c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002090:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002092:	f7fe fe29 	bl	8000ce8 <HAL_GetTick>
 8002096:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209a:	f7fe fe25 	bl	8000ce8 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e129      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80020ac:	4b6d      	ldr	r3, [pc, #436]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b8:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80020ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d111      	bne.n	80020ea <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b67      	ldr	r3, [pc, #412]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80020c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020cc:	4a65      	ldr	r2, [pc, #404]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80020d6:	4b63      	ldr	r3, [pc, #396]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80020d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <HAL_RCC_OscConfig+0xd08>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020f6:	d102      	bne.n	80020fe <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80020f8:	2301      	movs	r3, #1
 80020fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80020fe:	4b5a      	ldr	r3, [pc, #360]	; (8002268 <HAL_RCC_OscConfig+0xd08>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a59      	ldr	r2, [pc, #356]	; (8002268 <HAL_RCC_OscConfig+0xd08>)
 8002104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002108:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800210a:	4b56      	ldr	r3, [pc, #344]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800211e:	3a01      	subs	r2, #1
 8002120:	0212      	lsls	r2, r2, #8
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002128:	430a      	orrs	r2, r1
 800212a:	494e      	ldr	r1, [pc, #312]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 800212c:	4313      	orrs	r3, r2
 800212e:	628b      	str	r3, [r1, #40]	; 0x28
 8002130:	4b4c      	ldr	r3, [pc, #304]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002134:	4b4d      	ldr	r3, [pc, #308]	; (800226c <HAL_RCC_OscConfig+0xd0c>)
 8002136:	4013      	ands	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800213c:	3a01      	subs	r2, #1
 800213e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002146:	3a01      	subs	r2, #1
 8002148:	0252      	lsls	r2, r2, #9
 800214a:	b292      	uxth	r2, r2
 800214c:	4311      	orrs	r1, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002152:	3a01      	subs	r2, #1
 8002154:	0412      	lsls	r2, r2, #16
 8002156:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800215a:	4311      	orrs	r1, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002160:	3a01      	subs	r2, #1
 8002162:	0612      	lsls	r2, r2, #24
 8002164:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002168:	430a      	orrs	r2, r1
 800216a:	493e      	ldr	r1, [pc, #248]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 800216c:	4313      	orrs	r3, r2
 800216e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002170:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	4a3b      	ldr	r2, [pc, #236]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002176:	f023 0310 	bic.w	r3, r3, #16
 800217a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800217c:	4b39      	ldr	r3, [pc, #228]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002184:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800218c:	00d2      	lsls	r2, r2, #3
 800218e:	4935      	ldr	r1, [pc, #212]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002190:	4313      	orrs	r3, r2
 8002192:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002194:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	4a32      	ldr	r2, [pc, #200]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 800219a:	f043 0310 	orr.w	r3, r3, #16
 800219e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	f023 020c 	bic.w	r2, r3, #12
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	492d      	ldr	r1, [pc, #180]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80021b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d105      	bne.n	80021c6 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80021ba:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <HAL_RCC_OscConfig+0xd08>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4a2a      	ldr	r2, [pc, #168]	; (8002268 <HAL_RCC_OscConfig+0xd08>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80021c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b25      	ldr	r3, [pc, #148]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80021d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d4:	4a23      	ldr	r2, [pc, #140]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80021d6:	f023 0304 	bic.w	r3, r3, #4
 80021da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 80021f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80021f6:	f7fe fd77 	bl	8000ce8 <HAL_GetTick>
 80021fa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7fe fd73 	bl	8000ce8 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e077      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0xc9e>
 800221c:	e06f      	b.n	80022fe <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a10      	ldr	r2, [pc, #64]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002228:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800222a:	f7fe fd5d 	bl	8000ce8 <HAL_GetTick>
 800222e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe fd59 	bl	8000ce8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e05d      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002244:	4b07      	ldr	r3, [pc, #28]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	4a03      	ldr	r2, [pc, #12]	; (8002264 <HAL_RCC_OscConfig+0xd04>)
 8002256:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	6293      	str	r3, [r2, #40]	; 0x28
 8002260:	e04d      	b.n	80022fe <HAL_RCC_OscConfig+0xd9e>
 8002262:	bf00      	nop
 8002264:	46020c00 	.word	0x46020c00
 8002268:	46020800 	.word	0x46020800
 800226c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_RCC_OscConfig+0xda8>)
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_OscConfig+0xda8>)
 8002278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002280:	2b01      	cmp	r3, #1
 8002282:	d03a      	beq.n	80022fa <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0203 	and.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d133      	bne.n	80022fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d12a      	bne.n	80022fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	0b1b      	lsrs	r3, r3, #12
 80022a8:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d122      	bne.n	80022fa <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022be:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d11a      	bne.n	80022fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	0a5b      	lsrs	r3, r3, #9
 80022c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d111      	bne.n	80022fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d108      	bne.n	80022fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	0e1b      	lsrs	r3, r3, #24
 80022ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3738      	adds	r7, #56	; 0x38
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	46020c00 	.word	0x46020c00

0800230c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e1d9      	b.n	80026d4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b9b      	ldr	r3, [pc, #620]	; (8002590 <HAL_RCC_ClockConfig+0x284>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d910      	bls.n	8002350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b98      	ldr	r3, [pc, #608]	; (8002590 <HAL_RCC_ClockConfig+0x284>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 020f 	bic.w	r2, r3, #15
 8002336:	4996      	ldr	r1, [pc, #600]	; (8002590 <HAL_RCC_ClockConfig+0x284>)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b94      	ldr	r3, [pc, #592]	; (8002590 <HAL_RCC_ClockConfig+0x284>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e1c1      	b.n	80026d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b00      	cmp	r3, #0
 800235a:	d010      	beq.n	800237e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	4b8c      	ldr	r3, [pc, #560]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002368:	429a      	cmp	r2, r3
 800236a:	d908      	bls.n	800237e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800236c:	4b89      	ldr	r3, [pc, #548]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	4986      	ldr	r1, [pc, #536]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 800237a:	4313      	orrs	r3, r2
 800237c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d012      	beq.n	80023b0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	4b81      	ldr	r3, [pc, #516]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002398:	429a      	cmp	r2, r3
 800239a:	d909      	bls.n	80023b0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800239c:	4b7d      	ldr	r3, [pc, #500]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	497a      	ldr	r1, [pc, #488]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d010      	beq.n	80023de <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	4b74      	ldr	r3, [pc, #464]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d908      	bls.n	80023de <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80023cc:	4b71      	ldr	r3, [pc, #452]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	496e      	ldr	r1, [pc, #440]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d010      	beq.n	800240c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	4b69      	ldr	r3, [pc, #420]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d908      	bls.n	800240c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80023fa:	4b66      	ldr	r3, [pc, #408]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	f023 020f 	bic.w	r2, r3, #15
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	4963      	ldr	r1, [pc, #396]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 8002408:	4313      	orrs	r3, r2
 800240a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80d2 	beq.w	80025be <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d143      	bne.n	80024ae <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d110      	bne.n	8002456 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002434:	4b57      	ldr	r3, [pc, #348]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 8002436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243a:	4a56      	ldr	r2, [pc, #344]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 8002446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002452:	2301      	movs	r3, #1
 8002454:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002456:	f7fe fc47 	bl	8000ce8 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800245c:	4b4e      	ldr	r3, [pc, #312]	; (8002598 <HAL_RCC_ClockConfig+0x28c>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00f      	beq.n	8002488 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800246a:	f7fe fc3d 	bl	8000ce8 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e12b      	b.n	80026d4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800247c:	4b46      	ldr	r3, [pc, #280]	; (8002598 <HAL_RCC_ClockConfig+0x28c>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 8002490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002494:	4a3f      	ldr	r2, [pc, #252]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 8002496:	f023 0304 	bic.w	r3, r3, #4
 800249a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d121      	bne.n	80024ee <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e112      	b.n	80026d4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b6:	4b37      	ldr	r3, [pc, #220]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d115      	bne.n	80024ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e106      	b.n	80026d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0fa      	b.n	80026d4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0f2      	b.n	80026d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80024ee:	4b29      	ldr	r3, [pc, #164]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f023 0203 	bic.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	4926      	ldr	r1, [pc, #152]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002500:	f7fe fbf2 	bl	8000ce8 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d112      	bne.n	8002534 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7fe fbea 	bl	8000ce8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e0d6      	b.n	80026d4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d1ee      	bne.n	8002510 <HAL_RCC_ClockConfig+0x204>
 8002532:	e044      	b.n	80025be <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d112      	bne.n	8002562 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800253c:	e00a      	b.n	8002554 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253e:	f7fe fbd3 	bl	8000ce8 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0bf      	b.n	80026d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f003 030c 	and.w	r3, r3, #12
 800255c:	2b08      	cmp	r3, #8
 800255e:	d1ee      	bne.n	800253e <HAL_RCC_ClockConfig+0x232>
 8002560:	e02d      	b.n	80025be <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d123      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7fe fbbc 	bl	8000ce8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e0a8      	b.n	80026d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <HAL_RCC_ClockConfig+0x288>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ee      	bne.n	800256c <HAL_RCC_ClockConfig+0x260>
 800258e:	e016      	b.n	80025be <HAL_RCC_ClockConfig+0x2b2>
 8002590:	40022000 	.word	0x40022000
 8002594:	46020c00 	.word	0x46020c00
 8002598:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259c:	f7fe fba4 	bl	8000ce8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e090      	b.n	80026d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b2:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d1ee      	bne.n	800259c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d208      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80025da:	4b40      	ldr	r3, [pc, #256]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f023 020f 	bic.w	r2, r3, #15
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	493d      	ldr	r1, [pc, #244]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b3c      	ldr	r3, [pc, #240]	; (80026e0 <HAL_RCC_ClockConfig+0x3d4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d210      	bcs.n	800261c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <HAL_RCC_ClockConfig+0x3d4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 020f 	bic.w	r2, r3, #15
 8002602:	4937      	ldr	r1, [pc, #220]	; (80026e0 <HAL_RCC_ClockConfig+0x3d4>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b35      	ldr	r3, [pc, #212]	; (80026e0 <HAL_RCC_ClockConfig+0x3d4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e05b      	b.n	80026d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d010      	beq.n	800264a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002634:	429a      	cmp	r2, r3
 8002636:	d208      	bcs.n	800264a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4b28      	ldr	r3, [pc, #160]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4925      	ldr	r1, [pc, #148]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d012      	beq.n	800267c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002664:	429a      	cmp	r2, r3
 8002666:	d209      	bcs.n	800267c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	4919      	ldr	r1, [pc, #100]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d010      	beq.n	80026aa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002694:	429a      	cmp	r2, r3
 8002696:	d208      	bcs.n	80026aa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	490d      	ldr	r1, [pc, #52]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80026aa:	f000 f821 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_RCC_ClockConfig+0x3d0>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	490a      	ldr	r1, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x3d8>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
 80026c0:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x3dc>)
 80026c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x3e0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe f9c3 	bl	8000a54 <HAL_InitTick>
 80026ce:	4603      	mov	r3, r0
 80026d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	46020c00 	.word	0x46020c00
 80026e0:	40022000 	.word	0x40022000
 80026e4:	080066a0 	.word	0x080066a0
 80026e8:	20000010 	.word	0x20000010
 80026ec:	20000014 	.word	0x20000014

080026f0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b08b      	sub	sp, #44	; 0x2c
 80026f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fe:	4b7b      	ldr	r3, [pc, #492]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002708:	4b78      	ldr	r3, [pc, #480]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x34>
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d121      	bne.n	8002762 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d11e      	bne.n	8002762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002724:	4b71      	ldr	r3, [pc, #452]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d107      	bne.n	8002740 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002730:	4b6e      	ldr	r3, [pc, #440]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002736:	0b1b      	lsrs	r3, r3, #12
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	e005      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002740:	4b6a      	ldr	r3, [pc, #424]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	0f1b      	lsrs	r3, r3, #28
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800274c:	4a68      	ldr	r2, [pc, #416]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002754:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d110      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002760:	e00d      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002762:	4b62      	ldr	r3, [pc, #392]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b04      	cmp	r3, #4
 800276c:	d102      	bne.n	8002774 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800276e:	4b61      	ldr	r3, [pc, #388]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	e004      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d101      	bne.n	800277e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800277a:	4b5e      	ldr	r3, [pc, #376]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800277c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b0c      	cmp	r3, #12
 8002782:	f040 80ac 	bne.w	80028de <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002786:	4b59      	ldr	r3, [pc, #356]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002790:	4b56      	ldr	r3, [pc, #344]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	3301      	adds	r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800279e:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80027aa:	4b50      	ldr	r3, [pc, #320]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	08db      	lsrs	r3, r3, #3
 80027b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8086 	beq.w	80028da <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d003      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0xec>
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d022      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x130>
 80027da:	e043      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e6:	eddf 6a44 	vldr	s13, [pc, #272]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x208>
 80027ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ee:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80027fe:	ed97 6a01 	vldr	s12, [r7, #4]
 8002802:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80028fc <HAL_RCC_GetSysClockFreq+0x20c>
 8002806:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800280a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800280e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002812:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800281e:	e046      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282a:	eddf 6a33 	vldr	s13, [pc, #204]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x208>
 800282e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002832:	4b2e      	ldr	r3, [pc, #184]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002842:	ed97 6a01 	vldr	s12, [r7, #4]
 8002846:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80028fc <HAL_RCC_GetSysClockFreq+0x20c>
 800284a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800284e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002856:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800285a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002862:	e024      	b.n	80028ae <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	ee07 3a90 	vmov	s15, r3
 8002874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800288c:	ed97 6a01 	vldr	s12, [r7, #4]
 8002890:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80028fc <HAL_RCC_GetSysClockFreq+0x20c>
 8002894:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002898:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800289c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80028ac:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	0e1b      	lsrs	r3, r3, #24
 80028b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028b8:	3301      	adds	r3, #1
 80028ba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	ee07 3a90 	vmov	s15, r3
 80028c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80028ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028d2:	ee17 3a90 	vmov	r3, s15
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	e001      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80028de:	6a3b      	ldr	r3, [r7, #32]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	372c      	adds	r7, #44	; 0x2c
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	46020c00 	.word	0x46020c00
 80028f0:	080066b8 	.word	0x080066b8
 80028f4:	00f42400 	.word	0x00f42400
 80028f8:	4b742400 	.word	0x4b742400
 80028fc:	46000000 	.word	0x46000000

08002900 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002904:	f7ff fef4 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_RCC_GetHCLKFreq+0x28>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	4906      	ldr	r1, [pc, #24]	; (800292c <HAL_RCC_GetHCLKFreq+0x2c>)
 8002914:	5ccb      	ldrb	r3, [r1, r3]
 8002916:	fa22 f303 	lsr.w	r3, r2, r3
 800291a:	4a05      	ldr	r2, [pc, #20]	; (8002930 <HAL_RCC_GetHCLKFreq+0x30>)
 800291c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800291e:	4b04      	ldr	r3, [pc, #16]	; (8002930 <HAL_RCC_GetHCLKFreq+0x30>)
 8002920:	681b      	ldr	r3, [r3, #0]
}
 8002922:	4618      	mov	r0, r3
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	46020c00 	.word	0x46020c00
 800292c:	080066a0 	.word	0x080066a0
 8002930:	20000010 	.word	0x20000010

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002938:	f7ff ffe2 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4903      	ldr	r1, [pc, #12]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	46020c00 	.word	0x46020c00
 8002958:	080066b0 	.word	0x080066b0

0800295c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002960:	f7ff ffce 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4903      	ldr	r1, [pc, #12]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	46020c00 	.word	0x46020c00
 8002980:	080066b0 	.word	0x080066b0

08002984 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002988:	f7ff ffba 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	4903      	ldr	r1, [pc, #12]	; (80029a8 <HAL_RCC_GetPCLK3Freq+0x24>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	46020c00 	.word	0x46020c00
 80029a8:	080066b0 	.word	0x080066b0

080029ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	221f      	movs	r2, #31
 80029ba:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <HAL_RCC_GetClockConfig+0x68>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_RCC_GetClockConfig+0x68>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f003 020f 	and.w	r2, r3, #15
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <HAL_RCC_GetClockConfig+0x68>)
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_RCC_GetClockConfig+0x68>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_GetClockConfig+0x68>)
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <HAL_RCC_GetClockConfig+0x6c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 020f 	and.w	r2, r3, #15
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	601a      	str	r2, [r3, #0]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	46020c00 	.word	0x46020c00
 8002a18:	40022000 	.word	0x40022000

08002a1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a24:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a32:	f7fe fd17 	bl	8001464 <HAL_PWREx_GetVoltageRange>
 8002a36:	6178      	str	r0, [r7, #20]
 8002a38:	e019      	b.n	8002a6e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a40:	4a37      	ldr	r2, [pc, #220]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002a4a:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a58:	f7fe fd04 	bl	8001464 <HAL_PWREx_GetVoltageRange>
 8002a5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a5e:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a64:	4a2e      	ldr	r2, [pc, #184]	; (8002b20 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a66:	f023 0304 	bic.w	r3, r3, #4
 8002a6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a74:	d003      	beq.n	8002a7e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a7c:	d109      	bne.n	8002a92 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a84:	d202      	bcs.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002a86:	2301      	movs	r3, #1
 8002a88:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002a8a:	e033      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002a90:	e030      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a98:	d208      	bcs.n	8002aac <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d102      	bne.n	8002aa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	e025      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e035      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ab2:	d90f      	bls.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ac0:	d902      	bls.n	8002ac8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	e015      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002ac8:	2301      	movs	r3, #1
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	e012      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	e00f      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ada:	d109      	bne.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae2:	d102      	bne.n	8002aea <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	e004      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002aea:	2302      	movs	r3, #2
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	e001      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002af0:	2301      	movs	r3, #1
 8002af2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 020f 	bic.w	r2, r3, #15
 8002afc:	4909      	ldr	r1, [pc, #36]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002b04:	4b07      	ldr	r3, [pc, #28]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d001      	beq.n	8002b16 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	46020c00 	.word	0x46020c00
 8002b24:	40022000 	.word	0x40022000

08002b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b2c:	b0ba      	sub	sp, #232	; 0xe8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b48:	f002 0401 	and.w	r4, r2, #1
 8002b4c:	2500      	movs	r5, #0
 8002b4e:	ea54 0305 	orrs.w	r3, r4, r5
 8002b52:	d00b      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002b54:	4bcb      	ldr	r3, [pc, #812]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5a:	f023 0103 	bic.w	r1, r3, #3
 8002b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	4ac7      	ldr	r2, [pc, #796]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b66:	430b      	orrs	r3, r1
 8002b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f002 0802 	and.w	r8, r2, #2
 8002b78:	f04f 0900 	mov.w	r9, #0
 8002b7c:	ea58 0309 	orrs.w	r3, r8, r9
 8002b80:	d00b      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002b82:	4bc0      	ldr	r3, [pc, #768]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b88:	f023 010c 	bic.w	r1, r3, #12
 8002b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	4abc      	ldr	r2, [pc, #752]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b94:	430b      	orrs	r3, r1
 8002b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f002 0a04 	and.w	sl, r2, #4
 8002ba6:	f04f 0b00 	mov.w	fp, #0
 8002baa:	ea5a 030b 	orrs.w	r3, sl, fp
 8002bae:	d00b      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002bb0:	4bb4      	ldr	r3, [pc, #720]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	4ab0      	ldr	r2, [pc, #704]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f002 0308 	and.w	r3, r2, #8
 8002bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002be2:	460b      	mov	r3, r1
 8002be4:	4313      	orrs	r3, r2
 8002be6:	d00b      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002be8:	4ba6      	ldr	r3, [pc, #664]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	4aa2      	ldr	r2, [pc, #648]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f002 0310 	and.w	r3, r2, #16
 8002c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	d00b      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002c20:	4b98      	ldr	r3, [pc, #608]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c30:	4a94      	ldr	r2, [pc, #592]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c32:	430b      	orrs	r3, r1
 8002c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f002 0320 	and.w	r3, r2, #32
 8002c44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002c52:	460b      	mov	r3, r1
 8002c54:	4313      	orrs	r3, r2
 8002c56:	d00b      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002c58:	4b8a      	ldr	r3, [pc, #552]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c5e:	f023 0107 	bic.w	r1, r3, #7
 8002c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c68:	4a86      	ldr	r2, [pc, #536]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002c90:	4b7c      	ldr	r3, [pc, #496]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c96:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002c9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ca0:	4a78      	ldr	r2, [pc, #480]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cbe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	d00b      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002cc8:	4b6e      	ldr	r3, [pc, #440]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd8:	4a6a      	ldr	r2, [pc, #424]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ce0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002cf6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	d00b      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002d00:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a5c      	ldr	r2, [pc, #368]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d12:	430b      	orrs	r3, r1
 8002d14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002d32:	460b      	mov	r3, r1
 8002d34:	4313      	orrs	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002d38:	4b52      	ldr	r3, [pc, #328]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d48:	4a4e      	ldr	r2, [pc, #312]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002d5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	d00b      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002d70:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d76:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d80:	4a40      	ldr	r2, [pc, #256]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d82:	430b      	orrs	r3, r1
 8002d84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d9e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002da2:	460b      	mov	r3, r1
 8002da4:	4313      	orrs	r3, r2
 8002da6:	d00b      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002da8:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dae:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db8:	4a32      	ldr	r2, [pc, #200]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002dc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002dcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dd6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	d00c      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002de0:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002de6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df2:	4a24      	ldr	r2, [pc, #144]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df4:	430b      	orrs	r3, r1
 8002df6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002e06:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e08:	2300      	movs	r3, #0
 8002e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e0c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002e10:	460b      	mov	r3, r1
 8002e12:	4313      	orrs	r3, r2
 8002e14:	d04f      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	2b80      	cmp	r3, #128	; 0x80
 8002e20:	d02d      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d827      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002e26:	2b60      	cmp	r3, #96	; 0x60
 8002e28:	d02e      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002e2a:	2b60      	cmp	r3, #96	; 0x60
 8002e2c:	d823      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d006      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002e32:	2b40      	cmp	r3, #64	; 0x40
 8002e34:	d81f      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d011      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002e3e:	e01a      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	4a0f      	ldr	r2, [pc, #60]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e4c:	e01d      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e52:	3308      	adds	r3, #8
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 f981 	bl	800515c <RCCEx_PLL2_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e60:	e013      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e66:	332c      	adds	r3, #44	; 0x2c
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 fa0f 	bl	800528c <RCCEx_PLL3_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e74:	e009      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002e7c:	e005      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8002e7e:	bf00      	nop
 8002e80:	e003      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002e82:	bf00      	nop
 8002e84:	46020c00 	.word	0x46020c00
        break;
 8002e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10d      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002e92:	4bb6      	ldr	r3, [pc, #728]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002e94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e98:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8002e9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	4ab1      	ldr	r2, [pc, #708]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002eac:	e003      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002eb2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002ec2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	677b      	str	r3, [r7, #116]	; 0x74
 8002ec8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	d053      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ede:	d033      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee4:	d82c      	bhi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eea:	d02f      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ef0:	d826      	bhi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002efc:	d820      	bhi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8002f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f06:	d011      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002f08:	e01a      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f0a:	4b98      	ldr	r3, [pc, #608]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	4a97      	ldr	r2, [pc, #604]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002f16:	e01a      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f002 f91c 	bl	800515c <RCCEx_PLL2_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002f2a:	e010      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f30:	332c      	adds	r3, #44	; 0x2c
 8002f32:	4618      	mov	r0, r3
 8002f34:	f002 f9aa 	bl	800528c <RCCEx_PLL3_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002f3e:	e006      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002f46:	e002      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8002f48:	bf00      	nop
 8002f4a:	e000      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8002f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10d      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002f56:	4b85      	ldr	r3, [pc, #532]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f5c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002f60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f68:	4a80      	ldr	r2, [pc, #512]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002f70:	e003      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f72:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002f76:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002f86:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f88:	2300      	movs	r3, #0
 8002f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f8c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002f90:	460b      	mov	r3, r1
 8002f92:	4313      	orrs	r3, r2
 8002f94:	d046      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f9e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002fa2:	d028      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002fa4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002fa8:	d821      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fae:	d022      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb4:	d81b      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002fb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fba:	d01c      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002fbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fc0:	d815      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc6:	d008      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fcc:	d80f      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d011      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002fd8:	e009      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fde:	3308      	adds	r3, #8
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f002 f8bb 	bl	800515c <RCCEx_PLL2_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002fec:	e004      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002ff4:	e000      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8002ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10d      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003000:	4b5a      	ldr	r3, [pc, #360]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003006:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800300a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800300e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003012:	4a56      	ldr	r2, [pc, #344]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003014:	430b      	orrs	r3, r1
 8003016:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800301a:	e003      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003020:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003024:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003030:	663b      	str	r3, [r7, #96]	; 0x60
 8003032:	2300      	movs	r3, #0
 8003034:	667b      	str	r3, [r7, #100]	; 0x64
 8003036:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800303a:	460b      	mov	r3, r1
 800303c:	4313      	orrs	r3, r2
 800303e:	d03f      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	2b04      	cmp	r3, #4
 800304a:	d81e      	bhi.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x562>
 800304c:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	08003093 	.word	0x08003093
 8003058:	08003069 	.word	0x08003069
 800305c:	08003077 	.word	0x08003077
 8003060:	08003093 	.word	0x08003093
 8003064:	08003093 	.word	0x08003093
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003068:	4b40      	ldr	r3, [pc, #256]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	4a3f      	ldr	r2, [pc, #252]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003074:	e00e      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800307a:	332c      	adds	r3, #44	; 0x2c
 800307c:	4618      	mov	r0, r3
 800307e:	f002 f905 	bl	800528c <RCCEx_PLL3_Config>
 8003082:	4603      	mov	r3, r0
 8003084:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003088:	e004      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003090:	e000      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8003092:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003094:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10d      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800309c:	4b33      	ldr	r3, [pc, #204]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800309e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030a2:	f023 0107 	bic.w	r1, r3, #7
 80030a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	4a2f      	ldr	r2, [pc, #188]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80030b0:	430b      	orrs	r3, r1
 80030b2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80030b6:	e003      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80030bc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80030c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80030cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80030ce:	2300      	movs	r3, #0
 80030d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80030d6:	460b      	mov	r3, r1
 80030d8:	4313      	orrs	r3, r2
 80030da:	d04d      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80030dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030e8:	d028      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x614>
 80030ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030ee:	d821      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80030f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030f4:	d024      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80030f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030fa:	d81b      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80030fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003100:	d00e      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003106:	d815      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01b      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003110:	d110      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	4a15      	ldr	r2, [pc, #84]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800311e:	e012      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003124:	332c      	adds	r3, #44	; 0x2c
 8003126:	4618      	mov	r0, r3
 8003128:	f002 f8b0 	bl	800528c <RCCEx_PLL3_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003132:	e008      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800313a:	e004      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800313c:	bf00      	nop
 800313e:	e002      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003140:	bf00      	nop
 8003142:	e000      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003144:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003146:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d110      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003154:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800315c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003160:	4a02      	ldr	r2, [pc, #8]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003162:	430b      	orrs	r3, r1
 8003164:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003168:	e006      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800316a:	bf00      	nop
 800316c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003170:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003174:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003184:	653b      	str	r3, [r7, #80]	; 0x50
 8003186:	2300      	movs	r3, #0
 8003188:	657b      	str	r3, [r7, #84]	; 0x54
 800318a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800318e:	460b      	mov	r3, r1
 8003190:	4313      	orrs	r3, r2
 8003192:	f000 80b5 	beq.w	8003300 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003196:	2300      	movs	r3, #0
 8003198:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319c:	4b9d      	ldr	r3, [pc, #628]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800319e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d113      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	4b9a      	ldr	r3, [pc, #616]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b0:	4a98      	ldr	r2, [pc, #608]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80031ba:	4b96      	ldr	r3, [pc, #600]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80031d2:	4b91      	ldr	r3, [pc, #580]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	4a90      	ldr	r2, [pc, #576]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031de:	f7fd fd83 	bl	8000ce8 <HAL_GetTick>
 80031e2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80031e6:	e00b      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e8:	f7fd fd7e 	bl	8000ce8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d903      	bls.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80031fe:	e005      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003200:	4b85      	ldr	r3, [pc, #532]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ed      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800320c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d165      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003214:	4b7f      	ldr	r3, [pc, #508]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800321a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003226:	2b00      	cmp	r3, #0
 8003228:	d023      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800322a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800322e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	4293      	cmp	r3, r2
 8003238:	d01b      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800323a:	4b76      	ldr	r3, [pc, #472]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800323c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003244:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003248:	4b72      	ldr	r3, [pc, #456]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800324a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800324e:	4a71      	ldr	r2, [pc, #452]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003258:	4b6e      	ldr	r3, [pc, #440]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800325a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800325e:	4a6d      	ldr	r2, [pc, #436]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003268:	4a6a      	ldr	r2, [pc, #424]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d019      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327e:	f7fd fd33 	bl	8000ce8 <HAL_GetTick>
 8003282:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003286:	e00d      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7fd fd2e 	bl	8000ce8 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003292:	1ad2      	subs	r2, r2, r3
 8003294:	f241 3388 	movw	r3, #5000	; 0x1388
 8003298:	429a      	cmp	r2, r3
 800329a:	d903      	bls.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80032a2:	e006      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a4:	4b5b      	ldr	r3, [pc, #364]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0ea      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80032b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10d      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80032ba:	4b56      	ldr	r3, [pc, #344]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032cc:	4a51      	ldr	r2, [pc, #324]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032ce:	430b      	orrs	r3, r1
 80032d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032d4:	e008      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80032da:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80032de:	e003      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80032e4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032e8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d107      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f0:	4b48      	ldr	r3, [pc, #288]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f6:	4a47      	ldr	r2, [pc, #284]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032f8:	f023 0304 	bic.w	r3, r3, #4
 80032fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003300:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
 800330e:	2300      	movs	r3, #0
 8003310:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003312:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003316:	460b      	mov	r3, r1
 8003318:	4313      	orrs	r3, r2
 800331a:	d042      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800331c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003320:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003324:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003328:	d022      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800332a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800332e:	d81b      	bhi.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003334:	d011      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8003336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800333a:	d815      	bhi.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d019      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8003340:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003344:	d110      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800334a:	3308      	adds	r3, #8
 800334c:	4618      	mov	r0, r3
 800334e:	f001 ff05 	bl	800515c <RCCEx_PLL2_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003358:	e00d      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800335a:	4b2e      	ldr	r3, [pc, #184]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	4a2d      	ldr	r2, [pc, #180]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003364:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003366:	e006      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800336e:	e002      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8003370:	bf00      	nop
 8003372:	e000      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8003374:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003376:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10d      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800337e:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003384:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003388:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800338c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003390:	4a20      	ldr	r2, [pc, #128]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003392:	430b      	orrs	r3, r1
 8003394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003398:	e003      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800339e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80033ae:	643b      	str	r3, [r7, #64]	; 0x40
 80033b0:	2300      	movs	r3, #0
 80033b2:	647b      	str	r3, [r7, #68]	; 0x44
 80033b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80033b8:	460b      	mov	r3, r1
 80033ba:	4313      	orrs	r3, r2
 80033bc:	d032      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80033be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ca:	d00b      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80033cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d0:	d804      	bhi.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80033d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033da:	d007      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80033e2:	e004      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80033e4:	bf00      	nop
 80033e6:	e002      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80033e8:	bf00      	nop
 80033ea:	e000      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80033ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 80033ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d112      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80033f6:	4b07      	ldr	r3, [pc, #28]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80033f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80033fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003408:	4a02      	ldr	r2, [pc, #8]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800340a:	430b      	orrs	r3, r1
 800340c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003410:	e008      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8003412:	bf00      	nop
 8003414:	46020c00 	.word	0x46020c00
 8003418:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003420:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003424:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003430:	63bb      	str	r3, [r7, #56]	; 0x38
 8003432:	2300      	movs	r3, #0
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003436:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800343a:	460b      	mov	r3, r1
 800343c:	4313      	orrs	r3, r2
 800343e:	d00c      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003440:	4b98      	ldr	r3, [pc, #608]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003442:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003446:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800344a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800344e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003452:	4a94      	ldr	r2, [pc, #592]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003454:	430b      	orrs	r3, r1
 8003456:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800345a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003466:	633b      	str	r3, [r7, #48]	; 0x30
 8003468:	2300      	movs	r3, #0
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
 800346c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003470:	460b      	mov	r3, r1
 8003472:	4313      	orrs	r3, r2
 8003474:	d019      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800347a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800347e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003482:	d105      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003484:	4b87      	ldr	r3, [pc, #540]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	4a86      	ldr	r2, [pc, #536]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800348a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003490:	4b84      	ldr	r3, [pc, #528]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003492:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003496:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800349a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800349e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034a2:	4a80      	ldr	r2, [pc, #512]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034a4:	430b      	orrs	r3, r1
 80034a6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80034aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b8:	2300      	movs	r3, #0
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80034c0:	460b      	mov	r3, r1
 80034c2:	4313      	orrs	r3, r2
 80034c4:	d00c      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80034c6:	4b77      	ldr	r3, [pc, #476]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034d8:	4972      	ldr	r1, [pc, #456]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80034e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80034ec:	623b      	str	r3, [r7, #32]
 80034ee:	2300      	movs	r3, #0
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
 80034f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80034f6:	460b      	mov	r3, r1
 80034f8:	4313      	orrs	r3, r2
 80034fa:	d00c      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80034fc:	4b69      	ldr	r3, [pc, #420]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003502:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800350a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800350e:	4965      	ldr	r1, [pc, #404]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003522:	61bb      	str	r3, [r7, #24]
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800352c:	460b      	mov	r3, r1
 800352e:	4313      	orrs	r3, r2
 8003530:	d00c      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003532:	4b5c      	ldr	r3, [pc, #368]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003538:	f023 0218 	bic.w	r2, r3, #24
 800353c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003540:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003544:	4957      	ldr	r1, [pc, #348]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800354c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003562:	460b      	mov	r3, r1
 8003564:	4313      	orrs	r3, r2
 8003566:	d032      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003568:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800356c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003574:	d105      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003576:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	4a4a      	ldr	r2, [pc, #296]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800357c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003580:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003586:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800358a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800358e:	d108      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003590:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003594:	3308      	adds	r3, #8
 8003596:	4618      	mov	r0, r3
 8003598:	f001 fde0 	bl	800515c <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80035a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80035aa:	4b3e      	ldr	r3, [pc, #248]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80035ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80035b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035bc:	4939      	ldr	r1, [pc, #228]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80035c4:	e003      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80035ca:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80035ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80035e4:	460b      	mov	r3, r1
 80035e6:	4313      	orrs	r3, r2
 80035e8:	d03a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80035ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f6:	d00e      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80035f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035fc:	d815      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d017      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003602:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003606:	d110      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003608:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	4a25      	ldr	r2, [pc, #148]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800360e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003612:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003614:	e00e      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800361a:	3308      	adds	r3, #8
 800361c:	4618      	mov	r0, r3
 800361e:	f001 fd9d 	bl	800515c <RCCEx_PLL2_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003628:	e004      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003630:	e000      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8003632:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003634:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10d      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800363c:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800363e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003642:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800364a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364e:	4915      	ldr	r1, [pc, #84]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003656:	e003      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003658:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800365c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	2300      	movs	r3, #0
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003676:	460b      	mov	r3, r1
 8003678:	4313      	orrs	r3, r2
 800367a:	d00c      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800367e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003682:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800368a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800368e:	4905      	ldr	r1, [pc, #20]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003696:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800369a:	4618      	mov	r0, r3
 800369c:	37e8      	adds	r7, #232	; 0xe8
 800369e:	46bd      	mov	sp, r7
 80036a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a4:	46020c00 	.word	0x46020c00

080036a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b089      	sub	sp, #36	; 0x24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80036b0:	4bac      	ldr	r3, [pc, #688]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80036b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80036ba:	4baa      	ldr	r3, [pc, #680]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80036c4:	4ba7      	ldr	r3, [pc, #668]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	0a1b      	lsrs	r3, r3, #8
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	3301      	adds	r3, #1
 80036d0:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80036d2:	4ba4      	ldr	r3, [pc, #656]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80036dc:	4ba1      	ldr	r3, [pc, #644]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	08db      	lsrs	r3, r3, #3
 80036e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8123 	beq.w	8003946 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d062      	beq.n	80037cc <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b03      	cmp	r3, #3
 800370a:	f200 8081 	bhi.w	8003810 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d024      	beq.n	800375e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d17a      	bne.n	8003810 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	ee07 3a90 	vmov	s15, r3
 8003720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003724:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8003728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372c:	4b8d      	ldr	r3, [pc, #564]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800373c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003740:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800396c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003744:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003748:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800374c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003750:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003758:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800375c:	e08f      	b.n	800387e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800375e:	4b81      	ldr	r3, [pc, #516]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800376a:	4b7e      	ldr	r3, [pc, #504]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	0f1b      	lsrs	r3, r3, #28
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	e006      	b.n	8003784 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8003776:	4b7b      	ldr	r3, [pc, #492]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	0f1b      	lsrs	r3, r3, #28
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	4a7a      	ldr	r2, [pc, #488]	; (8003970 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	ee07 3a90 	vmov	s15, r3
 8003798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ae:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800396c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80037b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037be:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80037c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037ca:	e058      	b.n	800387e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80037da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037de:	4b61      	ldr	r3, [pc, #388]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80037e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80037ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80037f2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800396c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80037f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80037fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003802:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800380e:	e036      	b.n	800387e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003810:	4b54      	ldr	r3, [pc, #336]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800381c:	4b51      	ldr	r3, [pc, #324]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	0f1b      	lsrs	r3, r3, #28
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	e006      	b.n	8003836 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8003828:	4b4e      	ldr	r3, [pc, #312]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800382a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800382e:	041b      	lsls	r3, r3, #16
 8003830:	0f1b      	lsrs	r3, r3, #28
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	4a4e      	ldr	r2, [pc, #312]	; (8003970 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383c:	ee07 3a90 	vmov	s15, r3
 8003840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800385c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003860:	eddf 5a42 	vldr	s11, [pc, #264]	; 800396c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800386c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003870:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003878:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800387c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800387e:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d017      	beq.n	80038ba <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800388a:	4b36      	ldr	r3, [pc, #216]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	0a5b      	lsrs	r3, r3, #9
 8003890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003894:	ee07 3a90 	vmov	s15, r3
 8003898:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800389c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038a0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80038a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80038a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038b0:	ee17 2a90 	vmov	r2, s15
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e002      	b.n	80038c0 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80038c0:	4b28      	ldr	r3, [pc, #160]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d017      	beq.n	80038fc <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80038de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038e2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80038e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f2:	ee17 2a90 	vmov	r2, s15
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	e002      	b.n	8003902 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003902:	4b18      	ldr	r3, [pc, #96]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d017      	beq.n	800393e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800390e:	4b15      	ldr	r3, [pc, #84]	; (8003964 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003912:	0e1b      	lsrs	r3, r3, #24
 8003914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003918:	ee07 3a90 	vmov	s15, r3
 800391c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003924:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003928:	edd7 6a07 	vldr	s13, [r7, #28]
 800392c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003934:	ee17 2a90 	vmov	r2, s15
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800393c:	e00c      	b.n	8003958 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	609a      	str	r2, [r3, #8]
}
 8003944:	e008      	b.n	8003958 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
}
 8003958:	bf00      	nop
 800395a:	3724      	adds	r7, #36	; 0x24
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	46020c00 	.word	0x46020c00
 8003968:	4b742400 	.word	0x4b742400
 800396c:	46000000 	.word	0x46000000
 8003970:	080066b8 	.word	0x080066b8

08003974 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003974:	b480      	push	{r7}
 8003976:	b089      	sub	sp, #36	; 0x24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800397c:	4bac      	ldr	r3, [pc, #688]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003984:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003986:	4baa      	ldr	r3, [pc, #680]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003990:	4ba7      	ldr	r3, [pc, #668]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	0a1b      	lsrs	r3, r3, #8
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	3301      	adds	r3, #1
 800399c:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800399e:	4ba4      	ldr	r3, [pc, #656]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80039a8:	4ba1      	ldr	r3, [pc, #644]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	08db      	lsrs	r3, r3, #3
 80039ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	ee07 3a90 	vmov	s15, r3
 80039bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 8123 	beq.w	8003c12 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d062      	beq.n	8003a98 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	f200 8081 	bhi.w	8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d024      	beq.n	8003a2a <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d17a      	bne.n	8003adc <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	ee07 3a90 	vmov	s15, r3
 80039ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80039f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f8:	4b8d      	ldr	r3, [pc, #564]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a08:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a0c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a28:	e08f      	b.n	8003b4a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003a2a:	4b81      	ldr	r3, [pc, #516]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8003a36:	4b7e      	ldr	r3, [pc, #504]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	0f1b      	lsrs	r3, r3, #28
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	e006      	b.n	8003a50 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8003a42:	4b7b      	ldr	r3, [pc, #492]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a48:	041b      	lsls	r3, r3, #16
 8003a4a:	0f1b      	lsrs	r3, r3, #28
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	4a7a      	ldr	r2, [pc, #488]	; (8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	ee07 3a90 	vmov	s15, r3
 8003a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a7a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a96:	e058      	b.n	8003b4a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8003aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aaa:	4b61      	ldr	r3, [pc, #388]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003abe:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ada:	e036      	b.n	8003b4a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003adc:	4b54      	ldr	r3, [pc, #336]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8003ae8:	4b51      	ldr	r3, [pc, #324]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	0f1b      	lsrs	r3, r3, #28
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	e006      	b.n	8003b02 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8003af4:	4b4e      	ldr	r3, [pc, #312]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003af6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003afa:	041b      	lsls	r3, r3, #16
 8003afc:	0f1b      	lsrs	r3, r3, #28
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	4a4e      	ldr	r2, [pc, #312]	; (8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b08:	ee07 3a90 	vmov	s15, r3
 8003b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	ee07 3a90 	vmov	s15, r3
 8003b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b28:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b2c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b48:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003b4a:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d017      	beq.n	8003b86 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b56:	4b36      	ldr	r3, [pc, #216]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	0a5b      	lsrs	r3, r3, #9
 8003b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b60:	ee07 3a90 	vmov	s15, r3
 8003b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b7c:	ee17 2a90 	vmov	r2, s15
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	e002      	b.n	8003b8c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003b8c:	4b28      	ldr	r3, [pc, #160]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d017      	beq.n	8003bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b98:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bae:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bbe:	ee17 2a90 	vmov	r2, s15
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	e002      	b.n	8003bce <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003bce:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d017      	beq.n	8003c0a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	0e1b      	lsrs	r3, r3, #24
 8003be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003bec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c00:	ee17 2a90 	vmov	r2, s15
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c08:	e00c      	b.n	8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	609a      	str	r2, [r3, #8]
}
 8003c10:	e008      	b.n	8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
}
 8003c24:	bf00      	nop
 8003c26:	3724      	adds	r7, #36	; 0x24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	46020c00 	.word	0x46020c00
 8003c34:	4b742400 	.word	0x4b742400
 8003c38:	46000000 	.word	0x46000000
 8003c3c:	080066b8 	.word	0x080066b8

08003c40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b089      	sub	sp, #36	; 0x24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003c48:	4bac      	ldr	r3, [pc, #688]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c50:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003c52:	4baa      	ldr	r3, [pc, #680]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003c5c:	4ba7      	ldr	r3, [pc, #668]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	0a1b      	lsrs	r3, r3, #8
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3301      	adds	r3, #1
 8003c68:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8003c6a:	4ba4      	ldr	r3, [pc, #656]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003c74:	4ba1      	ldr	r3, [pc, #644]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c78:	08db      	lsrs	r3, r3, #3
 8003c7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	fb02 f303 	mul.w	r3, r2, r3
 8003c84:	ee07 3a90 	vmov	s15, r3
 8003c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8123 	beq.w	8003ede <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d062      	beq.n	8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	f200 8081 	bhi.w	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d024      	beq.n	8003cf6 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d17a      	bne.n	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbc:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8003cc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc4:	4b8d      	ldr	r3, [pc, #564]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cd8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003cdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ce4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf0:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8003cf4:	e08f      	b.n	8003e16 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003cf6:	4b81      	ldr	r3, [pc, #516]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8003d02:	4b7e      	ldr	r3, [pc, #504]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	0f1b      	lsrs	r3, r3, #28
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	e006      	b.n	8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8003d0e:	4b7b      	ldr	r3, [pc, #492]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	0f1b      	lsrs	r3, r3, #28
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	4a7a      	ldr	r2, [pc, #488]	; (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d46:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d62:	e058      	b.n	8003e16 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8003d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d76:	4b61      	ldr	r3, [pc, #388]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d8a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003da6:	e036      	b.n	8003e16 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003da8:	4b54      	ldr	r3, [pc, #336]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8003db4:	4b51      	ldr	r3, [pc, #324]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	0f1b      	lsrs	r3, r3, #28
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	e006      	b.n	8003dce <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8003dc0:	4b4e      	ldr	r3, [pc, #312]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dc6:	041b      	lsls	r3, r3, #16
 8003dc8:	0f1b      	lsrs	r3, r3, #28
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	4a4e      	ldr	r2, [pc, #312]	; (8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	ee07 3a90 	vmov	s15, r3
 8003df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003df8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e14:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003e16:	4b39      	ldr	r3, [pc, #228]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d017      	beq.n	8003e52 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003e22:	4b36      	ldr	r3, [pc, #216]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	0a5b      	lsrs	r3, r3, #9
 8003e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e2c:	ee07 3a90 	vmov	s15, r3
 8003e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003e34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e38:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003e3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e48:	ee17 2a90 	vmov	r2, s15
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	e002      	b.n	8003e58 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003e58:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d017      	beq.n	8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003e64:	4b25      	ldr	r3, [pc, #148]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003e76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003e7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e8a:	ee17 2a90 	vmov	r2, s15
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	e002      	b.n	8003e9a <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003e9a:	4b18      	ldr	r3, [pc, #96]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d017      	beq.n	8003ed6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	0e1b      	lsrs	r3, r3, #24
 8003eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb0:	ee07 3a90 	vmov	s15, r3
 8003eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ecc:	ee17 2a90 	vmov	r2, s15
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8003ed4:	e00c      	b.n	8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
}
 8003edc:	e008      	b.n	8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	3724      	adds	r7, #36	; 0x24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	46020c00 	.word	0x46020c00
 8003f00:	4b742400 	.word	0x4b742400
 8003f04:	46000000 	.word	0x46000000
 8003f08:	080066b8 	.word	0x080066b8

08003f0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08e      	sub	sp, #56	; 0x38
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f1a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	d145      	bne.n	8003fae <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003f22:	4ba7      	ldr	r3, [pc, #668]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003f2e:	4ba4      	ldr	r3, [pc, #656]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d108      	bne.n	8003f4e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f42:	d104      	bne.n	8003f4e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f48:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4a:	f001 b8fc 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003f4e:	4b9c      	ldr	r3, [pc, #624]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f5c:	d114      	bne.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f64:	d110      	bne.n	8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003f66:	4b96      	ldr	r3, [pc, #600]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f74:	d103      	bne.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8003f76:	23fa      	movs	r3, #250	; 0xfa
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003f7a:	f001 b8e4 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8003f7e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003f82:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003f84:	f001 b8df 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003f88:	4b8d      	ldr	r3, [pc, #564]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f94:	d107      	bne.n	8003fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f9c:	d103      	bne.n	8003fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8003f9e:	4b89      	ldr	r3, [pc, #548]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa2:	f001 b8d0 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8003faa:	f001 b8cc 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fb2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	d151      	bne.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003fba:	4b81      	ldr	r3, [pc, #516]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003fbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fc0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003fc4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	2b80      	cmp	r3, #128	; 0x80
 8003fca:	d035      	beq.n	8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	2b80      	cmp	r3, #128	; 0x80
 8003fd0:	d841      	bhi.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	2b60      	cmp	r3, #96	; 0x60
 8003fd6:	d02a      	beq.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	2b60      	cmp	r3, #96	; 0x60
 8003fdc:	d83b      	bhi.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	d009      	beq.n	8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	2b40      	cmp	r3, #64	; 0x40
 8003fe8:	d835      	bhi.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00c      	beq.n	800400a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d012      	beq.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003ff6:	e02e      	b.n	8004056 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fb53 	bl	80036a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004006:	f001 b89e 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800400a:	f107 0318 	add.w	r3, r7, #24
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fcb0 	bl	8003974 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004018:	f001 b895 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800401c:	f107 030c 	add.w	r3, r7, #12
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fe0d 	bl	8003c40 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800402a:	f001 b88c 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800402e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004034:	f001 b887 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004038:	4b61      	ldr	r3, [pc, #388]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004044:	d103      	bne.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004046:	4b60      	ldr	r3, [pc, #384]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800404a:	f001 b87c 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004052:	f001 b878 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800405a:	f001 b874 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800405e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004062:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8004066:	430b      	orrs	r3, r1
 8004068:	d158      	bne.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800406a:	4b55      	ldr	r3, [pc, #340]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800406c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004074:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407c:	d03b      	beq.n	80040f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004084:	d846      	bhi.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800408c:	d02e      	beq.n	80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004094:	d83e      	bhi.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409c:	d00b      	beq.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a4:	d836      	bhi.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00d      	beq.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b2:	d012      	beq.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80040b4:	e02e      	b.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80040b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff faf4 	bl	80036a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040c4:	f001 b83f 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040c8:	f107 0318 	add.w	r3, r7, #24
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fc51 	bl	8003974 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040d6:	f001 b836 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80040da:	f107 030c 	add.w	r3, r7, #12
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fdae 	bl	8003c40 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040e8:	f001 b82d 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80040ec:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80040f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040f2:	f001 b828 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040f6:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004102:	d103      	bne.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004104:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004106:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004108:	f001 b81d 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004110:	f001 b819 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004118:	f001 b815 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800411c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004120:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004124:	430b      	orrs	r3, r1
 8004126:	d126      	bne.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004128:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800412a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800412e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004132:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004134:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004140:	d106      	bne.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	2b00      	cmp	r3, #0
 8004146:	d103      	bne.n	8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8004148:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800414a:	637b      	str	r3, [r7, #52]	; 0x34
 800414c:	f000 bffb 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415c:	d107      	bne.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004164:	d103      	bne.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8004166:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004168:	637b      	str	r3, [r7, #52]	; 0x34
 800416a:	f000 bfec 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	637b      	str	r3, [r7, #52]	; 0x34
 8004172:	f000 bfe8 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800417a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800417e:	430b      	orrs	r3, r1
 8004180:	d164      	bne.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004182:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004188:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800418c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004194:	d03d      	beq.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800419c:	d852      	bhi.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a4:	d014      	beq.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ac:	d84a      	bhi.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01f      	beq.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041ba:	d012      	beq.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80041bc:	e042      	b.n	8004244 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80041be:	bf00      	nop
 80041c0:	46020c00 	.word	0x46020c00
 80041c4:	0007a120 	.word	0x0007a120
 80041c8:	00f42400 	.word	0x00f42400
 80041cc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80041d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fa67 	bl	80036a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041de:	f000 bfb2 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041e2:	f107 0318 	add.w	r3, r7, #24
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fbc4 	bl	8003974 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041f0:	f000 bfa9 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80041f4:	4bab      	ldr	r3, [pc, #684]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004200:	d103      	bne.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8004202:	4ba9      	ldr	r3, [pc, #676]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004204:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004206:	f000 bf9e 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800420e:	f000 bf9a 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004212:	4ba4      	ldr	r3, [pc, #656]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800421e:	4ba1      	ldr	r3, [pc, #644]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	0e1b      	lsrs	r3, r3, #24
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	e006      	b.n	8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800422a:	4b9e      	ldr	r3, [pc, #632]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800422c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	0e1b      	lsrs	r3, r3, #24
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	4a9c      	ldr	r2, [pc, #624]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800423a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004240:	f000 bf81 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004248:	f000 bf7d 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800424c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004250:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8004254:	430b      	orrs	r3, r1
 8004256:	d175      	bne.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004258:	4b92      	ldr	r3, [pc, #584]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800425a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800425e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004262:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	2b00      	cmp	r3, #0
 8004268:	d15b      	bne.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800426a:	4b8e      	ldr	r3, [pc, #568]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800426c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004270:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004274:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800427c:	d034      	beq.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004284:	d849      	bhi.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800428c:	d00b      	beq.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004294:	d841      	bhi.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	2b00      	cmp	r3, #0
 800429a:	d016      	beq.n	80042ca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a2:	d009      	beq.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80042a4:	e039      	b.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f9fc 	bl	80036a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80042b4:	f000 bf47 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042b8:	f107 0318 	add.w	r3, r7, #24
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fb59 	bl	8003974 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80042c6:	f000 bf3e 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80042ca:	4b76      	ldr	r3, [pc, #472]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d6:	d103      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80042d8:	4b73      	ldr	r3, [pc, #460]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80042dc:	f000 bf33 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80042e4:	f000 bf2f 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80042e8:	4b6e      	ldr	r3, [pc, #440]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80042f4:	4b6b      	ldr	r3, [pc, #428]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	0e1b      	lsrs	r3, r3, #24
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	e006      	b.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8004300:	4b68      	ldr	r3, [pc, #416]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	0e1b      	lsrs	r3, r3, #24
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	4a67      	ldr	r2, [pc, #412]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004314:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004316:	f000 bf16 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800431e:	f000 bf12 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004328:	d108      	bne.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800432a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff f9ba 	bl	80036a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	637b      	str	r3, [r7, #52]	; 0x34
 8004338:	f000 bf05 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
 8004340:	f000 bf01 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004344:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004348:	1e51      	subs	r1, r2, #1
 800434a:	430b      	orrs	r3, r1
 800434c:	d136      	bne.n	80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800434e:	4b55      	ldr	r3, [pc, #340]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	2b00      	cmp	r3, #0
 800435e:	d104      	bne.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004360:	f7fe fafc 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 8004364:	6378      	str	r0, [r7, #52]	; 0x34
 8004366:	f000 beee 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	2b01      	cmp	r3, #1
 800436e:	d104      	bne.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004370:	f7fe f9be 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8004374:	6378      	str	r0, [r7, #52]	; 0x34
 8004376:	f000 bee6 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800437a:	4b4a      	ldr	r3, [pc, #296]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004386:	d106      	bne.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	2b02      	cmp	r3, #2
 800438c:	d103      	bne.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800438e:	4b48      	ldr	r3, [pc, #288]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004390:	637b      	str	r3, [r7, #52]	; 0x34
 8004392:	f000 bed8 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004396:	4b43      	ldr	r3, [pc, #268]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d107      	bne.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d104      	bne.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 80043aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
 80043b0:	f000 bec9 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
 80043b8:	f000 bec5 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80043bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043c0:	1e91      	subs	r1, r2, #2
 80043c2:	430b      	orrs	r3, r1
 80043c4:	d136      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80043c6:	4b37      	ldr	r3, [pc, #220]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80043c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d104      	bne.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80043d8:	f7fe faac 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 80043dc:	6378      	str	r0, [r7, #52]	; 0x34
 80043de:	f000 beb2 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d104      	bne.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80043e8:	f7fe f982 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80043ec:	6378      	str	r0, [r7, #52]	; 0x34
 80043ee:	f000 beaa 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80043f2:	4b2c      	ldr	r3, [pc, #176]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043fe:	d106      	bne.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	2b08      	cmp	r3, #8
 8004404:	d103      	bne.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8004406:	4b2a      	ldr	r3, [pc, #168]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
 800440a:	f000 be9c 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800440e:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b02      	cmp	r3, #2
 800441a:	d107      	bne.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	2b0c      	cmp	r3, #12
 8004420:	d104      	bne.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	637b      	str	r3, [r7, #52]	; 0x34
 8004428:	f000 be8d 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	637b      	str	r3, [r7, #52]	; 0x34
 8004430:	f000 be89 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004438:	1f11      	subs	r1, r2, #4
 800443a:	430b      	orrs	r3, r1
 800443c:	d13e      	bne.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800443e:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004444:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004448:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800444a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444c:	2b00      	cmp	r3, #0
 800444e:	d104      	bne.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004450:	f7fe fa70 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8004454:	6378      	str	r0, [r7, #52]	; 0x34
 8004456:	f000 be76 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	2b10      	cmp	r3, #16
 800445e:	d104      	bne.n	800446a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004460:	f7fe f946 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8004464:	6378      	str	r0, [r7, #52]	; 0x34
 8004466:	f000 be6e 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800446a:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004476:	d106      	bne.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	2b20      	cmp	r3, #32
 800447c:	d103      	bne.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004480:	637b      	str	r3, [r7, #52]	; 0x34
 8004482:	f000 be60 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b02      	cmp	r3, #2
 8004492:	d10f      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	2b30      	cmp	r3, #48	; 0x30
 8004498:	d10c      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800449a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449e:	637b      	str	r3, [r7, #52]	; 0x34
 80044a0:	f000 be51 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80044a4:	46020c00 	.word	0x46020c00
 80044a8:	02dc6c00 	.word	0x02dc6c00
 80044ac:	080066b8 	.word	0x080066b8
 80044b0:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
 80044b8:	f000 be45 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80044bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044c0:	f1a2 0108 	sub.w	r1, r2, #8
 80044c4:	430b      	orrs	r3, r1
 80044c6:	d136      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80044c8:	4b9f      	ldr	r3, [pc, #636]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80044ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044d2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d104      	bne.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80044da:	f7fe fa2b 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 80044de:	6378      	str	r0, [r7, #52]	; 0x34
 80044e0:	f000 be31 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	2b40      	cmp	r3, #64	; 0x40
 80044e8:	d104      	bne.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80044ea:	f7fe f901 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80044ee:	6378      	str	r0, [r7, #52]	; 0x34
 80044f0:	f000 be29 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80044f4:	4b94      	ldr	r3, [pc, #592]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004500:	d106      	bne.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2b80      	cmp	r3, #128	; 0x80
 8004506:	d103      	bne.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8004508:	4b90      	ldr	r3, [pc, #576]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800450a:	637b      	str	r3, [r7, #52]	; 0x34
 800450c:	f000 be1b 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004510:	4b8d      	ldr	r3, [pc, #564]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d107      	bne.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004520:	2bc0      	cmp	r3, #192	; 0xc0
 8004522:	d104      	bne.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8004524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004528:	637b      	str	r3, [r7, #52]	; 0x34
 800452a:	f000 be0c 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
 8004532:	f000 be08 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800453a:	f1a2 0110 	sub.w	r1, r2, #16
 800453e:	430b      	orrs	r3, r1
 8004540:	d139      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004542:	4b81      	ldr	r3, [pc, #516]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	2b00      	cmp	r3, #0
 8004552:	d104      	bne.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004554:	f7fe f9ee 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8004558:	6378      	str	r0, [r7, #52]	; 0x34
 800455a:	f000 bdf4 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004564:	d104      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004566:	f7fe f8c3 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 800456a:	6378      	str	r0, [r7, #52]	; 0x34
 800456c:	f000 bdeb 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004570:	4b75      	ldr	r3, [pc, #468]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457c:	d107      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004584:	d103      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8004586:	4b71      	ldr	r3, [pc, #452]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
 800458a:	f000 bddc 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800458e:	4b6e      	ldr	r3, [pc, #440]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b02      	cmp	r3, #2
 800459a:	d108      	bne.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a2:	d104      	bne.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 80045a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a8:	637b      	str	r3, [r7, #52]	; 0x34
 80045aa:	f000 bdcc 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	637b      	str	r3, [r7, #52]	; 0x34
 80045b2:	f000 bdc8 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80045b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ba:	f1a2 0120 	sub.w	r1, r2, #32
 80045be:	430b      	orrs	r3, r1
 80045c0:	d158      	bne.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80045c2:	4b61      	ldr	r3, [pc, #388]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d104      	bne.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80045d4:	f7fe f9d6 	bl	8002984 <HAL_RCC_GetPCLK3Freq>
 80045d8:	6378      	str	r0, [r7, #52]	; 0x34
 80045da:	f000 bdb4 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d104      	bne.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80045e4:	f7fe f884 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80045e8:	6378      	str	r0, [r7, #52]	; 0x34
 80045ea:	f000 bdac 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80045ee:	4b56      	ldr	r3, [pc, #344]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fa:	d106      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d103      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8004602:	4b52      	ldr	r3, [pc, #328]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004604:	637b      	str	r3, [r7, #52]	; 0x34
 8004606:	f000 bd9e 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800460a:	4b4f      	ldr	r3, [pc, #316]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800460c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	d107      	bne.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	2b03      	cmp	r3, #3
 800461c:	d104      	bne.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800461e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004622:	637b      	str	r3, [r7, #52]	; 0x34
 8004624:	f000 bd8f 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8004628:	4b47      	ldr	r3, [pc, #284]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b20      	cmp	r3, #32
 8004632:	d11b      	bne.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	2b04      	cmp	r3, #4
 8004638:	d118      	bne.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800463a:	4b43      	ldr	r3, [pc, #268]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8004646:	4b40      	ldr	r3, [pc, #256]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	0e1b      	lsrs	r3, r3, #24
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	e006      	b.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8004652:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004658:	041b      	lsls	r3, r3, #16
 800465a:	0e1b      	lsrs	r3, r3, #24
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	4a3b      	ldr	r2, [pc, #236]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004666:	637b      	str	r3, [r7, #52]	; 0x34
 8004668:	f000 bd6d 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
 8004670:	f000 bd69 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004678:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800467c:	430b      	orrs	r3, r1
 800467e:	d169      	bne.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004680:	4b31      	ldr	r3, [pc, #196]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004686:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800468a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004692:	d104      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004694:	f7fe f82c 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8004698:	6378      	str	r0, [r7, #52]	; 0x34
 800469a:	f000 bd54 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a4:	d108      	bne.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046a6:	f107 0318 	add.w	r3, r7, #24
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff f962 	bl	8003974 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	637b      	str	r3, [r7, #52]	; 0x34
 80046b4:	f000 bd47 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d104      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80046be:	f7fe f91f 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 80046c2:	6378      	str	r0, [r7, #52]	; 0x34
 80046c4:	f000 bd3f 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80046ce:	d118      	bne.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80046d0:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	0f1b      	lsrs	r3, r3, #28
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	e006      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046ee:	041b      	lsls	r3, r3, #16
 80046f0:	0f1b      	lsrs	r3, r3, #28
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	4a16      	ldr	r2, [pc, #88]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80046f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
 80046fe:	f000 bd22 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004702:	4b11      	ldr	r3, [pc, #68]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800470e:	d107      	bne.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004716:	d103      	bne.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800471a:	637b      	str	r3, [r7, #52]	; 0x34
 800471c:	f000 bd13 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472c:	d107      	bne.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004734:	d103      	bne.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
 800473a:	f000 bd04 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
 8004742:	f000 bd00 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8004746:	bf00      	nop
 8004748:	46020c00 	.word	0x46020c00
 800474c:	00f42400 	.word	0x00f42400
 8004750:	080066b8 	.word	0x080066b8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004758:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800475c:	430b      	orrs	r3, r1
 800475e:	d14e      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004760:	4ba8      	ldr	r3, [pc, #672]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004762:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476e:	2b04      	cmp	r3, #4
 8004770:	d841      	bhi.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	080047b1 	.word	0x080047b1
 800477c:	0800478d 	.word	0x0800478d
 8004780:	0800479f 	.word	0x0800479f
 8004784:	080047bb 	.word	0x080047bb
 8004788:	080047c5 	.word	0x080047c5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800478c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004790:	4618      	mov	r0, r3
 8004792:	f7fe ff89 	bl	80036a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800479a:	f000 bcd4 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800479e:	f107 030c 	add.w	r3, r7, #12
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fa4c 	bl	8003c40 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047ac:	f000 bccb 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80047b0:	f7fe f8a6 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 80047b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80047b6:	f000 bcc6 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80047ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047c0:	f000 bcc1 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047c4:	4b8f      	ldr	r3, [pc, #572]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 80047d0:	4b8c      	ldr	r3, [pc, #560]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	0e1b      	lsrs	r3, r3, #24
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	e006      	b.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80047dc:	4b89      	ldr	r3, [pc, #548]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80047de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	0e1b      	lsrs	r3, r3, #24
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	4a87      	ldr	r2, [pc, #540]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80047ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047f2:	f000 bca8 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047fa:	f000 bca4 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80047fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004802:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8004806:	430b      	orrs	r3, r1
 8004808:	d15d      	bne.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800480a:	4b7e      	ldr	r3, [pc, #504]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800480c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004810:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004814:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800481c:	d036      	beq.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004824:	d84b      	bhi.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800482c:	d029      	beq.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004834:	d843      	bhi.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800483c:	d013      	beq.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004844:	d83b      	bhi.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	2b00      	cmp	r3, #0
 800484a:	d015      	beq.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004852:	d134      	bne.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004858:	4618      	mov	r0, r3
 800485a:	f7fe ff25 	bl	80036a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004862:	f000 bc70 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004866:	f107 030c 	add.w	r3, r7, #12
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff f9e8 	bl	8003c40 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004874:	f000 bc67 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004878:	f7fe f842 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 800487c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800487e:	f000 bc62 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004882:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004888:	f000 bc5d 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800488c:	4b5d      	ldr	r3, [pc, #372]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004898:	4b5a      	ldr	r3, [pc, #360]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	0e1b      	lsrs	r3, r3, #24
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	e006      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80048a4:	4b57      	ldr	r3, [pc, #348]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80048a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	0e1b      	lsrs	r3, r3, #24
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	4a55      	ldr	r2, [pc, #340]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80048b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048ba:	f000 bc44 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048c2:	f000 bc40 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80048c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ca:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80048ce:	430b      	orrs	r3, r1
 80048d0:	d14a      	bne.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80048d2:	4b4c      	ldr	r3, [pc, #304]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80048d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d104      	bne.n	80048ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80048e4:	f7fe f826 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 80048e8:	6378      	str	r0, [r7, #52]	; 0x34
 80048ea:	f000 bc2c 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f4:	d104      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80048f6:	f7fd fefb 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80048fa:	6378      	str	r0, [r7, #52]	; 0x34
 80048fc:	f000 bc23 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004900:	4b40      	ldr	r3, [pc, #256]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490c:	d107      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004914:	d103      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8004916:	4b3d      	ldr	r3, [pc, #244]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
 800491a:	f000 bc14 	b.w	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800491e:	4b39      	ldr	r3, [pc, #228]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b20      	cmp	r3, #32
 8004928:	d11b      	bne.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004930:	d117      	bne.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004932:	4b34      	ldr	r3, [pc, #208]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800493e:	4b31      	ldr	r3, [pc, #196]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	0e1b      	lsrs	r3, r3, #24
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	e006      	b.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800494a:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800494c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	0e1b      	lsrs	r3, r3, #24
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	4a2b      	ldr	r2, [pc, #172]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800495a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495e:	637b      	str	r3, [r7, #52]	; 0x34
 8004960:	e3f1      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
 8004966:	e3ee      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8004968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800496c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8004970:	430b      	orrs	r3, r1
 8004972:	d14d      	bne.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004974:	4b23      	ldr	r3, [pc, #140]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800497a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800497e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	2b00      	cmp	r3, #0
 8004984:	d103      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004986:	f7fd ffd5 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 800498a:	6378      	str	r0, [r7, #52]	; 0x34
 800498c:	e3db      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004994:	d103      	bne.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004996:	f7fd feab 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 800499a:	6378      	str	r0, [r7, #52]	; 0x34
 800499c:	e3d3      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800499e:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049aa:	d106      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b2:	d102      	bne.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 80049b4:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
 80049b8:	e3c5      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80049ba:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d11b      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049cc:	d117      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 80049da:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	0e1b      	lsrs	r3, r3, #24
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	e006      	b.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80049e6:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80049e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049ec:	041b      	lsls	r3, r3, #16
 80049ee:	0e1b      	lsrs	r3, r3, #24
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80049f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fa:	637b      	str	r3, [r7, #52]	; 0x34
 80049fc:	e3a3      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	637b      	str	r3, [r7, #52]	; 0x34
 8004a02:	e3a0      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8004a04:	46020c00 	.word	0x46020c00
 8004a08:	080066b8 	.word	0x080066b8
 8004a0c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a14:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	d148      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004a1c:	4b9d      	ldr	r3, [pc, #628]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a26:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a2c:	d024      	beq.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	2bc0      	cmp	r3, #192	; 0xc0
 8004a32:	d839      	bhi.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	2b80      	cmp	r3, #128	; 0x80
 8004a38:	d00d      	beq.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	2b80      	cmp	r3, #128	; 0x80
 8004a3e:	d833      	bhi.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	2b40      	cmp	r3, #64	; 0x40
 8004a4a:	d011      	beq.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8004a4c:	e02c      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004a4e:	f7fd ff99 	bl	8002984 <HAL_RCC_GetPCLK3Freq>
 8004a52:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004a54:	e377      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a56:	4b8f      	ldr	r3, [pc, #572]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a62:	d102      	bne.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8004a64:	4b8c      	ldr	r3, [pc, #560]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004a66:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004a68:	e36d      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a6e:	e36a      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004a70:	f7fd fe3e 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8004a74:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004a76:	e366      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004a78:	4b86      	ldr	r3, [pc, #536]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8004a84:	4b83      	ldr	r3, [pc, #524]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	0f1b      	lsrs	r3, r3, #28
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	e006      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8004a90:	4b80      	ldr	r3, [pc, #512]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	0f1b      	lsrs	r3, r3, #28
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	4a7f      	ldr	r2, [pc, #508]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004aa6:	e34e      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004aac:	e34b      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab2:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8004ab6:	430b      	orrs	r3, r1
 8004ab8:	d147      	bne.n	8004b4a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004aba:	4b76      	ldr	r3, [pc, #472]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ac4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d103      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004acc:	f7fd ff32 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8004ad0:	6378      	str	r0, [r7, #52]	; 0x34
 8004ad2:	e338      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ada:	d103      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004adc:	f7fd fe08 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8004ae0:	6378      	str	r0, [r7, #52]	; 0x34
 8004ae2:	e330      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004ae4:	4b6b      	ldr	r3, [pc, #428]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af0:	d106      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af8:	d102      	bne.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8004afa:	4b67      	ldr	r3, [pc, #412]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
 8004afe:	e322      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004b00:	4b64      	ldr	r3, [pc, #400]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0320 	and.w	r3, r3, #32
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d11b      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b12:	d117      	bne.n	8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b14:	4b5f      	ldr	r3, [pc, #380]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8004b20:	4b5c      	ldr	r3, [pc, #368]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	0e1b      	lsrs	r3, r3, #24
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	e006      	b.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8004b2c:	4b59      	ldr	r3, [pc, #356]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	0e1b      	lsrs	r3, r3, #24
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	4a58      	ldr	r2, [pc, #352]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
 8004b42:	e300      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
 8004b48:	e2fd      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b4e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004b52:	430b      	orrs	r3, r1
 8004b54:	d15b      	bne.n	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004b56:	4b4f      	ldr	r3, [pc, #316]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b60:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d117      	bne.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b68:	4b4a      	ldr	r3, [pc, #296]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8004b74:	4b47      	ldr	r3, [pc, #284]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	0e1b      	lsrs	r3, r3, #24
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	e006      	b.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8004b80:	4b44      	ldr	r3, [pc, #272]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	0e1b      	lsrs	r3, r3, #24
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	4a43      	ldr	r2, [pc, #268]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
 8004b96:	e2d6      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004b98:	4b3e      	ldr	r3, [pc, #248]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba6:	d112      	bne.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	d10e      	bne.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bb0:	4b38      	ldr	r3, [pc, #224]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bbe:	d102      	bne.n	8004bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8004bc0:	23fa      	movs	r3, #250	; 0xfa
 8004bc2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bc4:	e2bf      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8004bc6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004bca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bcc:	e2bb      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004bce:	4b31      	ldr	r3, [pc, #196]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bda:	d106      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be2:	d102      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8004be4:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004be6:	637b      	str	r3, [r7, #52]	; 0x34
 8004be8:	e2ad      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004bea:	4b2a      	ldr	r3, [pc, #168]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d107      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfe:	d103      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8004c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c04:	637b      	str	r3, [r7, #52]	; 0x34
 8004c06:	e29e      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0c:	e29b      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c12:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004c16:	430b      	orrs	r3, r1
 8004c18:	d162      	bne.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c24:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d117      	bne.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c2c:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8004c38:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	0e1b      	lsrs	r3, r3, #24
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	e006      	b.n	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	0e1b      	lsrs	r3, r3, #24
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5a:	e274      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c6a:	d119      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c72:	d115      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c74:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c82:	d102      	bne.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8004c84:	23fa      	movs	r3, #250	; 0xfa
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c88:	e25d      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8004c8a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004c8e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c90:	e259      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8004c92:	bf00      	nop
 8004c94:	46020c00 	.word	0x46020c00
 8004c98:	00f42400 	.word	0x00f42400
 8004c9c:	080066b8 	.word	0x080066b8
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004ca0:	4b9d      	ldr	r3, [pc, #628]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cac:	d106      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb4:	d102      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8004cb6:	4b99      	ldr	r3, [pc, #612]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cba:	e244      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004cbc:	4b96      	ldr	r3, [pc, #600]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004cbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d107      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cd0:	d103      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8004cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	e235      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cde:	e232      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8004ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ce4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	d147      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004cec:	4b8a      	ldr	r3, [pc, #552]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cf2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004cf6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d103      	bne.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004cfe:	f7fd fe19 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8004d02:	6378      	str	r0, [r7, #52]	; 0x34
 8004d04:	e21f      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004d06:	4b84      	ldr	r3, [pc, #528]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d14:	d112      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d1c:	d10e      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d1e:	4b7e      	ldr	r3, [pc, #504]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d2c:	d102      	bne.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8004d2e:	23fa      	movs	r3, #250	; 0xfa
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d32:	e208      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8004d34:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004d38:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d3a:	e204      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004d3c:	4b76      	ldr	r3, [pc, #472]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d48:	d106      	bne.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d50:	d102      	bne.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8004d52:	4b72      	ldr	r3, [pc, #456]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34
 8004d56:	e1f6      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004d58:	4b6f      	ldr	r3, [pc, #444]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d107      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d6c:	d103      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34
 8004d74:	e1e7      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
 8004d7a:	e1e4      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8004d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d80:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8004d84:	430b      	orrs	r3, r1
 8004d86:	d12d      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004d88:	4b63      	ldr	r3, [pc, #396]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d8e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004d92:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004d94:	4b60      	ldr	r3, [pc, #384]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da0:	d105      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8004da8:	4b5c      	ldr	r3, [pc, #368]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dac:	e1cb      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fc74 	bl	80036a8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc4:	e1bf      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dcc:	d107      	bne.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dce:	f107 0318 	add.w	r3, r7, #24
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe fdce 	bl	8003974 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
 8004ddc:	e1b3      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
 8004de2:	e1b0      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8004de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004de8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8004dec:	430b      	orrs	r3, r1
 8004dee:	d14d      	bne.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004df0:	4b49      	ldr	r3, [pc, #292]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004df6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004dfa:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e02:	d028      	beq.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8004e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e0a:	d83c      	bhi.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e12:	d013      	beq.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e1a:	d834      	bhi.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d004      	beq.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e28:	d004      	beq.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004e2a:	e02c      	b.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7fd fd96 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 8004e30:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004e32:	e188      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004e34:	f7fd fc5c 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8004e38:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004e3a:	e184      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e48:	d102      	bne.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8004e4a:	4b34      	ldr	r3, [pc, #208]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004e4c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e4e:	e17a      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e54:	e177      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e56:	4b30      	ldr	r3, [pc, #192]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8004e62:	4b2d      	ldr	r3, [pc, #180]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	0e1b      	lsrs	r3, r3, #24
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	e006      	b.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8004e6e:	4b2a      	ldr	r3, [pc, #168]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e74:	041b      	lsls	r3, r3, #16
 8004e76:	0e1b      	lsrs	r3, r3, #24
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	4a28      	ldr	r2, [pc, #160]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8004e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e84:	e15f      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e8a:	e15c      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8004e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e90:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8004e94:	430b      	orrs	r3, r1
 8004e96:	d154      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004e98:	4b1f      	ldr	r3, [pc, #124]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ea2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eaa:	d028      	beq.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eb2:	d843      	bhi.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eba:	d013      	beq.n	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ec2:	d83b      	bhi.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed0:	d004      	beq.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8004ed2:	e033      	b.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8004ed4:	f7fd fd2e 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004eda:	e134      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004edc:	f7fd fc08 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8004ee0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004ee2:	e130      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef0:	d102      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ef6:	e126      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004efc:	e123      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00c      	beq.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8004f0a:	4b03      	ldr	r3, [pc, #12]	; (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	0e1b      	lsrs	r3, r3, #24
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	e00d      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8004f16:	bf00      	nop
 8004f18:	46020c00 	.word	0x46020c00
 8004f1c:	00f42400 	.word	0x00f42400
 8004f20:	080066b8 	.word	0x080066b8
 8004f24:	4b8a      	ldr	r3, [pc, #552]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f2a:	041b      	lsls	r3, r3, #16
 8004f2c:	0e1b      	lsrs	r3, r3, #24
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	4a88      	ldr	r2, [pc, #544]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8004f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f3a:	e104      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f40:	e101      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8004f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f46:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	d16e      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004f4e:	4b80      	ldr	r3, [pc, #512]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f54:	f003 0318 	and.w	r3, r3, #24
 8004f58:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	2b18      	cmp	r3, #24
 8004f5e:	d862      	bhi.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8004f60:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004fcd 	.word	0x08004fcd
 8004f6c:	08005027 	.word	0x08005027
 8004f70:	08005027 	.word	0x08005027
 8004f74:	08005027 	.word	0x08005027
 8004f78:	08005027 	.word	0x08005027
 8004f7c:	08005027 	.word	0x08005027
 8004f80:	08005027 	.word	0x08005027
 8004f84:	08005027 	.word	0x08005027
 8004f88:	08004fd5 	.word	0x08004fd5
 8004f8c:	08005027 	.word	0x08005027
 8004f90:	08005027 	.word	0x08005027
 8004f94:	08005027 	.word	0x08005027
 8004f98:	08005027 	.word	0x08005027
 8004f9c:	08005027 	.word	0x08005027
 8004fa0:	08005027 	.word	0x08005027
 8004fa4:	08005027 	.word	0x08005027
 8004fa8:	08004fdd 	.word	0x08004fdd
 8004fac:	08005027 	.word	0x08005027
 8004fb0:	08005027 	.word	0x08005027
 8004fb4:	08005027 	.word	0x08005027
 8004fb8:	08005027 	.word	0x08005027
 8004fbc:	08005027 	.word	0x08005027
 8004fc0:	08005027 	.word	0x08005027
 8004fc4:	08005027 	.word	0x08005027
 8004fc8:	08004ff7 	.word	0x08004ff7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8004fcc:	f7fd fcda 	bl	8002984 <HAL_RCC_GetPCLK3Freq>
 8004fd0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004fd2:	e0b8      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004fd4:	f7fd fb8c 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8004fd8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004fda:	e0b4      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fdc:	4b5c      	ldr	r3, [pc, #368]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe8:	d102      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8004fea:	4b5b      	ldr	r3, [pc, #364]	; (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fee:	e0aa      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ff4:	e0a7      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ff6:	4b56      	ldr	r3, [pc, #344]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8005002:	4b53      	ldr	r3, [pc, #332]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	0e1b      	lsrs	r3, r3, #24
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	e006      	b.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800500e:	4b50      	ldr	r3, [pc, #320]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	0e1b      	lsrs	r3, r3, #24
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	4a4d      	ldr	r2, [pc, #308]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800501e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005024:	e08f      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800502a:	e08c      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800502c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005030:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005034:	430b      	orrs	r3, r1
 8005036:	d14c      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005038:	4b45      	ldr	r3, [pc, #276]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800503a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800503e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005042:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800504a:	d013      	beq.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005052:	d83b      	bhi.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800505a:	d013      	beq.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005062:	d833      	bhi.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	2b00      	cmp	r3, #0
 8005068:	d014      	beq.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005070:	d014      	beq.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8005072:	e02b      	b.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005074:	f107 0318 	add.w	r3, r7, #24
 8005078:	4618      	mov	r0, r3
 800507a:	f7fe fc7b 	bl	8003974 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005082:	e060      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe fb0d 	bl	80036a8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005092:	e058      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005094:	f7fd fb2c 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8005098:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800509a:	e054      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800509c:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80050a8:	4b29      	ldr	r3, [pc, #164]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	0e1b      	lsrs	r3, r3, #24
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	e006      	b.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80050b4:	4b26      	ldr	r3, [pc, #152]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80050b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050ba:	041b      	lsls	r3, r3, #16
 80050bc:	0e1b      	lsrs	r3, r3, #24
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	4a24      	ldr	r2, [pc, #144]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80050c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050ca:	e03c      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050d0:	e039      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80050d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050d6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80050da:	430b      	orrs	r3, r1
 80050dc:	d131      	bne.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80050de:	4b1c      	ldr	r3, [pc, #112]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80050e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80050ea:	4b19      	ldr	r3, [pc, #100]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80050ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d106      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80050fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
 8005104:	e01f      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800510c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005114:	d112      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800511c:	d10e      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800511e:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800512c:	d102      	bne.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800512e:	23fa      	movs	r3, #250	; 0xfa
 8005130:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005132:	e008      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005134:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005138:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800513a:	e004      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	637b      	str	r3, [r7, #52]	; 0x34
 8005140:	e001      	b.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8005146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005148:	4618      	mov	r0, r3
 800514a:	3738      	adds	r7, #56	; 0x38
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	46020c00 	.word	0x46020c00
 8005154:	080066b8 	.word	0x080066b8
 8005158:	00f42400 	.word	0x00f42400

0800515c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005164:	4b47      	ldr	r3, [pc, #284]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a46      	ldr	r2, [pc, #280]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 800516a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800516e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005170:	f7fb fdba 	bl	8000ce8 <HAL_GetTick>
 8005174:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005176:	e008      	b.n	800518a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005178:	f7fb fdb6 	bl	8000ce8 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e077      	b.n	800527a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800518a:	4b3e      	ldr	r3, [pc, #248]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f0      	bne.n	8005178 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005196:	4b3b      	ldr	r3, [pc, #236]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800519e:	f023 0303 	bic.w	r3, r3, #3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6852      	ldr	r2, [r2, #4]
 80051aa:	3a01      	subs	r2, #1
 80051ac:	0212      	lsls	r2, r2, #8
 80051ae:	430a      	orrs	r2, r1
 80051b0:	4934      	ldr	r1, [pc, #208]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80051b6:	4b33      	ldr	r3, [pc, #204]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 80051b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051ba:	4b33      	ldr	r3, [pc, #204]	; (8005288 <RCCEx_PLL2_Config+0x12c>)
 80051bc:	4013      	ands	r3, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6892      	ldr	r2, [r2, #8]
 80051c2:	3a01      	subs	r2, #1
 80051c4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	68d2      	ldr	r2, [r2, #12]
 80051cc:	3a01      	subs	r2, #1
 80051ce:	0252      	lsls	r2, r2, #9
 80051d0:	b292      	uxth	r2, r2
 80051d2:	4311      	orrs	r1, r2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6912      	ldr	r2, [r2, #16]
 80051d8:	3a01      	subs	r2, #1
 80051da:	0412      	lsls	r2, r2, #16
 80051dc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80051e0:	4311      	orrs	r1, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6952      	ldr	r2, [r2, #20]
 80051e6:	3a01      	subs	r2, #1
 80051e8:	0612      	lsls	r2, r2, #24
 80051ea:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80051ee:	430a      	orrs	r2, r1
 80051f0:	4924      	ldr	r1, [pc, #144]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80051f6:	4b23      	ldr	r3, [pc, #140]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	f023 020c 	bic.w	r2, r3, #12
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	4920      	ldr	r1, [pc, #128]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 8005204:	4313      	orrs	r3, r2
 8005206:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005208:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 800520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	491c      	ldr	r1, [pc, #112]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 8005212:	4313      	orrs	r3, r2
 8005214:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005216:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	4a1a      	ldr	r2, [pc, #104]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 800521c:	f023 0310 	bic.w	r3, r3, #16
 8005220:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	69d2      	ldr	r2, [r2, #28]
 8005232:	00d2      	lsls	r2, r2, #3
 8005234:	4913      	ldr	r1, [pc, #76]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 8005236:	4313      	orrs	r3, r2
 8005238:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800523a:	4b12      	ldr	r3, [pc, #72]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	4a11      	ldr	r2, [pc, #68]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 8005240:	f043 0310 	orr.w	r3, r3, #16
 8005244:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005246:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a0e      	ldr	r2, [pc, #56]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 800524c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005250:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005252:	f7fb fd49 	bl	8000ce8 <HAL_GetTick>
 8005256:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005258:	e008      	b.n	800526c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800525a:	f7fb fd45 	bl	8000ce8 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e006      	b.n	800527a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <RCCEx_PLL2_Config+0x128>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0

}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	46020c00 	.word	0x46020c00
 8005288:	80800000 	.word	0x80800000

0800528c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005294:	4b47      	ldr	r3, [pc, #284]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a46      	ldr	r2, [pc, #280]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 800529a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800529e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052a0:	f7fb fd22 	bl	8000ce8 <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052a6:	e008      	b.n	80052ba <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052a8:	f7fb fd1e 	bl	8000ce8 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e077      	b.n	80053aa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052ba:	4b3e      	ldr	r3, [pc, #248]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f0      	bne.n	80052a8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80052c6:	4b3b      	ldr	r3, [pc, #236]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052ce:	f023 0303 	bic.w	r3, r3, #3
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6811      	ldr	r1, [r2, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6852      	ldr	r2, [r2, #4]
 80052da:	3a01      	subs	r2, #1
 80052dc:	0212      	lsls	r2, r2, #8
 80052de:	430a      	orrs	r2, r1
 80052e0:	4934      	ldr	r1, [pc, #208]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	630b      	str	r3, [r1, #48]	; 0x30
 80052e6:	4b33      	ldr	r3, [pc, #204]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 80052e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ea:	4b33      	ldr	r3, [pc, #204]	; (80053b8 <RCCEx_PLL3_Config+0x12c>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6892      	ldr	r2, [r2, #8]
 80052f2:	3a01      	subs	r2, #1
 80052f4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	68d2      	ldr	r2, [r2, #12]
 80052fc:	3a01      	subs	r2, #1
 80052fe:	0252      	lsls	r2, r2, #9
 8005300:	b292      	uxth	r2, r2
 8005302:	4311      	orrs	r1, r2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6912      	ldr	r2, [r2, #16]
 8005308:	3a01      	subs	r2, #1
 800530a:	0412      	lsls	r2, r2, #16
 800530c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005310:	4311      	orrs	r1, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6952      	ldr	r2, [r2, #20]
 8005316:	3a01      	subs	r2, #1
 8005318:	0612      	lsls	r2, r2, #24
 800531a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800531e:	430a      	orrs	r2, r1
 8005320:	4924      	ldr	r1, [pc, #144]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 8005322:	4313      	orrs	r3, r2
 8005324:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005326:	4b23      	ldr	r3, [pc, #140]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	f023 020c 	bic.w	r2, r3, #12
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	4920      	ldr	r1, [pc, #128]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 8005334:	4313      	orrs	r3, r2
 8005336:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005338:	4b1e      	ldr	r3, [pc, #120]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 800533a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	491c      	ldr	r1, [pc, #112]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 8005342:	4313      	orrs	r3, r2
 8005344:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005346:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	4a1a      	ldr	r2, [pc, #104]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 800534c:	f023 0310 	bic.w	r3, r3, #16
 8005350:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005352:	4b18      	ldr	r3, [pc, #96]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 8005354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	69d2      	ldr	r2, [r2, #28]
 8005362:	00d2      	lsls	r2, r2, #3
 8005364:	4913      	ldr	r1, [pc, #76]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 8005366:	4313      	orrs	r3, r2
 8005368:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800536a:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	4a11      	ldr	r2, [pc, #68]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 8005370:	f043 0310 	orr.w	r3, r3, #16
 8005374:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005376:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a0e      	ldr	r2, [pc, #56]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 800537c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005380:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005382:	f7fb fcb1 	bl	8000ce8 <HAL_GetTick>
 8005386:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005388:	e008      	b.n	800539c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800538a:	f7fb fcad 	bl	8000ce8 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e006      	b.n	80053aa <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800539c:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <RCCEx_PLL3_Config+0x128>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f0      	beq.n	800538a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	46020c00 	.word	0x46020c00
 80053b8:	80800000 	.word	0x80800000

080053bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e049      	b.n	8005462 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f841 	bl	800546a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4619      	mov	r1, r3
 80053fa:	4610      	mov	r0, r2
 80053fc:	f000 fa88 	bl	8005910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	d001      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e072      	b.n	800557e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a35      	ldr	r2, [pc, #212]	; (800558c <HAL_TIM_Base_Start_IT+0x10c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d040      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a34      	ldr	r2, [pc, #208]	; (8005590 <HAL_TIM_Base_Start_IT+0x110>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d03b      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054cc:	d036      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054d6:	d031      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2d      	ldr	r2, [pc, #180]	; (8005594 <HAL_TIM_Base_Start_IT+0x114>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d02c      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a2c      	ldr	r2, [pc, #176]	; (8005598 <HAL_TIM_Base_Start_IT+0x118>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d027      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2a      	ldr	r2, [pc, #168]	; (800559c <HAL_TIM_Base_Start_IT+0x11c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d022      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a29      	ldr	r2, [pc, #164]	; (80055a0 <HAL_TIM_Base_Start_IT+0x120>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d01d      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <HAL_TIM_Base_Start_IT+0x124>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <HAL_TIM_Base_Start_IT+0x128>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a24      	ldr	r2, [pc, #144]	; (80055ac <HAL_TIM_Base_Start_IT+0x12c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00e      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a23      	ldr	r2, [pc, #140]	; (80055b0 <HAL_TIM_Base_Start_IT+0x130>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a21      	ldr	r2, [pc, #132]	; (80055b4 <HAL_TIM_Base_Start_IT+0x134>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_TIM_Base_Start_IT+0xbc>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a20      	ldr	r2, [pc, #128]	; (80055b8 <HAL_TIM_Base_Start_IT+0x138>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d115      	bne.n	8005568 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	4b1e      	ldr	r3, [pc, #120]	; (80055bc <HAL_TIM_Base_Start_IT+0x13c>)
 8005544:	4013      	ands	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b06      	cmp	r3, #6
 800554c:	d015      	beq.n	800557a <HAL_TIM_Base_Start_IT+0xfa>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005554:	d011      	beq.n	800557a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005566:	e008      	b.n	800557a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e000      	b.n	800557c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40012c00 	.word	0x40012c00
 8005590:	50012c00 	.word	0x50012c00
 8005594:	40000400 	.word	0x40000400
 8005598:	50000400 	.word	0x50000400
 800559c:	40000800 	.word	0x40000800
 80055a0:	50000800 	.word	0x50000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	50000c00 	.word	0x50000c00
 80055ac:	40013400 	.word	0x40013400
 80055b0:	50013400 	.word	0x50013400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	50014000 	.word	0x50014000
 80055bc:	00010007 	.word	0x00010007

080055c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d122      	bne.n	800561c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0202 	mvn.w	r2, #2
 80055ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f965 	bl	80058d2 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f957 	bl	80058be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f968 	bl	80058e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b04      	cmp	r3, #4
 8005628:	d122      	bne.n	8005670 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b04      	cmp	r3, #4
 8005636:	d11b      	bne.n	8005670 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0204 	mvn.w	r2, #4
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2202      	movs	r2, #2
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f93b 	bl	80058d2 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f92d 	bl	80058be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f93e 	bl	80058e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b08      	cmp	r3, #8
 800567c:	d122      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b08      	cmp	r3, #8
 800568a:	d11b      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0208 	mvn.w	r2, #8
 8005694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2204      	movs	r2, #4
 800569a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f911 	bl	80058d2 <HAL_TIM_IC_CaptureCallback>
 80056b0:	e005      	b.n	80056be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f903 	bl	80058be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f914 	bl	80058e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0310 	and.w	r3, r3, #16
 80056ce:	2b10      	cmp	r3, #16
 80056d0:	d122      	bne.n	8005718 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d11b      	bne.n	8005718 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0210 	mvn.w	r2, #16
 80056e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2208      	movs	r2, #8
 80056ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f8e7 	bl	80058d2 <HAL_TIM_IC_CaptureCallback>
 8005704:	e005      	b.n	8005712 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f8d9 	bl	80058be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f8ea 	bl	80058e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b01      	cmp	r3, #1
 8005724:	d10e      	bne.n	8005744 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b01      	cmp	r3, #1
 8005732:	d107      	bne.n	8005744 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0201 	mvn.w	r2, #1
 800573c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fb f8ec 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574e:	2b80      	cmp	r3, #128	; 0x80
 8005750:	d10e      	bne.n	8005770 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575c:	2b80      	cmp	r3, #128	; 0x80
 800575e:	d107      	bne.n	8005770 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f9d4 	bl	8005b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577e:	d10e      	bne.n	800579e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578a:	2b80      	cmp	r3, #128	; 0x80
 800578c:	d107      	bne.n	800579e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f9c7 	bl	8005b2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d10e      	bne.n	80057ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b40      	cmp	r3, #64	; 0x40
 80057b8:	d107      	bne.n	80057ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f898 	bl	80058fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d10e      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d107      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f06f 0220 	mvn.w	r2, #32
 80057ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f987 	bl	8005b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005804:	d10f      	bne.n	8005826 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005814:	d107      	bne.n	8005826 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800581e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f98d 	bl	8005b40 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005834:	d10f      	bne.n	8005856 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005844:	d107      	bne.n	8005856 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800584e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f97f 	bl	8005b54 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005864:	d10f      	bne.n	8005886 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005874:	d107      	bne.n	8005886 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800587e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f971 	bl	8005b68 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005890:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005894:	d10f      	bne.n	80058b6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058a4:	d107      	bne.n	80058b6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80058ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f963 	bl	8005b7c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a68      	ldr	r2, [pc, #416]	; (8005ac4 <TIM_Base_SetConfig+0x1b4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d02b      	beq.n	8005980 <TIM_Base_SetConfig+0x70>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a67      	ldr	r2, [pc, #412]	; (8005ac8 <TIM_Base_SetConfig+0x1b8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d027      	beq.n	8005980 <TIM_Base_SetConfig+0x70>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005936:	d023      	beq.n	8005980 <TIM_Base_SetConfig+0x70>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800593e:	d01f      	beq.n	8005980 <TIM_Base_SetConfig+0x70>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a62      	ldr	r2, [pc, #392]	; (8005acc <TIM_Base_SetConfig+0x1bc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d01b      	beq.n	8005980 <TIM_Base_SetConfig+0x70>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a61      	ldr	r2, [pc, #388]	; (8005ad0 <TIM_Base_SetConfig+0x1c0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d017      	beq.n	8005980 <TIM_Base_SetConfig+0x70>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a60      	ldr	r2, [pc, #384]	; (8005ad4 <TIM_Base_SetConfig+0x1c4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d013      	beq.n	8005980 <TIM_Base_SetConfig+0x70>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a5f      	ldr	r2, [pc, #380]	; (8005ad8 <TIM_Base_SetConfig+0x1c8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00f      	beq.n	8005980 <TIM_Base_SetConfig+0x70>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a5e      	ldr	r2, [pc, #376]	; (8005adc <TIM_Base_SetConfig+0x1cc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00b      	beq.n	8005980 <TIM_Base_SetConfig+0x70>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a5d      	ldr	r2, [pc, #372]	; (8005ae0 <TIM_Base_SetConfig+0x1d0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d007      	beq.n	8005980 <TIM_Base_SetConfig+0x70>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a5c      	ldr	r2, [pc, #368]	; (8005ae4 <TIM_Base_SetConfig+0x1d4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <TIM_Base_SetConfig+0x70>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a5b      	ldr	r2, [pc, #364]	; (8005ae8 <TIM_Base_SetConfig+0x1d8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d108      	bne.n	8005992 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a4b      	ldr	r2, [pc, #300]	; (8005ac4 <TIM_Base_SetConfig+0x1b4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d043      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a4a      	ldr	r2, [pc, #296]	; (8005ac8 <TIM_Base_SetConfig+0x1b8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d03f      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a8:	d03b      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059b0:	d037      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a45      	ldr	r2, [pc, #276]	; (8005acc <TIM_Base_SetConfig+0x1bc>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d033      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a44      	ldr	r2, [pc, #272]	; (8005ad0 <TIM_Base_SetConfig+0x1c0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d02f      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a43      	ldr	r2, [pc, #268]	; (8005ad4 <TIM_Base_SetConfig+0x1c4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d02b      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a42      	ldr	r2, [pc, #264]	; (8005ad8 <TIM_Base_SetConfig+0x1c8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d027      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a41      	ldr	r2, [pc, #260]	; (8005adc <TIM_Base_SetConfig+0x1cc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d023      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a40      	ldr	r2, [pc, #256]	; (8005ae0 <TIM_Base_SetConfig+0x1d0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01f      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a3f      	ldr	r2, [pc, #252]	; (8005ae4 <TIM_Base_SetConfig+0x1d4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01b      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a3e      	ldr	r2, [pc, #248]	; (8005ae8 <TIM_Base_SetConfig+0x1d8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d017      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a3d      	ldr	r2, [pc, #244]	; (8005aec <TIM_Base_SetConfig+0x1dc>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a3c      	ldr	r2, [pc, #240]	; (8005af0 <TIM_Base_SetConfig+0x1e0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00f      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a3b      	ldr	r2, [pc, #236]	; (8005af4 <TIM_Base_SetConfig+0x1e4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a3a      	ldr	r2, [pc, #232]	; (8005af8 <TIM_Base_SetConfig+0x1e8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a39      	ldr	r2, [pc, #228]	; (8005afc <TIM_Base_SetConfig+0x1ec>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_Base_SetConfig+0x112>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a38      	ldr	r2, [pc, #224]	; (8005b00 <TIM_Base_SetConfig+0x1f0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d108      	bne.n	8005a34 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a1a      	ldr	r2, [pc, #104]	; (8005ac4 <TIM_Base_SetConfig+0x1b4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d023      	beq.n	8005aa8 <TIM_Base_SetConfig+0x198>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a19      	ldr	r2, [pc, #100]	; (8005ac8 <TIM_Base_SetConfig+0x1b8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d01f      	beq.n	8005aa8 <TIM_Base_SetConfig+0x198>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <TIM_Base_SetConfig+0x1d4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d01b      	beq.n	8005aa8 <TIM_Base_SetConfig+0x198>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a1d      	ldr	r2, [pc, #116]	; (8005ae8 <TIM_Base_SetConfig+0x1d8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d017      	beq.n	8005aa8 <TIM_Base_SetConfig+0x198>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <TIM_Base_SetConfig+0x1dc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d013      	beq.n	8005aa8 <TIM_Base_SetConfig+0x198>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <TIM_Base_SetConfig+0x1e0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00f      	beq.n	8005aa8 <TIM_Base_SetConfig+0x198>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a1a      	ldr	r2, [pc, #104]	; (8005af4 <TIM_Base_SetConfig+0x1e4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <TIM_Base_SetConfig+0x198>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a19      	ldr	r2, [pc, #100]	; (8005af8 <TIM_Base_SetConfig+0x1e8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d007      	beq.n	8005aa8 <TIM_Base_SetConfig+0x198>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a18      	ldr	r2, [pc, #96]	; (8005afc <TIM_Base_SetConfig+0x1ec>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_Base_SetConfig+0x198>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a17      	ldr	r2, [pc, #92]	; (8005b00 <TIM_Base_SetConfig+0x1f0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d103      	bne.n	8005ab0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	615a      	str	r2, [r3, #20]
}
 8005ab6:	bf00      	nop
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40012c00 	.word	0x40012c00
 8005ac8:	50012c00 	.word	0x50012c00
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	50000400 	.word	0x50000400
 8005ad4:	40000800 	.word	0x40000800
 8005ad8:	50000800 	.word	0x50000800
 8005adc:	40000c00 	.word	0x40000c00
 8005ae0:	50000c00 	.word	0x50000c00
 8005ae4:	40013400 	.word	0x40013400
 8005ae8:	50013400 	.word	0x50013400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	50014000 	.word	0x50014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	50014400 	.word	0x50014400
 8005afc:	40014800 	.word	0x40014800
 8005b00:	50014800 	.word	0x50014800

08005b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e042      	b.n	8005c28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d106      	bne.n	8005bba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7fa fee5 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2224      	movs	r2, #36	; 0x24
 8005bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0201 	bic.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f8d2 	bl	8005d7c <UART_SetConfig>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e022      	b.n	8005c28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa68 	bl	80060c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0201 	orr.w	r2, r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 faef 	bl	8006204 <UART_CheckIdleState>
 8005c26:	4603      	mov	r3, r0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	; 0x28
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	f040 8092 	bne.w	8005d70 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_UART_Transmit+0x28>
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e08a      	b.n	8005d72 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <HAL_UART_Transmit+0x3a>
 8005c66:	2302      	movs	r3, #2
 8005c68:	e083      	b.n	8005d72 <HAL_UART_Transmit+0x142>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7c:	2b80      	cmp	r3, #128	; 0x80
 8005c7e:	d107      	bne.n	8005c90 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c8e:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2221      	movs	r2, #33	; 0x21
 8005c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ca0:	f7fb f822 	bl	8000ce8 <HAL_GetTick>
 8005ca4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	88fa      	ldrh	r2, [r7, #6]
 8005caa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	88fa      	ldrh	r2, [r7, #6]
 8005cb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cbe:	d108      	bne.n	8005cd2 <HAL_UART_Transmit+0xa2>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d104      	bne.n	8005cd2 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	61bb      	str	r3, [r7, #24]
 8005cd0:	e003      	b.n	8005cda <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005ce2:	e02c      	b.n	8005d3e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2200      	movs	r2, #0
 8005cec:	2180      	movs	r1, #128	; 0x80
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fad3 	bl	800629a <UART_WaitOnFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e039      	b.n	8005d72 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	3302      	adds	r3, #2
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	e007      	b.n	8005d2c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	781a      	ldrb	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1cc      	bne.n	8005ce4 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2200      	movs	r2, #0
 8005d52:	2140      	movs	r1, #64	; 0x40
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 faa0 	bl	800629a <UART_WaitOnFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e006      	b.n	8005d72 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e000      	b.n	8005d72 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005d70:	2302      	movs	r3, #2
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3720      	adds	r7, #32
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d80:	b094      	sub	sp, #80	; 0x50
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4b7e      	ldr	r3, [pc, #504]	; (8005f8c <UART_SetConfig+0x210>)
 8005d92:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4977      	ldr	r1, [pc, #476]	; (8005f90 <UART_SetConfig+0x214>)
 8005db4:	4019      	ands	r1, r3
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dcc:	68d9      	ldr	r1, [r3, #12]
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	ea40 0301 	orr.w	r3, r0, r1
 8005dd6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4b6a      	ldr	r3, [pc, #424]	; (8005f8c <UART_SetConfig+0x210>)
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d009      	beq.n	8005dfc <UART_SetConfig+0x80>
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4b69      	ldr	r3, [pc, #420]	; (8005f94 <UART_SetConfig+0x218>)
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d004      	beq.n	8005dfc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	6a1a      	ldr	r2, [r3, #32]
 8005df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8005e06:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e10:	430b      	orrs	r3, r1
 8005e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	f023 000f 	bic.w	r0, r3, #15
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	ea40 0301 	orr.w	r3, r0, r1
 8005e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	4b59      	ldr	r3, [pc, #356]	; (8005f98 <UART_SetConfig+0x21c>)
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d102      	bne.n	8005e3c <UART_SetConfig+0xc0>
 8005e36:	2301      	movs	r3, #1
 8005e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e3a:	e029      	b.n	8005e90 <UART_SetConfig+0x114>
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	4b56      	ldr	r3, [pc, #344]	; (8005f9c <UART_SetConfig+0x220>)
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d102      	bne.n	8005e4c <UART_SetConfig+0xd0>
 8005e46:	2302      	movs	r3, #2
 8005e48:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e4a:	e021      	b.n	8005e90 <UART_SetConfig+0x114>
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4b53      	ldr	r3, [pc, #332]	; (8005fa0 <UART_SetConfig+0x224>)
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d102      	bne.n	8005e5c <UART_SetConfig+0xe0>
 8005e56:	2304      	movs	r3, #4
 8005e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e5a:	e019      	b.n	8005e90 <UART_SetConfig+0x114>
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	4b50      	ldr	r3, [pc, #320]	; (8005fa4 <UART_SetConfig+0x228>)
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d102      	bne.n	8005e6c <UART_SetConfig+0xf0>
 8005e66:	2308      	movs	r3, #8
 8005e68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e6a:	e011      	b.n	8005e90 <UART_SetConfig+0x114>
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	4b4d      	ldr	r3, [pc, #308]	; (8005fa8 <UART_SetConfig+0x22c>)
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d102      	bne.n	8005e7c <UART_SetConfig+0x100>
 8005e76:	2310      	movs	r3, #16
 8005e78:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e7a:	e009      	b.n	8005e90 <UART_SetConfig+0x114>
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b42      	ldr	r3, [pc, #264]	; (8005f8c <UART_SetConfig+0x210>)
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d102      	bne.n	8005e8c <UART_SetConfig+0x110>
 8005e86:	2320      	movs	r3, #32
 8005e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e8a:	e001      	b.n	8005e90 <UART_SetConfig+0x114>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	4b3d      	ldr	r3, [pc, #244]	; (8005f8c <UART_SetConfig+0x210>)
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d005      	beq.n	8005ea6 <UART_SetConfig+0x12a>
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	4b3d      	ldr	r3, [pc, #244]	; (8005f94 <UART_SetConfig+0x218>)
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	f040 8085 	bne.w	8005fb0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	627a      	str	r2, [r7, #36]	; 0x24
 8005eae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005eb2:	f7fe f82b 	bl	8003f0c <HAL_RCCEx_GetPeriphCLKFreq>
 8005eb6:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 80e8 	beq.w	8006090 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	4a39      	ldr	r2, [pc, #228]	; (8005fac <UART_SetConfig+0x230>)
 8005ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	4413      	add	r3, r2
 8005ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d305      	bcc.n	8005ef0 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d903      	bls.n	8005ef8 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005ef6:	e048      	b.n	8005f8a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efa:	2200      	movs	r2, #0
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	61fa      	str	r2, [r7, #28]
 8005f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	4a29      	ldr	r2, [pc, #164]	; (8005fac <UART_SetConfig+0x230>)
 8005f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	617a      	str	r2, [r7, #20]
 8005f12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005f1a:	f7fa f9ab 	bl	8000274 <__aeabi_uldivmod>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	020b      	lsls	r3, r1, #8
 8005f30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f34:	0202      	lsls	r2, r0, #8
 8005f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f38:	6849      	ldr	r1, [r1, #4]
 8005f3a:	0849      	lsrs	r1, r1, #1
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	460c      	mov	r4, r1
 8005f40:	4605      	mov	r5, r0
 8005f42:	eb12 0804 	adds.w	r8, r2, r4
 8005f46:	eb43 0905 	adc.w	r9, r3, r5
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	60bb      	str	r3, [r7, #8]
 8005f52:	60fa      	str	r2, [r7, #12]
 8005f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f58:	4640      	mov	r0, r8
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	f7fa f98a 	bl	8000274 <__aeabi_uldivmod>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4613      	mov	r3, r2
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f6e:	d308      	bcc.n	8005f82 <UART_SetConfig+0x206>
 8005f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f76:	d204      	bcs.n	8005f82 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f7e:	60da      	str	r2, [r3, #12]
 8005f80:	e003      	b.n	8005f8a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8005f88:	e082      	b.n	8006090 <UART_SetConfig+0x314>
 8005f8a:	e081      	b.n	8006090 <UART_SetConfig+0x314>
 8005f8c:	46002400 	.word	0x46002400
 8005f90:	cfff69f3 	.word	0xcfff69f3
 8005f94:	56002400 	.word	0x56002400
 8005f98:	40013800 	.word	0x40013800
 8005f9c:	40004400 	.word	0x40004400
 8005fa0:	40004800 	.word	0x40004800
 8005fa4:	40004c00 	.word	0x40004c00
 8005fa8:	40005000 	.word	0x40005000
 8005fac:	08006778 	.word	0x08006778
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb8:	d13c      	bne.n	8006034 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fc6:	f7fd ffa1 	bl	8003f0c <HAL_RCCEx_GetPeriphCLKFreq>
 8005fca:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d05e      	beq.n	8006090 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	4a39      	ldr	r2, [pc, #228]	; (80060bc <UART_SetConfig+0x340>)
 8005fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fe4:	005a      	lsls	r2, r3, #1
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	085b      	lsrs	r3, r3, #1
 8005fec:	441a      	add	r2, r3
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ffa:	2b0f      	cmp	r3, #15
 8005ffc:	d916      	bls.n	800602c <UART_SetConfig+0x2b0>
 8005ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006004:	d212      	bcs.n	800602c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006008:	b29b      	uxth	r3, r3
 800600a:	f023 030f 	bic.w	r3, r3, #15
 800600e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	b29b      	uxth	r3, r3
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	b29a      	uxth	r2, r3
 800601c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800601e:	4313      	orrs	r3, r2
 8006020:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8006028:	60da      	str	r2, [r3, #12]
 800602a:	e031      	b.n	8006090 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006032:	e02d      	b.n	8006090 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006036:	2200      	movs	r2, #0
 8006038:	469a      	mov	sl, r3
 800603a:	4693      	mov	fp, r2
 800603c:	4650      	mov	r0, sl
 800603e:	4659      	mov	r1, fp
 8006040:	f7fd ff64 	bl	8003f0c <HAL_RCCEx_GetPeriphCLKFreq>
 8006044:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8006046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d021      	beq.n	8006090 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	4a1a      	ldr	r2, [pc, #104]	; (80060bc <UART_SetConfig+0x340>)
 8006052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006056:	461a      	mov	r2, r3
 8006058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605a:	fbb3 f2f2 	udiv	r2, r3, r2
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	085b      	lsrs	r3, r3, #1
 8006064:	441a      	add	r2, r3
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	fbb2 f3f3 	udiv	r3, r2, r3
 800606e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006072:	2b0f      	cmp	r3, #15
 8006074:	d909      	bls.n	800608a <UART_SetConfig+0x30e>
 8006076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800607c:	d205      	bcs.n	800608a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800607e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006080:	b29a      	uxth	r2, r3
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	60da      	str	r2, [r3, #12]
 8006088:	e002      	b.n	8006090 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	2201      	movs	r2, #1
 8006094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2201      	movs	r2, #1
 800609c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	2200      	movs	r2, #0
 80060a4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	2200      	movs	r2, #0
 80060aa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80060ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3750      	adds	r7, #80	; 0x50
 80060b4:	46bd      	mov	sp, r7
 80060b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060ba:	bf00      	nop
 80060bc:	08006778 	.word	0x08006778

080060c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01a      	beq.n	80061d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061be:	d10a      	bne.n	80061d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	605a      	str	r2, [r3, #4]
  }
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af02      	add	r7, sp, #8
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006214:	f7fa fd68 	bl	8000ce8 <HAL_GetTick>
 8006218:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b08      	cmp	r3, #8
 8006226:	d10e      	bne.n	8006246 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f82f 	bl	800629a <UART_WaitOnFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e025      	b.n	8006292 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b04      	cmp	r3, #4
 8006252:	d10e      	bne.n	8006272 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006254:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f819 	bl	800629a <UART_WaitOnFlagUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e00f      	b.n	8006292 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b09c      	sub	sp, #112	; 0x70
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	603b      	str	r3, [r7, #0]
 80062a6:	4613      	mov	r3, r2
 80062a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062aa:	e0a9      	b.n	8006400 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	f000 80a5 	beq.w	8006400 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b6:	f7fa fd17 	bl	8000ce8 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d302      	bcc.n	80062cc <UART_WaitOnFlagUntilTimeout+0x32>
 80062c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d140      	bne.n	800634e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062e0:	667b      	str	r3, [r7, #100]	; 0x64
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e6      	bne.n	80062cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3308      	adds	r3, #8
 8006304:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006310:	f023 0301 	bic.w	r3, r3, #1
 8006314:	663b      	str	r3, [r7, #96]	; 0x60
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3308      	adds	r3, #8
 800631c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800631e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006320:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800632c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1e5      	bne.n	80062fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2220      	movs	r2, #32
 8006336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2220      	movs	r2, #32
 800633e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e069      	b.n	8006422 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d051      	beq.n	8006400 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636a:	d149      	bne.n	8006400 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006374:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800638a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006394:	637b      	str	r3, [r7, #52]	; 0x34
 8006396:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800639a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e6      	bne.n	8006376 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	613b      	str	r3, [r7, #16]
   return(result);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f023 0301 	bic.w	r3, r3, #1
 80063be:	66bb      	str	r3, [r7, #104]	; 0x68
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3308      	adds	r3, #8
 80063c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063c8:	623a      	str	r2, [r7, #32]
 80063ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	69f9      	ldr	r1, [r7, #28]
 80063ce:	6a3a      	ldr	r2, [r7, #32]
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e5      	bne.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2220      	movs	r2, #32
 80063e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2220      	movs	r2, #32
 80063f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e010      	b.n	8006422 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69da      	ldr	r2, [r3, #28]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	4013      	ands	r3, r2
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	429a      	cmp	r2, r3
 800640e:	bf0c      	ite	eq
 8006410:	2301      	moveq	r3, #1
 8006412:	2300      	movne	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	79fb      	ldrb	r3, [r7, #7]
 800641a:	429a      	cmp	r2, r3
 800641c:	f43f af46 	beq.w	80062ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3770      	adds	r7, #112	; 0x70
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_UARTEx_DisableFifoMode+0x16>
 800643c:	2302      	movs	r3, #2
 800643e:	e027      	b.n	8006490 <HAL_UARTEx_DisableFifoMode+0x66>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2224      	movs	r2, #36	; 0x24
 800644c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800646e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2220      	movs	r2, #32
 8006482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e02d      	b.n	8006510 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2224      	movs	r2, #36	; 0x24
 80064c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f84f 	bl	8006594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800652c:	2302      	movs	r3, #2
 800652e:	e02d      	b.n	800658c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2224      	movs	r2, #36	; 0x24
 800653c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0201 	bic.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f811 	bl	8006594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d108      	bne.n	80065b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065b4:	e031      	b.n	800661a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065b6:	2308      	movs	r3, #8
 80065b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065ba:	2308      	movs	r3, #8
 80065bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	0e5b      	lsrs	r3, r3, #25
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	0f5b      	lsrs	r3, r3, #29
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065de:	7bbb      	ldrb	r3, [r7, #14]
 80065e0:	7b3a      	ldrb	r2, [r7, #12]
 80065e2:	4911      	ldr	r1, [pc, #68]	; (8006628 <UARTEx_SetNbDataToProcess+0x94>)
 80065e4:	5c8a      	ldrb	r2, [r1, r2]
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065ea:	7b3a      	ldrb	r2, [r7, #12]
 80065ec:	490f      	ldr	r1, [pc, #60]	; (800662c <UARTEx_SetNbDataToProcess+0x98>)
 80065ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	7b7a      	ldrb	r2, [r7, #13]
 8006600:	4909      	ldr	r1, [pc, #36]	; (8006628 <UARTEx_SetNbDataToProcess+0x94>)
 8006602:	5c8a      	ldrb	r2, [r1, r2]
 8006604:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006608:	7b7a      	ldrb	r2, [r7, #13]
 800660a:	4908      	ldr	r1, [pc, #32]	; (800662c <UARTEx_SetNbDataToProcess+0x98>)
 800660c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800660e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006612:	b29a      	uxth	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800661a:	bf00      	nop
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	08006790 	.word	0x08006790
 800662c:	08006798 	.word	0x08006798

08006630 <__libc_init_array>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	4d0d      	ldr	r5, [pc, #52]	; (8006668 <__libc_init_array+0x38>)
 8006634:	2600      	movs	r6, #0
 8006636:	4c0d      	ldr	r4, [pc, #52]	; (800666c <__libc_init_array+0x3c>)
 8006638:	1b64      	subs	r4, r4, r5
 800663a:	10a4      	asrs	r4, r4, #2
 800663c:	42a6      	cmp	r6, r4
 800663e:	d109      	bne.n	8006654 <__libc_init_array+0x24>
 8006640:	4d0b      	ldr	r5, [pc, #44]	; (8006670 <__libc_init_array+0x40>)
 8006642:	2600      	movs	r6, #0
 8006644:	4c0b      	ldr	r4, [pc, #44]	; (8006674 <__libc_init_array+0x44>)
 8006646:	f000 f81f 	bl	8006688 <_init>
 800664a:	1b64      	subs	r4, r4, r5
 800664c:	10a4      	asrs	r4, r4, #2
 800664e:	42a6      	cmp	r6, r4
 8006650:	d105      	bne.n	800665e <__libc_init_array+0x2e>
 8006652:	bd70      	pop	{r4, r5, r6, pc}
 8006654:	f855 3b04 	ldr.w	r3, [r5], #4
 8006658:	3601      	adds	r6, #1
 800665a:	4798      	blx	r3
 800665c:	e7ee      	b.n	800663c <__libc_init_array+0xc>
 800665e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006662:	3601      	adds	r6, #1
 8006664:	4798      	blx	r3
 8006666:	e7f2      	b.n	800664e <__libc_init_array+0x1e>
 8006668:	080067a8 	.word	0x080067a8
 800666c:	080067a8 	.word	0x080067a8
 8006670:	080067a8 	.word	0x080067a8
 8006674:	080067ac 	.word	0x080067ac

08006678 <memset>:
 8006678:	4402      	add	r2, r0
 800667a:	4603      	mov	r3, r0
 800667c:	4293      	cmp	r3, r2
 800667e:	d100      	bne.n	8006682 <memset+0xa>
 8006680:	4770      	bx	lr
 8006682:	f803 1b01 	strb.w	r1, [r3], #1
 8006686:	e7f9      	b.n	800667c <memset+0x4>

08006688 <_init>:
 8006688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668a:	bf00      	nop
 800668c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668e:	bc08      	pop	{r3}
 8006690:	469e      	mov	lr, r3
 8006692:	4770      	bx	lr

08006694 <_fini>:
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006696:	bf00      	nop
 8006698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669a:	bc08      	pop	{r3}
 800669c:	469e      	mov	lr, r3
 800669e:	4770      	bx	lr
