
blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006470  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080066a4  080066a4  000166a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080067a4  080067a4  000167a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080067b0  080067b0  000167b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000019  20000000  080067b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000fc  2000001c  080067cd  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000118  080067cd  00020118  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020019  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001718a  00000000  00000000  0002004f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b0b  00000000  00000000  000371d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001260  00000000  00000000  00039ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001138  00000000  00000000  0003af48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003294e  00000000  00000000  0003c080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000180d2  00000000  00000000  0006e9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014033f  00000000  00000000  00086aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c6ddf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004cd8  00000000  00000000  001c6e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000001c 	.word	0x2000001c
 8000250:	00000000 	.word	0x00000000
 8000254:	0800668c 	.word	0x0800668c

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000020 	.word	0x20000020
 8000270:	0800668c 	.word	0x0800668c

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ICACHE_Init>:
 *      Author: nayye
 */

#include "main.h"
void MX_ICACHE_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fec1 	bl	8001320 <HAL_ICACHE_ConfigAssociativityMode>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80005a4:	f000 f9ce 	bl	8000944 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80005a8:	f000 feda 	bl	8001360 <HAL_ICACHE_Enable>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80005b2:	f000 f9c7 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <MX_GPIO_Init>:
 *  Created on: Mar 13, 2023
 *      Author: nayye
 */
#include "main.h"
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d2:	4b65      	ldr	r3, [pc, #404]	; (8000768 <MX_GPIO_Init+0x1ac>)
 80005d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005d8:	4a63      	ldr	r2, [pc, #396]	; (8000768 <MX_GPIO_Init+0x1ac>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005e2:	4b61      	ldr	r3, [pc, #388]	; (8000768 <MX_GPIO_Init+0x1ac>)
 80005e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	613b      	str	r3, [r7, #16]
 80005ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f0:	4b5d      	ldr	r3, [pc, #372]	; (8000768 <MX_GPIO_Init+0x1ac>)
 80005f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005f6:	4a5c      	ldr	r2, [pc, #368]	; (8000768 <MX_GPIO_Init+0x1ac>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000600:	4b59      	ldr	r3, [pc, #356]	; (8000768 <MX_GPIO_Init+0x1ac>)
 8000602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800060e:	4b56      	ldr	r3, [pc, #344]	; (8000768 <MX_GPIO_Init+0x1ac>)
 8000610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000614:	4a54      	ldr	r2, [pc, #336]	; (8000768 <MX_GPIO_Init+0x1ac>)
 8000616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800061a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800061e:	4b52      	ldr	r3, [pc, #328]	; (8000768 <MX_GPIO_Init+0x1ac>)
 8000620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b4e      	ldr	r3, [pc, #312]	; (8000768 <MX_GPIO_Init+0x1ac>)
 800062e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000632:	4a4d      	ldr	r2, [pc, #308]	; (8000768 <MX_GPIO_Init+0x1ac>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800063c:	4b4a      	ldr	r3, [pc, #296]	; (8000768 <MX_GPIO_Init+0x1ac>)
 800063e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2104      	movs	r1, #4
 800064e:	4847      	ldr	r0, [pc, #284]	; (800076c <MX_GPIO_Init+0x1b0>)
 8000650:	f000 fe34 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	4845      	ldr	r0, [pc, #276]	; (8000770 <MX_GPIO_Init+0x1b4>)
 800065a:	f000 fe2f 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	21a0      	movs	r1, #160	; 0xa0
 8000662:	4844      	ldr	r0, [pc, #272]	; (8000774 <MX_GPIO_Init+0x1b8>)
 8000664:	f000 fe2a 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066e:	4b42      	ldr	r3, [pc, #264]	; (8000778 <MX_GPIO_Init+0x1bc>)
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	483c      	ldr	r0, [pc, #240]	; (8000770 <MX_GPIO_Init+0x1b4>)
 800067e:	f000 fc45 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000682:	2304      	movs	r3, #4
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000686:	2303      	movs	r3, #3
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	4836      	ldr	r0, [pc, #216]	; (8000770 <MX_GPIO_Init+0x1b4>)
 8000696:	f000 fc39 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800069a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4831      	ldr	r0, [pc, #196]	; (8000774 <MX_GPIO_Init+0x1b8>)
 80006b0:	f000 fc2c 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ba:	2303      	movs	r3, #3
 80006bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	482a      	ldr	r0, [pc, #168]	; (8000774 <MX_GPIO_Init+0x1b8>)
 80006ca:	f000 fc1f 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80006ce:	2304      	movs	r3, #4
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4821      	ldr	r0, [pc, #132]	; (800076c <MX_GPIO_Init+0x1b0>)
 80006e6:	f000 fc11 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	481b      	ldr	r0, [pc, #108]	; (8000770 <MX_GPIO_Init+0x1b4>)
 8000702:	f000 fc03 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000706:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000718:	230a      	movs	r3, #10
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	4816      	ldr	r0, [pc, #88]	; (800077c <MX_GPIO_Init+0x1c0>)
 8000724:	f000 fbf2 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072e:	2303      	movs	r3, #3
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <MX_GPIO_Init+0x1c0>)
 800073e:	f000 fbe5 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBn_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin|LED_BLUE_Pin;
 8000742:	23a0      	movs	r3, #160	; 0xa0
 8000744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	4806      	ldr	r0, [pc, #24]	; (8000774 <MX_GPIO_Init+0x1b8>)
 800075a:	f000 fbd7 	bl	8000f0c <HAL_GPIO_Init>

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	; 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	46020c00 	.word	0x46020c00
 800076c:	42021800 	.word	0x42021800
 8000770:	42020800 	.word	0x42020800
 8000774:	42020400 	.word	0x42020400
 8000778:	10110000 	.word	0x10110000
 800077c:	42020000 	.word	0x42020000

08000780 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
#include "main.h"
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09e      	sub	sp, #120	; 0x78
 8000784:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0318 	add.w	r3, r7, #24
 800078a:	2260      	movs	r2, #96	; 0x60
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f005 ff74 	bl	800667c <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	463b      	mov	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
 80007a2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 fdeb 	bl	8001380 <HAL_PWREx_ControlVoltageScaling>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007b0:	f000 f8c8 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007b4:	2310      	movs	r3, #16
 80007b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007bc:	2310      	movs	r3, #16
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80007c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fec8 	bl	8001564 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007da:	f000 f8b3 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	231f      	movs	r3, #31
 80007e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fd88 	bl	8002310 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000806:	f000 f89d 	bl	8000944 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3778      	adds	r7, #120	; 0x78
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <SystemPower_Config>:
#include "main.h"
void SystemPower_Config(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000816:	f000 fe85 	bl	8001524 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800081a:	f000 fe93 	bl	8001544 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800081e:	2002      	movs	r0, #2
 8000820:	f000 fe30 	bl	8001484 <HAL_PWREx_ConfigSupply>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemPower_Config+0x1c>
  {
    Error_Handler();
 800082a:	f000 f88b 	bl	8000944 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <MX_USART1_UART_Init>:
 *      Author: nayye
 */
#include "main.h"
UART_HandleTypeDef huart1 = {0};
void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 800083a:	4a23      	ldr	r2, [pc, #140]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 800083c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 800087e:	f005 f989 	bl	8005b94 <HAL_UART_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000888:	f000 f85c 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088c:	2100      	movs	r1, #0
 800088e:	480d      	ldr	r0, [pc, #52]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 8000890:	f005 fe06 	bl	80064a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800089a:	f000 f853 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089e:	2100      	movs	r1, #0
 80008a0:	4808      	ldr	r0, [pc, #32]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 80008a2:	f005 fe3b 	bl	800651c <HAL_UARTEx_SetRxFifoThreshold>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008ac:	f000 f84a 	bl	8000944 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_USART1_UART_Init+0x90>)
 80008b2:	f005 fdbc 	bl	800642e <HAL_UARTEx_DisableFifoMode>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008bc:	f000 f842 	bl	8000944 <Error_Handler>
  }


}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000038 	.word	0x20000038
 80008c8:	40013800 	.word	0x40013800

080008cc <main>:


uint8_t arr[] = {"UART1 Testing"};

int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d0:	f000 f9ca 	bl	8000c68 <HAL_Init>

  SystemClock_Config();
 80008d4:	f7ff ff54 	bl	8000780 <SystemClock_Config>

  SystemPower_Config();
 80008d8:	f7ff ff9b 	bl	8000812 <SystemPower_Config>
  MX_GPIO_Init();
 80008dc:	f7ff fe6e 	bl	80005bc <MX_GPIO_Init>
  MX_ICACHE_Init();
 80008e0:	f7ff fe58 	bl	8000594 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 80008e4:	f7ff ffa6 	bl	8000834 <MX_USART1_UART_Init>

  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <main+0x44>)
 80008ec:	f000 fcfe 	bl	80012ec <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	4808      	ldr	r0, [pc, #32]	; (8000914 <main+0x48>)
 80008f4:	f000 fcfa 	bl	80012ec <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart1, arr, sizeof(arr), HAL_MAX_DELAY);
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
 80008fc:	220e      	movs	r2, #14
 80008fe:	4906      	ldr	r1, [pc, #24]	; (8000918 <main+0x4c>)
 8000900:	4806      	ldr	r0, [pc, #24]	; (800091c <main+0x50>)
 8000902:	f005 f997 	bl	8005c34 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800090a:	f000 f9fb 	bl	8000d04 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800090e:	e7eb      	b.n	80008e8 <main+0x1c>
 8000910:	42020800 	.word	0x42020800
 8000914:	42020400 	.word	0x42020400
 8000918:	20000000 	.word	0x20000000
 800091c:	20000038 	.word	0x20000038

08000920 <HAL_TIM_PeriodElapsedCallback>:
}



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM17) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d101      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000932:	f000 f9c7 	bl	8000cc4 <HAL_IncTick>
  }

}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40014800 	.word	0x40014800

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_MspInit+0x34>)
 8000958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800095c:	4a09      	ldr	r2, [pc, #36]	; (8000984 <HAL_MspInit+0x34>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_MspInit+0x34>)
 8000968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000974:	2004      	movs	r0, #4
 8000976:	f000 fa96 	bl	8000ea6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	46020c00 	.word	0x46020c00

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0bc      	sub	sp, #240	; 0xf0
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	22c8      	movs	r2, #200	; 0xc8
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f005 fe67 	bl	800667c <memset>
  if(huart->Instance==USART1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a26      	ldr	r2, [pc, #152]	; (8000a4c <HAL_UART_MspInit+0xc4>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d145      	bne.n	8000a44 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009b8:	f04f 0201 	mov.w	r2, #1
 80009bc:	f04f 0300 	mov.w	r3, #0
 80009c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009c4:	2300      	movs	r3, #0
 80009c6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 f8ad 	bl	8002b2c <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80009d8:	f7ff ffb4 	bl	8000944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_UART_MspInit+0xc8>)
 80009de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80009e2:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <HAL_UART_MspInit+0xc8>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_UART_MspInit+0xc8>)
 80009ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_UART_MspInit+0xc8>)
 80009fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a00:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <HAL_UART_MspInit+0xc8>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_UART_MspInit+0xc8>)
 8000a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a32:	2307      	movs	r3, #7
 8000a34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <HAL_UART_MspInit+0xcc>)
 8000a40:	f000 fa64 	bl	8000f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	37f0      	adds	r7, #240	; 0xf0
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	46020c00 	.word	0x46020c00
 8000a54:	42020000 	.word	0x42020000

08000a58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08e      	sub	sp, #56	; 0x38
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000a68:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <HAL_InitTick+0xcc>)
 8000a6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a6e:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <HAL_InitTick+0xcc>)
 8000a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a74:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <HAL_InitTick+0xcc>)
 8000a7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a86:	f107 0210 	add.w	r2, r7, #16
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 ff8d 	bl	80029b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a96:	f001 ff63 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8000a9a:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9e:	4a22      	ldr	r2, [pc, #136]	; (8000b28 <HAL_InitTick+0xd0>)
 8000aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa4:	0c9b      	lsrs	r3, r3, #18
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <HAL_InitTick+0xd4>)
 8000aac:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <HAL_InitTick+0xd8>)
 8000aae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <HAL_InitTick+0xd4>)
 8000ab2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab6:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000ab8:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <HAL_InitTick+0xd4>)
 8000aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000abc:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <HAL_InitTick+0xd4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_InitTick+0xd4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000aca:	4818      	ldr	r0, [pc, #96]	; (8000b2c <HAL_InitTick+0xd4>)
 8000acc:	f004 fc78 	bl	80053c0 <HAL_TIM_Base_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000ad6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d118      	bne.n	8000b10 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000ade:	4813      	ldr	r0, [pc, #76]	; (8000b2c <HAL_InitTick+0xd4>)
 8000ae0:	f004 fcd0 	bl	8005484 <HAL_TIM_Base_Start_IT>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8000aea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d10e      	bne.n	8000b10 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d808      	bhi.n	8000b0a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	2047      	movs	r0, #71	; 0x47
 8000afe:	f000 f9dd 	bl	8000ebc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b02:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <HAL_InitTick+0xdc>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e002      	b.n	8000b10 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000b10:	2047      	movs	r0, #71	; 0x47
 8000b12:	f000 f9ed 	bl	8000ef0 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000b16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3738      	adds	r7, #56	; 0x38
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	46020c00 	.word	0x46020c00
 8000b28:	431bde83 	.word	0x431bde83
 8000b2c:	200000c8 	.word	0x200000c8
 8000b30:	40014800 	.word	0x40014800
 8000b34:	20000014 	.word	0x20000014

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <TIM17_IRQHandler+0x10>)
 8000b96:	f004 fd15 	bl	80055c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200000c8 	.word	0x200000c8

08000ba4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <SystemInit+0x68>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <SystemInit+0x68>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <SystemInit+0x6c>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <SystemInit+0x6c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <SystemInit+0x6c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <SystemInit+0x6c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <SystemInit+0x6c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <SystemInit+0x6c>)
 8000bd6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000bda:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <SystemInit+0x6c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <SystemInit+0x6c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <SystemInit+0x6c>)
 8000bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <SystemInit+0x6c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SystemInit+0x68>)
 8000bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bfe:	609a      	str	r2, [r3, #8]
  #endif
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00
 8000c10:	46020c00 	.word	0x46020c00

08000c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c1a:	e003      	b.n	8000c24 <LoopCopyDataInit>

08000c1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c22:	3104      	adds	r1, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c2c:	d3f6      	bcc.n	8000c1c <CopyDataInit>
	ldr	r2, =_sbss
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c30:	e002      	b.n	8000c38 <LoopFillZerobss>

08000c32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c34:	f842 3b04 	str.w	r3, [r2], #4

08000c38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <LoopForever+0x16>)
	cmp	r2, r3
 8000c3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c3c:	d3f9      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c3e:	f7ff ffb1 	bl	8000ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c42:	f005 fcf7 	bl	8006634 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c46:	f7ff fe41 	bl	80008cc <main>

08000c4a <LoopForever>:

LoopForever:
    b LoopForever
 8000c4a:	e7fe      	b.n	8000c4a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000c4c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000c50:	080067b4 	.word	0x080067b4
	ldr	r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c58:	20000019 	.word	0x20000019
	ldr	r2, =_sbss
 8000c5c:	2000001c 	.word	0x2000001c
	ldr	r3, = _ebss
 8000c60:	20000118 	.word	0x20000118

08000c64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC1_IRQHandler>
	...

08000c68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_Init+0x4c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <HAL_Init+0x4c>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f914 	bl	8000ea6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c7e:	f001 fd39 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8000c82:	4602      	mov	r2, r0
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_Init+0x50>)
 8000c86:	6a1b      	ldr	r3, [r3, #32]
 8000c88:	f003 030f 	and.w	r3, r3, #15
 8000c8c:	490b      	ldr	r1, [pc, #44]	; (8000cbc <HAL_Init+0x54>)
 8000c8e:	5ccb      	ldrb	r3, [r1, r3]
 8000c90:	fa22 f303 	lsr.w	r3, r2, r3
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_Init+0x58>)
 8000c96:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c98:	2007      	movs	r0, #7
 8000c9a:	f7ff fedd 	bl	8000a58 <HAL_InitTick>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e002      	b.n	8000cae <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fe52 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40022000 	.word	0x40022000
 8000cb8:	46020c00 	.word	0x46020c00
 8000cbc:	080066a4 	.word	0x080066a4
 8000cc0:	20000010 	.word	0x20000010

08000cc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000018 	.word	0x20000018
 8000ce8:	20000114 	.word	0x20000114

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000114 	.word	0x20000114

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffde 	bl	8000cec <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000018 	.word	0x20000018

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	; (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff4c 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eca:	f7ff ff63 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000ece:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f7ff ffb3 	bl	8000e40 <NVIC_EncodePriority>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff82 	bl	8000dec <__NVIC_SetPriority>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff56 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f1e:	e1ba      	b.n	8001296 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	2101      	movs	r1, #1
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 81aa 	beq.w	8001290 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a55      	ldr	r2, [pc, #340]	; (8001094 <HAL_GPIO_Init+0x188>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d15d      	bne.n	8001000 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69fa      	ldr	r2, [r7, #28]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0201 	and.w	r2, r3, #1
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000f74:	4a48      	ldr	r2, [pc, #288]	; (8001098 <HAL_GPIO_Init+0x18c>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f7c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000f7e:	4a46      	ldr	r2, [pc, #280]	; (8001098 <HAL_GPIO_Init+0x18c>)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	4413      	add	r3, r2
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	3208      	adds	r2, #8
 8000f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f96:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220b      	movs	r2, #11
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	69f9      	ldr	r1, [r7, #28]
 8000fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2202      	movs	r2, #2
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e067      	b.n	80010d0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x104>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b12      	cmp	r3, #18
 800100e:	d145      	bne.n	800109c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	4013      	ands	r3, r2
 8001032:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	f003 020f 	and.w	r2, r3, #15
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	4313      	orrs	r3, r2
 800104c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	69f9      	ldr	r1, [r7, #28]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	4013      	ands	r3, r2
 8001072:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	4313      	orrs	r3, r2
 8001088:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e01e      	b.n	80010d0 <HAL_GPIO_Init+0x1c4>
 8001092:	bf00      	nop
 8001094:	46020000 	.word	0x46020000
 8001098:	080066fc 	.word	0x080066fc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d00b      	beq.n	80010f0 <HAL_GPIO_Init+0x1e4>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d007      	beq.n	80010f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e4:	2b11      	cmp	r3, #17
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b12      	cmp	r3, #18
 80010ee:	d130      	bne.n	8001152 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4013      	ands	r3, r2
 8001106:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	4313      	orrs	r3, r2
 8001118:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001126:	2201      	movs	r2, #1
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	4013      	ands	r3, r2
 8001134:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	f003 0201 	and.w	r2, r3, #1
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	4313      	orrs	r3, r2
 800114a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b03      	cmp	r3, #3
 8001158:	d017      	beq.n	800118a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	4013      	ands	r3, r2
 8001170:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	4313      	orrs	r3, r2
 8001182:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d07c      	beq.n	8001290 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001196:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <HAL_GPIO_Init+0x3a8>)
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3318      	adds	r3, #24
 800119e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	0a9a      	lsrs	r2, r3, #10
 80011be:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <HAL_GPIO_Init+0x3ac>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	f002 0203 	and.w	r2, r2, #3
 80011c8:	00d2      	lsls	r2, r2, #3
 80011ca:	4093      	lsls	r3, r2
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011d2:	4938      	ldr	r1, [pc, #224]	; (80012b4 <HAL_GPIO_Init+0x3a8>)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3318      	adds	r3, #24
 80011da:	69fa      	ldr	r2, [r7, #28]
 80011dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <HAL_GPIO_Init+0x3a8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001204:	4a2b      	ldr	r2, [pc, #172]	; (80012b4 <HAL_GPIO_Init+0x3a8>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800120a:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <HAL_GPIO_Init+0x3a8>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43db      	mvns	r3, r3
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	4013      	ands	r3, r2
 8001218:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800122e:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <HAL_GPIO_Init+0x3a8>)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001234:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <HAL_GPIO_Init+0x3a8>)
 8001236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800123a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	4013      	ands	r3, r2
 8001244:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800125a:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <HAL_GPIO_Init+0x3a8>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_GPIO_Init+0x3a8>)
 8001264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001268:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	4013      	ands	r3, r2
 8001272:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_GPIO_Init+0x3a8>)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f47f ae3d 	bne.w	8000f20 <HAL_GPIO_Init+0x14>
  }
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3724      	adds	r7, #36	; 0x24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	46022000 	.word	0x46022000
 80012b8:	002f7f7f 	.word	0x002f7f7f

080012bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
 80012c8:	4613      	mov	r3, r2
 80012ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4013      	ands	r3, r2
 8001304:	041a      	lsls	r2, r3, #16
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43d9      	mvns	r1, r3
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	400b      	ands	r3, r1
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e007      	b.n	800134e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 0204 	bic.w	r2, r3, #4
 8001346:	4905      	ldr	r1, [pc, #20]	; (800135c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40030400 	.word	0x40030400

08001360 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_ICACHE_Enable+0x1c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_ICACHE_Enable+0x1c>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40030400 	.word	0x40030400

08001380 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001388:	4b34      	ldr	r3, [pc, #208]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800138a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001390:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	429a      	cmp	r2, r3
 8001398:	d101      	bne.n	800139e <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e057      	b.n	800144e <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a4:	d90a      	bls.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	4a2a      	ldr	r2, [pc, #168]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013b8:	60d3      	str	r3, [r2, #12]
 80013ba:	e007      	b.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80013c4:	4925      	ldr	r1, [pc, #148]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a24      	ldr	r2, [pc, #144]	; (8001464 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	099b      	lsrs	r3, r3, #6
 80013d8:	2232      	movs	r2, #50	; 0x32
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	4a21      	ldr	r2, [pc, #132]	; (8001464 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	099b      	lsrs	r3, r3, #6
 80013e6:	3301      	adds	r3, #1
 80013e8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80013ea:	e002      	b.n	80013f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x84>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f3      	bne.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d01b      	beq.n	8001442 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a15      	ldr	r2, [pc, #84]	; (8001464 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	2232      	movs	r2, #50	; 0x32
 8001418:	fb02 f303 	mul.w	r3, r2, r3
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	099b      	lsrs	r3, r3, #6
 8001424:	3301      	adds	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001428:	e002      	b.n	8001430 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3b01      	subs	r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <HAL_PWREx_ControlVoltageScaling+0xc2>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f3      	bne.n	800142a <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e000      	b.n	800144e <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	46020800 	.word	0x46020800
 8001460:	20000010 	.word	0x20000010
 8001464:	10624dd3 	.word	0x10624dd3

08001468 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <HAL_PWREx_GetVoltageRange+0x18>)
 800146e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	46020800 	.word	0x46020800

08001484 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_PWREx_ConfigSupply+0x94>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a22      	ldr	r2, [pc, #136]	; (800151c <HAL_PWREx_ConfigSupply+0x98>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	099b      	lsrs	r3, r3, #6
 8001498:	2232      	movs	r2, #50	; 0x32
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	4a1f      	ldr	r2, [pc, #124]	; (800151c <HAL_PWREx_ConfigSupply+0x98>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	099b      	lsrs	r3, r3, #6
 80014a6:	3301      	adds	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d113      	bne.n	80014d8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_PWREx_ConfigSupply+0x9c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <HAL_PWREx_ConfigSupply+0x9c>)
 80014b6:	f023 0302 	bic.w	r3, r3, #2
 80014ba:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014bc:	e002      	b.n	80014c4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_PWREx_ConfigSupply+0x9c>)
 80014c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d116      	bne.n	80014fe <HAL_PWREx_ConfigSupply+0x7a>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f3      	bne.n	80014be <HAL_PWREx_ConfigSupply+0x3a>
 80014d6:	e012      	b.n	80014fe <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_PWREx_ConfigSupply+0x9c>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4a10      	ldr	r2, [pc, #64]	; (8001520 <HAL_PWREx_ConfigSupply+0x9c>)
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014e4:	e002      	b.n	80014ec <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_PWREx_ConfigSupply+0x9c>)
 80014ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <HAL_PWREx_ConfigSupply+0x7a>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f3      	bne.n	80014e6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e000      	b.n	800150a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000010 	.word	0x20000010
 800151c:	10624dd3 	.word	0x10624dd3
 8001520:	46020800 	.word	0x46020800

08001524 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_PWREx_EnableVddIO2+0x1c>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_PWREx_EnableVddIO2+0x1c>)
 800152e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001532:	6113      	str	r3, [r2, #16]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	46020800 	.word	0x46020800

08001544 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	46020800 	.word	0x46020800

08001564 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	f000 bec3 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157e:	4b9c      	ldr	r3, [pc, #624]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001588:	4b99      	ldr	r3, [pc, #612]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 800158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8172 	beq.w	8001884 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80015a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <HAL_RCC_OscConfig+0x52>
 80015a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	f040 80e4 	bne.w	8001776 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	f040 80e0 	bne.w	8001776 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b6:	4b8e      	ldr	r3, [pc, #568]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <HAL_RCC_OscConfig+0x6c>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f000 be9a 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d4:	4b86      	ldr	r3, [pc, #536]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d004      	beq.n	80015ea <HAL_RCC_OscConfig+0x86>
 80015e0:	4b83      	ldr	r3, [pc, #524]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80015e8:	e005      	b.n	80015f6 <HAL_RCC_OscConfig+0x92>
 80015ea:	4b81      	ldr	r3, [pc, #516]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80015ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015f0:	041b      	lsls	r3, r3, #16
 80015f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d255      	bcs.n	80016a6 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80015fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10a      	bne.n	8001616 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	4618      	mov	r0, r3
 8001606:	f001 fa0b 	bl	8002a20 <RCC_SetFlashLatencyFromMSIRange>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	f000 be77 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001616:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	4a75      	ldr	r2, [pc, #468]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 800161c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001620:	6093      	str	r3, [r2, #8]
 8001622:	4b73      	ldr	r3, [pc, #460]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	4970      	ldr	r1, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800163c:	d309      	bcc.n	8001652 <HAL_RCC_OscConfig+0xee>
 800163e:	4b6c      	ldr	r3, [pc, #432]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f023 021f 	bic.w	r2, r3, #31
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4969      	ldr	r1, [pc, #420]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 800164c:	4313      	orrs	r3, r2
 800164e:	60cb      	str	r3, [r1, #12]
 8001650:	e07e      	b.n	8001750 <HAL_RCC_OscConfig+0x1ec>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	2b00      	cmp	r3, #0
 8001658:	da0a      	bge.n	8001670 <HAL_RCC_OscConfig+0x10c>
 800165a:	4b65      	ldr	r3, [pc, #404]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	015b      	lsls	r3, r3, #5
 8001668:	4961      	ldr	r1, [pc, #388]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 800166a:	4313      	orrs	r3, r2
 800166c:	60cb      	str	r3, [r1, #12]
 800166e:	e06f      	b.n	8001750 <HAL_RCC_OscConfig+0x1ec>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001678:	d30a      	bcc.n	8001690 <HAL_RCC_OscConfig+0x12c>
 800167a:	4b5d      	ldr	r3, [pc, #372]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4959      	ldr	r1, [pc, #356]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 800168a:	4313      	orrs	r3, r2
 800168c:	60cb      	str	r3, [r1, #12]
 800168e:	e05f      	b.n	8001750 <HAL_RCC_OscConfig+0x1ec>
 8001690:	4b57      	ldr	r3, [pc, #348]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	03db      	lsls	r3, r3, #15
 800169e:	4954      	ldr	r1, [pc, #336]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	60cb      	str	r3, [r1, #12]
 80016a4:	e054      	b.n	8001750 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80016a6:	4b52      	ldr	r3, [pc, #328]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4a51      	ldr	r2, [pc, #324]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80016ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016b0:	6093      	str	r3, [r2, #8]
 80016b2:	4b4f      	ldr	r3, [pc, #316]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	494c      	ldr	r1, [pc, #304]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80016cc:	d309      	bcc.n	80016e2 <HAL_RCC_OscConfig+0x17e>
 80016ce:	4b48      	ldr	r3, [pc, #288]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f023 021f 	bic.w	r2, r3, #31
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4945      	ldr	r1, [pc, #276]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
 80016e0:	e028      	b.n	8001734 <HAL_RCC_OscConfig+0x1d0>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da0a      	bge.n	8001700 <HAL_RCC_OscConfig+0x19c>
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	015b      	lsls	r3, r3, #5
 80016f8:	493d      	ldr	r1, [pc, #244]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60cb      	str	r3, [r1, #12]
 80016fe:	e019      	b.n	8001734 <HAL_RCC_OscConfig+0x1d0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001708:	d30a      	bcc.n	8001720 <HAL_RCC_OscConfig+0x1bc>
 800170a:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	029b      	lsls	r3, r3, #10
 8001718:	4935      	ldr	r1, [pc, #212]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 800171a:	4313      	orrs	r3, r2
 800171c:	60cb      	str	r3, [r1, #12]
 800171e:	e009      	b.n	8001734 <HAL_RCC_OscConfig+0x1d0>
 8001720:	4b33      	ldr	r3, [pc, #204]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	03db      	lsls	r3, r3, #15
 800172e:	4930      	ldr	r1, [pc, #192]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 8001730:	4313      	orrs	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10a      	bne.n	8001750 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	4618      	mov	r0, r3
 8001740:	f001 f96e 	bl	8002a20 <RCC_SetFlashLatencyFromMSIRange>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f000 bdda 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001750:	f001 f8d8 	bl	8002904 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_RCC_OscConfig+0x290>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff f97d 	bl	8000a58 <HAL_InitTick>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 808a 	beq.w	8001882 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 800176e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001772:	f000 bdc7 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d066      	beq.n	800184c <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800178a:	f7ff faaf 	bl	8000cec <HAL_GetTick>
 800178e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001790:	e009      	b.n	80017a6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001792:	f7ff faab 	bl	8000cec <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d902      	bls.n	80017a6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	f000 bdaf 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0ef      	beq.n	8001792 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80017b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017bc:	6093      	str	r3, [r2, #8]
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	4909      	ldr	r1, [pc, #36]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80017d8:	d30e      	bcc.n	80017f8 <HAL_RCC_OscConfig+0x294>
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f023 021f 	bic.w	r2, r3, #31
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4902      	ldr	r1, [pc, #8]	; (80017f0 <HAL_RCC_OscConfig+0x28c>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60cb      	str	r3, [r1, #12]
 80017ec:	e04a      	b.n	8001884 <HAL_RCC_OscConfig+0x320>
 80017ee:	bf00      	nop
 80017f0:	46020c00 	.word	0x46020c00
 80017f4:	20000014 	.word	0x20000014
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da0a      	bge.n	8001816 <HAL_RCC_OscConfig+0x2b2>
 8001800:	4b9b      	ldr	r3, [pc, #620]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	015b      	lsls	r3, r3, #5
 800180e:	4998      	ldr	r1, [pc, #608]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001810:	4313      	orrs	r3, r2
 8001812:	60cb      	str	r3, [r1, #12]
 8001814:	e036      	b.n	8001884 <HAL_RCC_OscConfig+0x320>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181e:	d30a      	bcc.n	8001836 <HAL_RCC_OscConfig+0x2d2>
 8001820:	4b93      	ldr	r3, [pc, #588]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	029b      	lsls	r3, r3, #10
 800182e:	4990      	ldr	r1, [pc, #576]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001830:	4313      	orrs	r3, r2
 8001832:	60cb      	str	r3, [r1, #12]
 8001834:	e026      	b.n	8001884 <HAL_RCC_OscConfig+0x320>
 8001836:	4b8e      	ldr	r3, [pc, #568]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	03db      	lsls	r3, r3, #15
 8001844:	498a      	ldr	r1, [pc, #552]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001846:	4313      	orrs	r3, r2
 8001848:	60cb      	str	r3, [r1, #12]
 800184a:	e01b      	b.n	8001884 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800184c:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a87      	ldr	r2, [pc, #540]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001858:	f7ff fa48 	bl	8000cec <HAL_GetTick>
 800185c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800185e:	e009      	b.n	8001874 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001860:	f7ff fa44 	bl	8000cec <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d902      	bls.n	8001874 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	f000 bd48 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001874:	4b7e      	ldr	r3, [pc, #504]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ef      	bne.n	8001860 <HAL_RCC_OscConfig+0x2fc>
 8001880:	e000      	b.n	8001884 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001882:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8094 	beq.w	80019ba <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001894:	2b08      	cmp	r3, #8
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_OscConfig+0x340>
 8001898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d110      	bne.n	80018c0 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d10d      	bne.n	80018c0 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	4b72      	ldr	r3, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 8083 	beq.w	80019b8 <HAL_RCC_OscConfig+0x454>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d17e      	bne.n	80019b8 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f000 bd22 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c8:	d106      	bne.n	80018d8 <HAL_RCC_OscConfig+0x374>
 80018ca:	4b69      	ldr	r3, [pc, #420]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a68      	ldr	r2, [pc, #416]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e041      	b.n	800195c <HAL_RCC_OscConfig+0x3f8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e0:	d112      	bne.n	8001908 <HAL_RCC_OscConfig+0x3a4>
 80018e2:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a62      	ldr	r2, [pc, #392]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b60      	ldr	r3, [pc, #384]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a5f      	ldr	r2, [pc, #380]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80018f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b5d      	ldr	r3, [pc, #372]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a5c      	ldr	r2, [pc, #368]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e029      	b.n	800195c <HAL_RCC_OscConfig+0x3f8>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001910:	d112      	bne.n	8001938 <HAL_RCC_OscConfig+0x3d4>
 8001912:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a56      	ldr	r2, [pc, #344]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b54      	ldr	r3, [pc, #336]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a53      	ldr	r2, [pc, #332]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a50      	ldr	r2, [pc, #320]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e011      	b.n	800195c <HAL_RCC_OscConfig+0x3f8>
 8001938:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a49      	ldr	r2, [pc, #292]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a46      	ldr	r2, [pc, #280]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001956:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800195a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d014      	beq.n	800198e <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8001964:	f7ff f9c2 	bl	8000cec <HAL_GetTick>
 8001968:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196a:	e009      	b.n	8001980 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff f9be 	bl	8000cec <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d902      	bls.n	8001980 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	f000 bcc2 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001980:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0ef      	beq.n	800196c <HAL_RCC_OscConfig+0x408>
 800198c:	e015      	b.n	80019ba <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800198e:	f7ff f9ad 	bl	8000cec <HAL_GetTick>
 8001992:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001994:	e009      	b.n	80019aa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001996:	f7ff f9a9 	bl	8000cec <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b64      	cmp	r3, #100	; 0x64
 80019a2:	d902      	bls.n	80019aa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	f000 bcad 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019aa:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ef      	bne.n	8001996 <HAL_RCC_OscConfig+0x432>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d066      	beq.n	8001a94 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_OscConfig+0x474>
 80019cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ce:	2b0c      	cmp	r3, #12
 80019d0:	d11a      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d117      	bne.n	8001a08 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d8:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_RCC_OscConfig+0x48e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f000 bc89 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	041b      	lsls	r3, r3, #16
 8001a00:	491b      	ldr	r1, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a06:	e045      	b.n	8001a94 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d024      	beq.n	8001a5a <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a16      	ldr	r2, [pc, #88]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a1c:	f7ff f966 	bl	8000cec <HAL_GetTick>
 8001a20:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a22:	e009      	b.n	8001a38 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff f962 	bl	8000cec <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d902      	bls.n	8001a38 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	f000 bc66 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0ef      	beq.n	8001a24 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	4907      	ldr	r1, [pc, #28]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	610b      	str	r3, [r1, #16]
 8001a58:	e01c      	b.n	8001a94 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_RCC_OscConfig+0x50c>)
 8001a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a64:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a66:	f7ff f941 	bl	8000cec <HAL_GetTick>
 8001a6a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a6c:	e00c      	b.n	8001a88 <HAL_RCC_OscConfig+0x524>
 8001a6e:	bf00      	nop
 8001a70:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a74:	f7ff f93a 	bl	8000cec <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d902      	bls.n	8001a88 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	f000 bc3e 	b.w	8002304 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a88:	4baf      	ldr	r3, [pc, #700]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1ef      	bne.n	8001a74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80c7 	beq.w	8001c30 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa8:	4ba7      	ldr	r3, [pc, #668]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d111      	bne.n	8001ada <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4ba4      	ldr	r3, [pc, #656]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abc:	4aa2      	ldr	r2, [pc, #648]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ac6:	4ba0      	ldr	r3, [pc, #640]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ada:	4b9c      	ldr	r3, [pc, #624]	; (8001d4c <HAL_RCC_OscConfig+0x7e8>)
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d118      	bne.n	8001b18 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001ae6:	4b99      	ldr	r3, [pc, #612]	; (8001d4c <HAL_RCC_OscConfig+0x7e8>)
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	4a98      	ldr	r2, [pc, #608]	; (8001d4c <HAL_RCC_OscConfig+0x7e8>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af2:	f7ff f8fb 	bl	8000cec <HAL_GetTick>
 8001af6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afa:	f7ff f8f7 	bl	8000cec <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e3fb      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b0c:	4b8f      	ldr	r3, [pc, #572]	; (8001d4c <HAL_RCC_OscConfig+0x7e8>)
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d05f      	beq.n	8001be0 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001b20:	4b89      	ldr	r3, [pc, #548]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b26:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d037      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e3da      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01b      	beq.n	8001b90 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b58:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b5e:	4a7a      	ldr	r2, [pc, #488]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001b60:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001b64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001b68:	f7ff f8c0 	bl	8000cec <HAL_GetTick>
 8001b6c:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff f8bc 	bl	8000cec <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e3c0      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b82:	4b71      	ldr	r3, [pc, #452]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001b84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1ef      	bne.n	8001b70 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001b90:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	496a      	ldr	r1, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001ba6:	4b68      	ldr	r3, [pc, #416]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bac:	4a66      	ldr	r2, [pc, #408]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001bae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001bb6:	f7ff f899 	bl	8000cec <HAL_GetTick>
 8001bba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f895 	bl	8000cec <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e399      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001bd0:	4b5d      	ldr	r3, [pc, #372]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0ef      	beq.n	8001bbe <HAL_RCC_OscConfig+0x65a>
 8001bde:	e01b      	b.n	8001c18 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001be0:	4b59      	ldr	r3, [pc, #356]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be6:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001be8:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001bec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001bf0:	f7ff f87c 	bl	8000cec <HAL_GetTick>
 8001bf4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff f878 	bl	8000cec <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e37c      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c0a:	4b4f      	ldr	r3, [pc, #316]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1ef      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c20:	4b49      	ldr	r3, [pc, #292]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c26:	4a48      	ldr	r2, [pc, #288]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001c28:	f023 0304 	bic.w	r3, r3, #4
 8001c2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8112 	beq.w	8001e62 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c44:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d111      	bne.n	8001c76 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c58:	4a3b      	ldr	r2, [pc, #236]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c62:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c76:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <HAL_RCC_OscConfig+0x7e8>)
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d118      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001c82:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <HAL_RCC_OscConfig+0x7e8>)
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	4a31      	ldr	r2, [pc, #196]	; (8001d4c <HAL_RCC_OscConfig+0x7e8>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff f82d 	bl	8000cec <HAL_GetTick>
 8001c92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c96:	f7ff f829 	bl	8000cec <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e32d      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_RCC_OscConfig+0x7e8>)
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d01f      	beq.n	8001d00 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cd2:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ce2:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cec:	e018      	b.n	8001d20 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cfe:	e00f      	b.n	8001d20 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d16:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <HAL_RCC_OscConfig+0x7e4>)
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d058      	beq.n	8001dda <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8001d28:	f7fe ffe0 	bl	8000cec <HAL_GetTick>
 8001d2c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d2e:	e00f      	b.n	8001d50 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7fe ffdc 	bl	8000cec <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d906      	bls.n	8001d50 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e2de      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
 8001d46:	bf00      	nop
 8001d48:	46020c00 	.word	0x46020c00
 8001d4c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d50:	4b9c      	ldr	r3, [pc, #624]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001d52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0e8      	beq.n	8001d30 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01b      	beq.n	8001da2 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d6a:	4b96      	ldr	r3, [pc, #600]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d70:	4a94      	ldr	r2, [pc, #592]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7c:	f7fe ffb6 	bl	8000cec <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e2b8      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001d92:	4b8c      	ldr	r3, [pc, #560]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ed      	beq.n	8001d7c <HAL_RCC_OscConfig+0x818>
 8001da0:	e053      	b.n	8001e4a <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001da8:	4a86      	ldr	r2, [pc, #536]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db4:	f7fe ff9a 	bl	8000cec <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e29c      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001dca:	4b7e      	ldr	r3, [pc, #504]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ed      	bne.n	8001db4 <HAL_RCC_OscConfig+0x850>
 8001dd8:	e037      	b.n	8001e4a <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001dda:	f7fe ff87 	bl	8000cec <HAL_GetTick>
 8001dde:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe ff83 	bl	8000cec <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e285      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df8:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001dfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1ed      	bne.n	8001de2 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001e06:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01a      	beq.n	8001e4a <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e14:	4b6b      	ldr	r3, [pc, #428]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e1a:	4a6a      	ldr	r2, [pc, #424]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7fe ff61 	bl	8000cec <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e263      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e3c:	4b61      	ldr	r3, [pc, #388]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1ed      	bne.n	8001e26 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e4a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e52:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e58:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001e5a:	f023 0304 	bic.w	r3, r3, #4
 8001e5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d036      	beq.n	8001edc <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d019      	beq.n	8001eaa <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001e76:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001e7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e80:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e82:	f7fe ff33 	bl	8000cec <HAL_GetTick>
 8001e86:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e8a:	f7fe ff2f 	bl	8000cec <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e233      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001e9c:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x926>
 8001ea8:	e018      	b.n	8001edc <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001eaa:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a45      	ldr	r2, [pc, #276]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eb4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001eb6:	f7fe ff19 	bl	8000cec <HAL_GetTick>
 8001eba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ebe:	f7fe ff15 	bl	8000cec <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e219      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ed0:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d036      	beq.n	8001f56 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d019      	beq.n	8001f24 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001ef0:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a33      	ldr	r2, [pc, #204]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001efc:	f7fe fef6 	bl	8000cec <HAL_GetTick>
 8001f00:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001f04:	f7fe fef2 	bl	8000cec <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1f6      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x9a0>
 8001f22:	e018      	b.n	8001f56 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f2e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f30:	f7fe fedc 	bl	8000cec <HAL_GetTick>
 8001f34:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001f38:	f7fe fed8 	bl	8000cec <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1dc      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d07f      	beq.n	8002062 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d062      	beq.n	8002030 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001f70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f74:	6093      	str	r3, [r2, #8]
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	4910      	ldr	r1, [pc, #64]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001f90:	d309      	bcc.n	8001fa6 <HAL_RCC_OscConfig+0xa42>
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f023 021f 	bic.w	r2, r3, #31
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4909      	ldr	r1, [pc, #36]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60cb      	str	r3, [r1, #12]
 8001fa4:	e02a      	b.n	8001ffc <HAL_RCC_OscConfig+0xa98>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da0c      	bge.n	8001fc8 <HAL_RCC_OscConfig+0xa64>
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	015b      	lsls	r3, r3, #5
 8001fbc:	4901      	ldr	r1, [pc, #4]	; (8001fc4 <HAL_RCC_OscConfig+0xa60>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60cb      	str	r3, [r1, #12]
 8001fc2:	e01b      	b.n	8001ffc <HAL_RCC_OscConfig+0xa98>
 8001fc4:	46020c00 	.word	0x46020c00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd0:	d30a      	bcc.n	8001fe8 <HAL_RCC_OscConfig+0xa84>
 8001fd2:	4ba5      	ldr	r3, [pc, #660]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	029b      	lsls	r3, r3, #10
 8001fe0:	49a1      	ldr	r1, [pc, #644]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60cb      	str	r3, [r1, #12]
 8001fe6:	e009      	b.n	8001ffc <HAL_RCC_OscConfig+0xa98>
 8001fe8:	4b9f      	ldr	r3, [pc, #636]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	03db      	lsls	r3, r3, #15
 8001ff6:	499c      	ldr	r1, [pc, #624]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001ffc:	4b9a      	ldr	r3, [pc, #616]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a99      	ldr	r2, [pc, #612]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002008:	f7fe fe70 	bl	8000cec <HAL_GetTick>
 800200c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002010:	f7fe fe6c 	bl	8000cec <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e170      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002022:	4b91      	ldr	r3, [pc, #580]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0xaac>
 800202e:	e018      	b.n	8002062 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002030:	4b8d      	ldr	r3, [pc, #564]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a8c      	ldr	r2, [pc, #560]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002036:	f023 0310 	bic.w	r3, r3, #16
 800203a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800203c:	f7fe fe56 	bl	8000cec <HAL_GetTick>
 8002040:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002044:	f7fe fe52 	bl	8000cec <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e156      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002056:	4b84      	ldr	r3, [pc, #528]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 814b 	beq.w	8002302 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002072:	4b7d      	ldr	r3, [pc, #500]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b0c      	cmp	r3, #12
 800207c:	f000 80fa 	beq.w	8002274 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002084:	2b02      	cmp	r3, #2
 8002086:	f040 80cc 	bne.w	8002222 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b77      	ldr	r3, [pc, #476]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a76      	ldr	r2, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002090:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002094:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002096:	f7fe fe29 	bl	8000cec <HAL_GetTick>
 800209a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209e:	f7fe fe25 	bl	8000cec <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e129      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80020b0:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020bc:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d111      	bne.n	80020ee <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b67      	ldr	r3, [pc, #412]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80020cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d0:	4a65      	ldr	r2, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80020da:	4b63      	ldr	r3, [pc, #396]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80020dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80020ee:	4b5f      	ldr	r3, [pc, #380]	; (800226c <HAL_RCC_OscConfig+0xd08>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020fa:	d102      	bne.n	8002102 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002102:	4b5a      	ldr	r3, [pc, #360]	; (800226c <HAL_RCC_OscConfig+0xd08>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4a59      	ldr	r2, [pc, #356]	; (800226c <HAL_RCC_OscConfig+0xd08>)
 8002108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800210e:	4b56      	ldr	r3, [pc, #344]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002116:	f023 0303 	bic.w	r3, r3, #3
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002122:	3a01      	subs	r2, #1
 8002124:	0212      	lsls	r2, r2, #8
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800212c:	430a      	orrs	r2, r1
 800212e:	494e      	ldr	r1, [pc, #312]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002130:	4313      	orrs	r3, r2
 8002132:	628b      	str	r3, [r1, #40]	; 0x28
 8002134:	4b4c      	ldr	r3, [pc, #304]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002138:	4b4d      	ldr	r3, [pc, #308]	; (8002270 <HAL_RCC_OscConfig+0xd0c>)
 800213a:	4013      	ands	r3, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002140:	3a01      	subs	r2, #1
 8002142:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800214a:	3a01      	subs	r2, #1
 800214c:	0252      	lsls	r2, r2, #9
 800214e:	b292      	uxth	r2, r2
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002156:	3a01      	subs	r2, #1
 8002158:	0412      	lsls	r2, r2, #16
 800215a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002164:	3a01      	subs	r2, #1
 8002166:	0612      	lsls	r2, r2, #24
 8002168:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800216c:	430a      	orrs	r2, r1
 800216e:	493e      	ldr	r1, [pc, #248]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002170:	4313      	orrs	r3, r2
 8002172:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002174:	4b3c      	ldr	r3, [pc, #240]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 800217a:	f023 0310 	bic.w	r3, r3, #16
 800217e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002180:	4b39      	ldr	r3, [pc, #228]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002188:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002190:	00d2      	lsls	r2, r2, #3
 8002192:	4935      	ldr	r1, [pc, #212]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002194:	4313      	orrs	r3, r2
 8002196:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002198:	4b33      	ldr	r3, [pc, #204]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	4a32      	ldr	r2, [pc, #200]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 800219e:	f043 0310 	orr.w	r3, r3, #16
 80021a2:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80021a4:	4b30      	ldr	r3, [pc, #192]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	f023 020c 	bic.w	r2, r3, #12
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	492d      	ldr	r1, [pc, #180]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80021b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80021be:	4b2b      	ldr	r3, [pc, #172]	; (800226c <HAL_RCC_OscConfig+0xd08>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	4a2a      	ldr	r2, [pc, #168]	; (800226c <HAL_RCC_OscConfig+0xd08>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80021ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4b25      	ldr	r3, [pc, #148]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80021d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d8:	4a23      	ldr	r2, [pc, #140]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80021da:	f023 0304 	bic.w	r3, r3, #4
 80021de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	4a20      	ldr	r2, [pc, #128]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80021ee:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 80021f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80021fa:	f7fe fd77 	bl	8000cec <HAL_GetTick>
 80021fe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7fe fd73 	bl	8000cec <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e077      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0xc9e>
 8002220:	e06f      	b.n	8002302 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800222c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800222e:	f7fe fd5d 	bl	8000cec <HAL_GetTick>
 8002232:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7fe fd59 	bl	8000cec <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e05d      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	4a03      	ldr	r2, [pc, #12]	; (8002268 <HAL_RCC_OscConfig+0xd04>)
 800225a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	6293      	str	r3, [r2, #40]	; 0x28
 8002264:	e04d      	b.n	8002302 <HAL_RCC_OscConfig+0xd9e>
 8002266:	bf00      	nop
 8002268:	46020c00 	.word	0x46020c00
 800226c:	46020800 	.word	0x46020800
 8002270:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_RCC_OscConfig+0xda8>)
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800227a:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_RCC_OscConfig+0xda8>)
 800227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002284:	2b01      	cmp	r3, #1
 8002286:	d03a      	beq.n	80022fe <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0203 	and.w	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d133      	bne.n	80022fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d12a      	bne.n	80022fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	0b1b      	lsrs	r3, r3, #12
 80022ac:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d122      	bne.n	80022fe <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d11a      	bne.n	80022fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	0a5b      	lsrs	r3, r3, #9
 80022cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d111      	bne.n	80022fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d108      	bne.n	80022fe <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	0e1b      	lsrs	r3, r3, #24
 80022f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3738      	adds	r7, #56	; 0x38
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	46020c00 	.word	0x46020c00

08002310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e1d9      	b.n	80026d8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b9b      	ldr	r3, [pc, #620]	; (8002594 <HAL_RCC_ClockConfig+0x284>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d910      	bls.n	8002354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b98      	ldr	r3, [pc, #608]	; (8002594 <HAL_RCC_ClockConfig+0x284>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 020f 	bic.w	r2, r3, #15
 800233a:	4996      	ldr	r1, [pc, #600]	; (8002594 <HAL_RCC_ClockConfig+0x284>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b94      	ldr	r3, [pc, #592]	; (8002594 <HAL_RCC_ClockConfig+0x284>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e1c1      	b.n	80026d8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d010      	beq.n	8002382 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	4b8c      	ldr	r3, [pc, #560]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800236c:	429a      	cmp	r2, r3
 800236e:	d908      	bls.n	8002382 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002370:	4b89      	ldr	r3, [pc, #548]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	4986      	ldr	r1, [pc, #536]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 800237e:	4313      	orrs	r3, r2
 8002380:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d012      	beq.n	80023b4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	4b81      	ldr	r3, [pc, #516]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800239c:	429a      	cmp	r2, r3
 800239e:	d909      	bls.n	80023b4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80023a0:	4b7d      	ldr	r3, [pc, #500]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	497a      	ldr	r1, [pc, #488]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d010      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	4b74      	ldr	r3, [pc, #464]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d908      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80023d0:	4b71      	ldr	r3, [pc, #452]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	496e      	ldr	r1, [pc, #440]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d010      	beq.n	8002410 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	4b69      	ldr	r3, [pc, #420]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d908      	bls.n	8002410 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80023fe:	4b66      	ldr	r3, [pc, #408]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	f023 020f 	bic.w	r2, r3, #15
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4963      	ldr	r1, [pc, #396]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 800240c:	4313      	orrs	r3, r2
 800240e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80d2 	beq.w	80025c2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d143      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242a:	4b5b      	ldr	r3, [pc, #364]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 800242c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d110      	bne.n	800245a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	4b57      	ldr	r3, [pc, #348]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243e:	4a56      	ldr	r2, [pc, #344]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 8002440:	f043 0304 	orr.w	r3, r3, #4
 8002444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 800244a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002456:	2301      	movs	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800245a:	f7fe fc47 	bl	8000cec <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002460:	4b4e      	ldr	r3, [pc, #312]	; (800259c <HAL_RCC_ClockConfig+0x28c>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00f      	beq.n	800248c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800246e:	f7fe fc3d 	bl	8000cec <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e12b      	b.n	80026d8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002480:	4b46      	ldr	r3, [pc, #280]	; (800259c <HAL_RCC_ClockConfig+0x28c>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 8002494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002498:	4a3f      	ldr	r2, [pc, #252]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 800249a:	f023 0304 	bic.w	r3, r3, #4
 800249e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d121      	bne.n	80024f2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e112      	b.n	80026d8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ba:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d115      	bne.n	80024f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e106      	b.n	80026d8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80024d2:	4b31      	ldr	r3, [pc, #196]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0fa      	b.n	80026d8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e2:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0f2      	b.n	80026d8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f023 0203 	bic.w	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4926      	ldr	r1, [pc, #152]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 8002500:	4313      	orrs	r3, r2
 8002502:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002504:	f7fe fbf2 	bl	8000cec <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d112      	bne.n	8002538 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002512:	e00a      	b.n	800252a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002514:	f7fe fbea 	bl	8000cec <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e0d6      	b.n	80026d8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d1ee      	bne.n	8002514 <HAL_RCC_ClockConfig+0x204>
 8002536:	e044      	b.n	80025c2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d112      	bne.n	8002566 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002542:	f7fe fbd3 	bl	8000cec <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e0bf      	b.n	80026d8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d1ee      	bne.n	8002542 <HAL_RCC_ClockConfig+0x232>
 8002564:	e02d      	b.n	80025c2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d123      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe fbbc 	bl	8000cec <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e0a8      	b.n	80026d8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <HAL_RCC_ClockConfig+0x288>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ee      	bne.n	8002570 <HAL_RCC_ClockConfig+0x260>
 8002592:	e016      	b.n	80025c2 <HAL_RCC_ClockConfig+0x2b2>
 8002594:	40022000 	.word	0x40022000
 8002598:	46020c00 	.word	0x46020c00
 800259c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a0:	f7fe fba4 	bl	8000cec <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e090      	b.n	80026d8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b6:	4b4a      	ldr	r3, [pc, #296]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d1ee      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d010      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	429a      	cmp	r2, r3
 80025dc:	d208      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80025de:	4b40      	ldr	r3, [pc, #256]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	f023 020f 	bic.w	r2, r3, #15
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	493d      	ldr	r1, [pc, #244]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f0:	4b3c      	ldr	r3, [pc, #240]	; (80026e4 <HAL_RCC_ClockConfig+0x3d4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d210      	bcs.n	8002620 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <HAL_RCC_ClockConfig+0x3d4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 020f 	bic.w	r2, r3, #15
 8002606:	4937      	ldr	r1, [pc, #220]	; (80026e4 <HAL_RCC_ClockConfig+0x3d4>)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <HAL_RCC_ClockConfig+0x3d4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e05b      	b.n	80026d8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d010      	beq.n	800264e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002638:	429a      	cmp	r2, r3
 800263a:	d208      	bcs.n	800264e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800263c:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4925      	ldr	r1, [pc, #148]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 800264a:	4313      	orrs	r3, r2
 800264c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d012      	beq.n	8002680 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002668:	429a      	cmp	r2, r3
 800266a:	d209      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	4919      	ldr	r1, [pc, #100]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 800267c:	4313      	orrs	r3, r2
 800267e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d010      	beq.n	80026ae <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002698:	429a      	cmp	r2, r3
 800269a:	d208      	bcs.n	80026ae <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800269c:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	490d      	ldr	r1, [pc, #52]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80026ae:	f000 f821 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80026b2:	4602      	mov	r2, r0
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_RCC_ClockConfig+0x3d0>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	490a      	ldr	r1, [pc, #40]	; (80026e8 <HAL_RCC_ClockConfig+0x3d8>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
 80026c4:	4a09      	ldr	r2, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x3dc>)
 80026c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_ClockConfig+0x3e0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe f9c3 	bl	8000a58 <HAL_InitTick>
 80026d2:	4603      	mov	r3, r0
 80026d4:	73fb      	strb	r3, [r7, #15]

  return status;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	46020c00 	.word	0x46020c00
 80026e4:	40022000 	.word	0x40022000
 80026e8:	080066a4 	.word	0x080066a4
 80026ec:	20000010 	.word	0x20000010
 80026f0:	20000014 	.word	0x20000014

080026f4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b08b      	sub	sp, #44	; 0x2c
 80026f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002702:	4b7b      	ldr	r3, [pc, #492]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800270c:	4b78      	ldr	r3, [pc, #480]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x34>
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b0c      	cmp	r3, #12
 8002720:	d121      	bne.n	8002766 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d11e      	bne.n	8002766 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8002728:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002734:	4b6e      	ldr	r3, [pc, #440]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800273a:	0b1b      	lsrs	r3, r3, #12
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
 8002742:	e005      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002744:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	0f1b      	lsrs	r3, r3, #28
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002750:	4a68      	ldr	r2, [pc, #416]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002758:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d110      	bne.n	8002782 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002764:	e00d      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002766:	4b62      	ldr	r3, [pc, #392]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b04      	cmp	r3, #4
 8002770:	d102      	bne.n	8002778 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002772:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002774:	623b      	str	r3, [r7, #32]
 8002776:	e004      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b08      	cmp	r3, #8
 800277c:	d101      	bne.n	8002782 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800277e:	4b5e      	ldr	r3, [pc, #376]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002780:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b0c      	cmp	r3, #12
 8002786:	f040 80ac 	bne.w	80028e2 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800278a:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002794:	4b56      	ldr	r3, [pc, #344]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	3301      	adds	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80027a2:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80027ae:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	08db      	lsrs	r3, r3, #3
 80027b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8086 	beq.w	80028de <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d003      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0xec>
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d022      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x130>
 80027de:	e043      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ea:	eddf 6a44 	vldr	s13, [pc, #272]	; 80028fc <HAL_RCC_GetSysClockFreq+0x208>
 80027ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027f2:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002802:	ed97 6a01 	vldr	s12, [r7, #4]
 8002806:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002900 <HAL_RCC_GetSysClockFreq+0x20c>
 800280a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800280e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002816:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002822:	e046      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282e:	eddf 6a33 	vldr	s13, [pc, #204]	; 80028fc <HAL_RCC_GetSysClockFreq+0x208>
 8002832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002836:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002846:	ed97 6a01 	vldr	s12, [r7, #4]
 800284a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002900 <HAL_RCC_GetSysClockFreq+0x20c>
 800284e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002852:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800285a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800285e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002862:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002866:	e024      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	ee07 3a90 	vmov	s15, r3
 8002878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002890:	ed97 6a01 	vldr	s12, [r7, #4]
 8002894:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002900 <HAL_RCC_GetSysClockFreq+0x20c>
 8002898:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800289c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80028a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ac:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80028b0:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80028b2:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b6:	0e1b      	lsrs	r3, r3, #24
 80028b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028bc:	3301      	adds	r3, #1
 80028be:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80028ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028d6:	ee17 3a90 	vmov	r3, s15
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	e001      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80028e2:	6a3b      	ldr	r3, [r7, #32]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	372c      	adds	r7, #44	; 0x2c
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	46020c00 	.word	0x46020c00
 80028f4:	080066bc 	.word	0x080066bc
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	4b742400 	.word	0x4b742400
 8002900:	46000000 	.word	0x46000000

08002904 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002908:	f7ff fef4 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <HAL_RCC_GetHCLKFreq+0x28>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	4906      	ldr	r1, [pc, #24]	; (8002930 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002918:	5ccb      	ldrb	r3, [r1, r3]
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <HAL_RCC_GetHCLKFreq+0x30>)
 8002920:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_RCC_GetHCLKFreq+0x30>)
 8002924:	681b      	ldr	r3, [r3, #0]
}
 8002926:	4618      	mov	r0, r3
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	46020c00 	.word	0x46020c00
 8002930:	080066a4 	.word	0x080066a4
 8002934:	20000010 	.word	0x20000010

08002938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800293c:	f7ff ffe2 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4903      	ldr	r1, [pc, #12]	; (800295c <HAL_RCC_GetPCLK1Freq+0x24>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	46020c00 	.word	0x46020c00
 800295c:	080066b4 	.word	0x080066b4

08002960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002964:	f7ff ffce 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4903      	ldr	r1, [pc, #12]	; (8002984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	46020c00 	.word	0x46020c00
 8002984:	080066b4 	.word	0x080066b4

08002988 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800298c:	f7ff ffba 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4903      	ldr	r1, [pc, #12]	; (80029ac <HAL_RCC_GetPCLK3Freq+0x24>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	46020c00 	.word	0x46020c00
 80029ac:	080066b4 	.word	0x080066b4

080029b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	221f      	movs	r2, #31
 80029be:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80029c0:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <HAL_RCC_GetClockConfig+0x68>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f003 0203 	and.w	r2, r3, #3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCC_GetClockConfig+0x68>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f003 020f 	and.w	r2, r3, #15
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <HAL_RCC_GetClockConfig+0x68>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_RCC_GetClockConfig+0x68>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_GetClockConfig+0x68>)
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_RCC_GetClockConfig+0x6c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 020f 	and.w	r2, r3, #15
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	601a      	str	r2, [r3, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	46020c00 	.word	0x46020c00
 8002a1c:	40022000 	.word	0x40022000

08002a20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a28:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a36:	f7fe fd17 	bl	8001468 <HAL_PWREx_GetVoltageRange>
 8002a3a:	6178      	str	r0, [r7, #20]
 8002a3c:	e019      	b.n	8002a72 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	4b39      	ldr	r3, [pc, #228]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a44:	4a37      	ldr	r2, [pc, #220]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002a4e:	4b35      	ldr	r3, [pc, #212]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a5c:	f7fe fd04 	bl	8001468 <HAL_PWREx_GetVoltageRange>
 8002a60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a62:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a68:	4a2e      	ldr	r2, [pc, #184]	; (8002b24 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002a6a:	f023 0304 	bic.w	r3, r3, #4
 8002a6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a78:	d003      	beq.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a80:	d109      	bne.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a88:	d202      	bcs.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002a8e:	e033      	b.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002a94:	e030      	b.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a9c:	d208      	bcs.n	8002ab0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa4:	d102      	bne.n	8002aac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	e025      	b.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e035      	b.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ab6:	d90f      	bls.n	8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ac4:	d902      	bls.n	8002acc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	e015      	b.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002acc:	2301      	movs	r3, #1
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	e012      	b.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	e00f      	b.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ade:	d109      	bne.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae6:	d102      	bne.n	8002aee <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002ae8:	2301      	movs	r3, #1
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	e004      	b.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002aee:	2302      	movs	r3, #2
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	e001      	b.n	8002af8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002af4:	2301      	movs	r3, #1
 8002af6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 020f 	bic.w	r2, r3, #15
 8002b00:	4909      	ldr	r1, [pc, #36]	; (8002b28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002b08:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d001      	beq.n	8002b1a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	46020c00 	.word	0x46020c00
 8002b28:	40022000 	.word	0x40022000

08002b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b30:	b0ba      	sub	sp, #232	; 0xe8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f002 0401 	and.w	r4, r2, #1
 8002b50:	2500      	movs	r5, #0
 8002b52:	ea54 0305 	orrs.w	r3, r4, r5
 8002b56:	d00b      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002b58:	4bcb      	ldr	r3, [pc, #812]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5e:	f023 0103 	bic.w	r1, r3, #3
 8002b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b68:	4ac7      	ldr	r2, [pc, #796]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f002 0802 	and.w	r8, r2, #2
 8002b7c:	f04f 0900 	mov.w	r9, #0
 8002b80:	ea58 0309 	orrs.w	r3, r8, r9
 8002b84:	d00b      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002b86:	4bc0      	ldr	r3, [pc, #768]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b8c:	f023 010c 	bic.w	r1, r3, #12
 8002b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	4abc      	ldr	r2, [pc, #752]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba6:	f002 0a04 	and.w	sl, r2, #4
 8002baa:	f04f 0b00 	mov.w	fp, #0
 8002bae:	ea5a 030b 	orrs.w	r3, sl, fp
 8002bb2:	d00b      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002bb4:	4bb4      	ldr	r3, [pc, #720]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bba:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002bbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	4ab0      	ldr	r2, [pc, #704]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f002 0308 	and.w	r3, r2, #8
 8002bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002be2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002be6:	460b      	mov	r3, r1
 8002be8:	4313      	orrs	r3, r2
 8002bea:	d00b      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002bec:	4ba6      	ldr	r3, [pc, #664]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfc:	4aa2      	ldr	r2, [pc, #648]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	f002 0310 	and.w	r3, r2, #16
 8002c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4313      	orrs	r3, r2
 8002c22:	d00b      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002c24:	4b98      	ldr	r3, [pc, #608]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	4a94      	ldr	r2, [pc, #592]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c36:	430b      	orrs	r3, r1
 8002c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f002 0320 	and.w	r3, r2, #32
 8002c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002c56:	460b      	mov	r3, r1
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002c5c:	4b8a      	ldr	r3, [pc, #552]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c62:	f023 0107 	bic.w	r1, r3, #7
 8002c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c6c:	4a86      	ldr	r2, [pc, #536]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4313      	orrs	r3, r2
 8002c92:	d00b      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002c94:	4b7c      	ldr	r3, [pc, #496]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ca4:	4a78      	ldr	r2, [pc, #480]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cc2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002ccc:	4b6e      	ldr	r3, [pc, #440]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cdc:	4a6a      	ldr	r2, [pc, #424]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ce4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002cfa:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4313      	orrs	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002d04:	4b60      	ldr	r3, [pc, #384]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	4a5c      	ldr	r2, [pc, #368]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d16:	430b      	orrs	r3, r1
 8002d18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d32:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002d36:	460b      	mov	r3, r1
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	d00b      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002d3c:	4b52      	ldr	r3, [pc, #328]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d42:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4c:	4a4e      	ldr	r2, [pc, #312]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002d60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4313      	orrs	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002d74:	4b44      	ldr	r3, [pc, #272]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d7a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002d7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d84:	4a40      	ldr	r2, [pc, #256]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d86:	430b      	orrs	r3, r1
 8002d88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002da2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002da6:	460b      	mov	r3, r1
 8002da8:	4313      	orrs	r3, r2
 8002daa:	d00b      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002dac:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dbc:	4a32      	ldr	r2, [pc, #200]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002dc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dda:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002dde:	460b      	mov	r3, r1
 8002de0:	4313      	orrs	r3, r2
 8002de2:	d00c      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002de4:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df6:	4a24      	ldr	r2, [pc, #144]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002e0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e10:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002e14:	460b      	mov	r3, r1
 8002e16:	4313      	orrs	r3, r2
 8002e18:	d04f      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	2b80      	cmp	r3, #128	; 0x80
 8002e24:	d02d      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002e26:	2b80      	cmp	r3, #128	; 0x80
 8002e28:	d827      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002e2a:	2b60      	cmp	r3, #96	; 0x60
 8002e2c:	d02e      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002e2e:	2b60      	cmp	r3, #96	; 0x60
 8002e30:	d823      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002e32:	2b40      	cmp	r3, #64	; 0x40
 8002e34:	d006      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d81f      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d011      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002e42:	e01a      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	4a0f      	ldr	r2, [pc, #60]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e50:	e01d      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e56:	3308      	adds	r3, #8
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f002 f981 	bl	8005160 <RCCEx_PLL2_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e64:	e013      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e6a:	332c      	adds	r3, #44	; 0x2c
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 fa0f 	bl	8005290 <RCCEx_PLL3_Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e78:	e009      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002e80:	e005      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8002e82:	bf00      	nop
 8002e84:	e003      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002e86:	bf00      	nop
 8002e88:	46020c00 	.word	0x46020c00
        break;
 8002e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10d      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002e96:	4bb6      	ldr	r3, [pc, #728]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002e98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e9c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8002ea0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	4ab1      	ldr	r2, [pc, #708]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002eb0:	e003      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002eb6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002ec6:	673b      	str	r3, [r7, #112]	; 0x70
 8002ec8:	2300      	movs	r3, #0
 8002eca:	677b      	str	r3, [r7, #116]	; 0x74
 8002ecc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	d053      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee2:	d033      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee8:	d82c      	bhi.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eee:	d02f      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ef4:	d826      	bhi.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002efa:	d008      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f00:	d820      	bhi.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8002f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f0a:	d011      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002f0c:	e01a      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f0e:	4b98      	ldr	r3, [pc, #608]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	4a97      	ldr	r2, [pc, #604]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002f1a:	e01a      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f20:	3308      	adds	r3, #8
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 f91c 	bl	8005160 <RCCEx_PLL2_Config>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002f2e:	e010      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f34:	332c      	adds	r3, #44	; 0x2c
 8002f36:	4618      	mov	r0, r3
 8002f38:	f002 f9aa 	bl	8005290 <RCCEx_PLL3_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002f42:	e006      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002f4a:	e002      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8002f4c:	bf00      	nop
 8002f4e:	e000      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8002f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f52:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10d      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002f5a:	4b85      	ldr	r3, [pc, #532]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f60:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002f64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6c:	4a80      	ldr	r2, [pc, #512]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002f74:	e003      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f76:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002f7a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f90:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002f94:	460b      	mov	r3, r1
 8002f96:	4313      	orrs	r3, r2
 8002f98:	d046      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fa2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002fa6:	d028      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002fa8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002fac:	d821      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb2:	d022      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb8:	d81b      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002fba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fbe:	d01c      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002fc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fc4:	d815      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fca:	d008      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd0:	d80f      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d011      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fda:	d00e      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002fdc:	e009      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 f8bb 	bl	8005160 <RCCEx_PLL2_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002ff0:	e004      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002ff8:	e000      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8002ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ffc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10d      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003004:	4b5a      	ldr	r3, [pc, #360]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003006:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800300a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800300e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003016:	4a56      	ldr	r2, [pc, #344]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003018:	430b      	orrs	r3, r1
 800301a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800301e:	e003      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003020:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003024:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003028:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003034:	663b      	str	r3, [r7, #96]	; 0x60
 8003036:	2300      	movs	r3, #0
 8003038:	667b      	str	r3, [r7, #100]	; 0x64
 800303a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800303e:	460b      	mov	r3, r1
 8003040:	4313      	orrs	r3, r2
 8003042:	d03f      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003044:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304c:	2b04      	cmp	r3, #4
 800304e:	d81e      	bhi.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003050:	a201      	add	r2, pc, #4	; (adr r2, 8003058 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8003052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003056:	bf00      	nop
 8003058:	08003097 	.word	0x08003097
 800305c:	0800306d 	.word	0x0800306d
 8003060:	0800307b 	.word	0x0800307b
 8003064:	08003097 	.word	0x08003097
 8003068:	08003097 	.word	0x08003097
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800306c:	4b40      	ldr	r3, [pc, #256]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	4a3f      	ldr	r2, [pc, #252]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003076:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003078:	e00e      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800307a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800307e:	332c      	adds	r3, #44	; 0x2c
 8003080:	4618      	mov	r0, r3
 8003082:	f002 f905 	bl	8005290 <RCCEx_PLL3_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800308c:	e004      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003094:	e000      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8003096:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003098:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10d      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80030a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030a6:	f023 0107 	bic.w	r1, r3, #7
 80030aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b2:	4a2f      	ldr	r2, [pc, #188]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80030b4:	430b      	orrs	r3, r1
 80030b6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80030ba:	e003      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80030c0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80030c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80030d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80030d2:	2300      	movs	r3, #0
 80030d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80030da:	460b      	mov	r3, r1
 80030dc:	4313      	orrs	r3, r2
 80030de:	d04d      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80030e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030ec:	d028      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80030ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030f2:	d821      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80030f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030f8:	d024      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80030fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030fe:	d81b      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003104:	d00e      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003106:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800310a:	d815      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01b      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d110      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	4a15      	ldr	r2, [pc, #84]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003122:	e012      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003128:	332c      	adds	r3, #44	; 0x2c
 800312a:	4618      	mov	r0, r3
 800312c:	f002 f8b0 	bl	8005290 <RCCEx_PLL3_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003136:	e008      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800313e:	e004      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003140:	bf00      	nop
 8003142:	e002      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003144:	bf00      	nop
 8003146:	e000      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003148:	bf00      	nop
    }
    if (ret == HAL_OK)
 800314a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d110      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003158:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800315c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003164:	4a02      	ldr	r2, [pc, #8]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003166:	430b      	orrs	r3, r1
 8003168:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800316c:	e006      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x650>
 800316e:	bf00      	nop
 8003170:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003178:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800317c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003188:	653b      	str	r3, [r7, #80]	; 0x50
 800318a:	2300      	movs	r3, #0
 800318c:	657b      	str	r3, [r7, #84]	; 0x54
 800318e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003192:	460b      	mov	r3, r1
 8003194:	4313      	orrs	r3, r2
 8003196:	f000 80b5 	beq.w	8003304 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319a:	2300      	movs	r3, #0
 800319c:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a0:	4b9d      	ldr	r3, [pc, #628]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d113      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ae:	4b9a      	ldr	r3, [pc, #616]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b4:	4a98      	ldr	r2, [pc, #608]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031b6:	f043 0304 	orr.w	r3, r3, #4
 80031ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80031be:	4b96      	ldr	r3, [pc, #600]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80031d6:	4b91      	ldr	r3, [pc, #580]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	4a90      	ldr	r2, [pc, #576]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031e2:	f7fd fd83 	bl	8000cec <HAL_GetTick>
 80031e6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80031ea:	e00b      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ec:	f7fd fd7e 	bl	8000cec <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d903      	bls.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003202:	e005      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003204:	4b85      	ldr	r3, [pc, #532]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ed      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8003210:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d165      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003218:	4b7f      	ldr	r3, [pc, #508]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800321a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800321e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d023      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800322e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003232:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323a:	4293      	cmp	r3, r2
 800323c:	d01b      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800323e:	4b76      	ldr	r3, [pc, #472]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003248:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800324c:	4b72      	ldr	r3, [pc, #456]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800324e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003252:	4a71      	ldr	r2, [pc, #452]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800325c:	4b6e      	ldr	r3, [pc, #440]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800325e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003262:	4a6d      	ldr	r2, [pc, #436]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003268:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800326c:	4a6a      	ldr	r2, [pc, #424]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003272:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d019      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fd fd33 	bl	8000cec <HAL_GetTick>
 8003286:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328a:	e00d      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fd fd2e 	bl	8000cec <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003296:	1ad2      	subs	r2, r2, r3
 8003298:	f241 3388 	movw	r3, #5000	; 0x1388
 800329c:	429a      	cmp	r2, r3
 800329e:	d903      	bls.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 80032a6:	e006      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a8:	4b5b      	ldr	r3, [pc, #364]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0ea      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 80032b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10d      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80032be:	4b56      	ldr	r3, [pc, #344]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032d0:	4a51      	ldr	r2, [pc, #324]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032d2:	430b      	orrs	r3, r1
 80032d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032d8:	e008      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032da:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80032de:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80032e2:	e003      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80032e8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032ec:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d107      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f4:	4b48      	ldr	r3, [pc, #288]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fa:	4a47      	ldr	r2, [pc, #284]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80032fc:	f023 0304 	bic.w	r3, r3, #4
 8003300:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003304:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003310:	64bb      	str	r3, [r7, #72]	; 0x48
 8003312:	2300      	movs	r3, #0
 8003314:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003316:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800331a:	460b      	mov	r3, r1
 800331c:	4313      	orrs	r3, r2
 800331e:	d042      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003324:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003328:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800332c:	d022      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800332e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003332:	d81b      	bhi.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003334:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003338:	d011      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x832>
 800333a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800333e:	d815      	bhi.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d019      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8003344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003348:	d110      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800334a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800334e:	3308      	adds	r3, #8
 8003350:	4618      	mov	r0, r3
 8003352:	f001 ff05 	bl	8005160 <RCCEx_PLL2_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800335c:	e00d      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800335e:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	4a2d      	ldr	r2, [pc, #180]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003368:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800336a:	e006      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003372:	e002      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8003374:	bf00      	nop
 8003376:	e000      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8003378:	bf00      	nop
    }
    if (ret == HAL_OK)
 800337a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10d      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003382:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003388:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800338c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003394:	4a20      	ldr	r2, [pc, #128]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003396:	430b      	orrs	r3, r1
 8003398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80033a2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80033b2:	643b      	str	r3, [r7, #64]	; 0x40
 80033b4:	2300      	movs	r3, #0
 80033b6:	647b      	str	r3, [r7, #68]	; 0x44
 80033b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80033bc:	460b      	mov	r3, r1
 80033be:	4313      	orrs	r3, r2
 80033c0:	d032      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80033c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ce:	d00b      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80033d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d4:	d804      	bhi.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80033da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033de:	d007      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80033e6:	e004      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80033e8:	bf00      	nop
 80033ea:	e002      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80033ec:	bf00      	nop
 80033ee:	e000      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80033f0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80033f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d112      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80033fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003400:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800340c:	4a02      	ldr	r2, [pc, #8]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800340e:	430b      	orrs	r3, r1
 8003410:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003414:	e008      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8003416:	bf00      	nop
 8003418:	46020c00 	.word	0x46020c00
 800341c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003420:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003424:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003428:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003434:	63bb      	str	r3, [r7, #56]	; 0x38
 8003436:	2300      	movs	r3, #0
 8003438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800343a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800343e:	460b      	mov	r3, r1
 8003440:	4313      	orrs	r3, r2
 8003442:	d00c      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003444:	4b98      	ldr	r3, [pc, #608]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003446:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800344a:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800344e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003456:	4a94      	ldr	r2, [pc, #592]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003458:	430b      	orrs	r3, r1
 800345a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800345e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800346a:	633b      	str	r3, [r7, #48]	; 0x30
 800346c:	2300      	movs	r3, #0
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
 8003470:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003474:	460b      	mov	r3, r1
 8003476:	4313      	orrs	r3, r2
 8003478:	d019      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800347a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800347e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003486:	d105      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003488:	4b87      	ldr	r3, [pc, #540]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	4a86      	ldr	r2, [pc, #536]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800348e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003492:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003494:	4b84      	ldr	r3, [pc, #528]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003496:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800349a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800349e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034a6:	4a80      	ldr	r2, [pc, #512]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034a8:	430b      	orrs	r3, r1
 80034aa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80034ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80034bc:	2300      	movs	r3, #0
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80034c4:	460b      	mov	r3, r1
 80034c6:	4313      	orrs	r3, r2
 80034c8:	d00c      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80034ca:	4b77      	ldr	r3, [pc, #476]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034dc:	4972      	ldr	r1, [pc, #456]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80034e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80034f0:	623b      	str	r3, [r7, #32]
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
 80034f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80034fa:	460b      	mov	r3, r1
 80034fc:	4313      	orrs	r3, r2
 80034fe:	d00c      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003500:	4b69      	ldr	r3, [pc, #420]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003506:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800350a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800350e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003512:	4965      	ldr	r1, [pc, #404]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800351a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003526:	61bb      	str	r3, [r7, #24]
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003530:	460b      	mov	r3, r1
 8003532:	4313      	orrs	r3, r2
 8003534:	d00c      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003536:	4b5c      	ldr	r3, [pc, #368]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800353c:	f023 0218 	bic.w	r2, r3, #24
 8003540:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003544:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003548:	4957      	ldr	r1, [pc, #348]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003550:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003566:	460b      	mov	r3, r1
 8003568:	4313      	orrs	r3, r2
 800356a:	d032      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800356c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003570:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003578:	d105      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800357a:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	4a4a      	ldr	r2, [pc, #296]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003584:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800358a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800358e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003592:	d108      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003598:	3308      	adds	r3, #8
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fde0 	bl	8005160 <RCCEx_PLL2_Config>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80035a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10d      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80035ae:	4b3e      	ldr	r3, [pc, #248]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80035b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80035b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035c0:	4939      	ldr	r1, [pc, #228]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80035c8:	e003      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80035ce:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80035d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80035e8:	460b      	mov	r3, r1
 80035ea:	4313      	orrs	r3, r2
 80035ec:	d03a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80035ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035fa:	d00e      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80035fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003600:	d815      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d017      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003606:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800360a:	d110      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360c:	4b26      	ldr	r3, [pc, #152]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	4a25      	ldr	r2, [pc, #148]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003616:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003618:	e00e      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800361a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800361e:	3308      	adds	r3, #8
 8003620:	4618      	mov	r0, r3
 8003622:	f001 fd9d 	bl	8005160 <RCCEx_PLL2_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800362c:	e004      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003634:	e000      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8003636:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003638:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10d      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003646:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800364a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800364e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003652:	4915      	ldr	r1, [pc, #84]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800365a:	e003      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003660:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	e9d7 1200 	ldrd	r1, r2, [r7]
 800367a:	460b      	mov	r3, r1
 800367c:	4313      	orrs	r3, r2
 800367e:	d00c      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003686:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800368a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800368e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003692:	4905      	ldr	r1, [pc, #20]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800369a:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800369e:	4618      	mov	r0, r3
 80036a0:	37e8      	adds	r7, #232	; 0xe8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036a8:	46020c00 	.word	0x46020c00

080036ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b089      	sub	sp, #36	; 0x24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80036b4:	4bac      	ldr	r3, [pc, #688]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036bc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80036be:	4baa      	ldr	r3, [pc, #680]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80036c8:	4ba7      	ldr	r3, [pc, #668]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	3301      	adds	r3, #1
 80036d4:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80036d6:	4ba4      	ldr	r3, [pc, #656]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80036e0:	4ba1      	ldr	r3, [pc, #644]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	08db      	lsrs	r3, r3, #3
 80036e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8123 	beq.w	800394a <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d062      	beq.n	80037d0 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b03      	cmp	r3, #3
 800370e:	f200 8081 	bhi.w	8003814 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d024      	beq.n	8003762 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d17a      	bne.n	8003814 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	ee07 3a90 	vmov	s15, r3
 8003724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003728:	eddf 6a90 	vldr	s13, [pc, #576]	; 800396c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800372c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003730:	4b8d      	ldr	r3, [pc, #564]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003740:	ed97 6a02 	vldr	s12, [r7, #8]
 8003744:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003970 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003748:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800374c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003754:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003760:	e08f      	b.n	8003882 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003762:	4b81      	ldr	r3, [pc, #516]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800376e:	4b7e      	ldr	r3, [pc, #504]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0f1b      	lsrs	r3, r3, #28
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	e006      	b.n	8003788 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800377a:	4b7b      	ldr	r3, [pc, #492]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800377c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003780:	041b      	lsls	r3, r3, #16
 8003782:	0f1b      	lsrs	r3, r3, #28
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	4a7a      	ldr	r2, [pc, #488]	; (8003974 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800378a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	ee07 3a90 	vmov	s15, r3
 800379c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80037b2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003970 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80037b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80037c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037ce:	e058      	b.n	8003882 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037da:	eddf 6a64 	vldr	s13, [pc, #400]	; 800396c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80037de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e2:	4b61      	ldr	r3, [pc, #388]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80037e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80037f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037f6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003970 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80037fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003806:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800380a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003812:	e036      	b.n	8003882 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003814:	4b54      	ldr	r3, [pc, #336]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8003820:	4b51      	ldr	r3, [pc, #324]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	0f1b      	lsrs	r3, r3, #28
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	e006      	b.n	800383a <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 800382c:	4b4e      	ldr	r3, [pc, #312]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800382e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	0f1b      	lsrs	r3, r3, #28
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	4a4e      	ldr	r2, [pc, #312]	; (8003974 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800383c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	ee07 3a90 	vmov	s15, r3
 800385c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003860:	ed97 6a02 	vldr	s12, [r7, #8]
 8003864:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003970 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003868:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003870:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003874:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003880:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003882:	4b39      	ldr	r3, [pc, #228]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d017      	beq.n	80038be <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800388e:	4b36      	ldr	r3, [pc, #216]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003892:	0a5b      	lsrs	r3, r3, #9
 8003894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003898:	ee07 3a90 	vmov	s15, r3
 800389c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80038a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038a4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80038a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038b4:	ee17 2a90 	vmov	r2, s15
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	e002      	b.n	80038c4 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80038c4:	4b28      	ldr	r3, [pc, #160]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d017      	beq.n	8003900 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80038e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038e6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80038ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80038ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f6:	ee17 2a90 	vmov	r2, s15
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	e002      	b.n	8003906 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003906:	4b18      	ldr	r3, [pc, #96]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d017      	beq.n	8003942 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003916:	0e1b      	lsrs	r3, r3, #24
 8003918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003928:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800392c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003938:	ee17 2a90 	vmov	r2, s15
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003940:	e00c      	b.n	800395c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	609a      	str	r2, [r3, #8]
}
 8003948:	e008      	b.n	800395c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	3724      	adds	r7, #36	; 0x24
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	46020c00 	.word	0x46020c00
 800396c:	4b742400 	.word	0x4b742400
 8003970:	46000000 	.word	0x46000000
 8003974:	080066bc 	.word	0x080066bc

08003978 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	; 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003980:	4bac      	ldr	r3, [pc, #688]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003988:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800398a:	4baa      	ldr	r3, [pc, #680]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003994:	4ba7      	ldr	r3, [pc, #668]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	0a1b      	lsrs	r3, r3, #8
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	3301      	adds	r3, #1
 80039a0:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80039a2:	4ba4      	ldr	r3, [pc, #656]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80039ac:	4ba1      	ldr	r3, [pc, #644]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	08db      	lsrs	r3, r3, #3
 80039b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	fb02 f303 	mul.w	r3, r2, r3
 80039bc:	ee07 3a90 	vmov	s15, r3
 80039c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8123 	beq.w	8003c16 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d062      	beq.n	8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	f200 8081 	bhi.w	8003ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d024      	beq.n	8003a2e <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d17a      	bne.n	8003ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	ee07 3a90 	vmov	s15, r3
 80039f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80039f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fc:	4b8d      	ldr	r3, [pc, #564]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a04:	ee07 3a90 	vmov	s15, r3
 8003a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a10:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003a14:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a2c:	e08f      	b.n	8003b4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003a2e:	4b81      	ldr	r3, [pc, #516]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8003a3a:	4b7e      	ldr	r3, [pc, #504]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	0f1b      	lsrs	r3, r3, #28
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	e006      	b.n	8003a54 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8003a46:	4b7b      	ldr	r3, [pc, #492]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	0f1b      	lsrs	r3, r3, #28
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	4a7a      	ldr	r2, [pc, #488]	; (8003c40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	ee07 3a90 	vmov	s15, r3
 8003a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a7e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a9a:	e058      	b.n	8003b4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8003aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aae:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ac2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ade:	e036      	b.n	8003b4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003ae0:	4b54      	ldr	r3, [pc, #336]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8003aec:	4b51      	ldr	r3, [pc, #324]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	0f1b      	lsrs	r3, r3, #28
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	e006      	b.n	8003b06 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8003af8:	4b4e      	ldr	r3, [pc, #312]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003afe:	041b      	lsls	r3, r3, #16
 8003b00:	0f1b      	lsrs	r3, r3, #28
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	4a4e      	ldr	r2, [pc, #312]	; (8003c40 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0c:	ee07 3a90 	vmov	s15, r3
 8003b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b30:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003b34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b4c:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003b4e:	4b39      	ldr	r3, [pc, #228]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d017      	beq.n	8003b8a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b5a:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	0a5b      	lsrs	r3, r3, #9
 8003b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b64:	ee07 3a90 	vmov	s15, r3
 8003b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003b6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b70:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b74:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b80:	ee17 2a90 	vmov	r2, s15
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e002      	b.n	8003b90 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003b90:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d017      	beq.n	8003bcc <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc2:	ee17 2a90 	vmov	r2, s15
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	e002      	b.n	8003bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003bd2:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d017      	beq.n	8003c0e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bde:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	0e1b      	lsrs	r3, r3, #24
 8003be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be8:	ee07 3a90 	vmov	s15, r3
 8003bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c04:	ee17 2a90 	vmov	r2, s15
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c0c:	e00c      	b.n	8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	609a      	str	r2, [r3, #8]
}
 8003c14:	e008      	b.n	8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	3724      	adds	r7, #36	; 0x24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	46020c00 	.word	0x46020c00
 8003c38:	4b742400 	.word	0x4b742400
 8003c3c:	46000000 	.word	0x46000000
 8003c40:	080066bc 	.word	0x080066bc

08003c44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003c4c:	4bac      	ldr	r3, [pc, #688]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c54:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003c56:	4baa      	ldr	r3, [pc, #680]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003c60:	4ba7      	ldr	r3, [pc, #668]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	0a1b      	lsrs	r3, r3, #8
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8003c6e:	4ba4      	ldr	r3, [pc, #656]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003c78:	4ba1      	ldr	r3, [pc, #644]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7c:	08db      	lsrs	r3, r3, #3
 8003c7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	fb02 f303 	mul.w	r3, r2, r3
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c90:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8123 	beq.w	8003ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d062      	beq.n	8003d68 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	f200 8081 	bhi.w	8003dac <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d024      	beq.n	8003cfa <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d17a      	bne.n	8003dac <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	ee07 3a90 	vmov	s15, r3
 8003cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8003cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc8:	4b8d      	ldr	r3, [pc, #564]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd0:	ee07 3a90 	vmov	s15, r3
 8003cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cdc:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003ce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf4:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8003cf8:	e08f      	b.n	8003e1a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003cfa:	4b81      	ldr	r3, [pc, #516]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8003d06:	4b7e      	ldr	r3, [pc, #504]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	0f1b      	lsrs	r3, r3, #28
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	e006      	b.n	8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8003d12:	4b7b      	ldr	r3, [pc, #492]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d18:	041b      	lsls	r3, r3, #16
 8003d1a:	0f1b      	lsrs	r3, r3, #28
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	4a7a      	ldr	r2, [pc, #488]	; (8003f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	ee07 3a90 	vmov	s15, r3
 8003d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d4a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d66:	e058      	b.n	8003e1a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d72:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003f04 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8003d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7a:	4b61      	ldr	r3, [pc, #388]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d8e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003daa:	e036      	b.n	8003e1a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003dac:	4b54      	ldr	r3, [pc, #336]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8003db8:	4b51      	ldr	r3, [pc, #324]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	0f1b      	lsrs	r3, r3, #28
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	e006      	b.n	8003dd2 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8003dc4:	4b4e      	ldr	r3, [pc, #312]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	0f1b      	lsrs	r3, r3, #28
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	4a4e      	ldr	r2, [pc, #312]	; (8003f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd8:	ee07 3a90 	vmov	s15, r3
 8003ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dfc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003e00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e18:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d017      	beq.n	8003e56 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	0a5b      	lsrs	r3, r3, #9
 8003e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e30:	ee07 3a90 	vmov	s15, r3
 8003e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003e38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e3c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e4c:	ee17 2a90 	vmov	r2, s15
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e002      	b.n	8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003e5c:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d017      	beq.n	8003e98 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003e68:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	0c1b      	lsrs	r3, r3, #16
 8003e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e8e:	ee17 2a90 	vmov	r2, s15
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	e002      	b.n	8003e9e <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003e9e:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d017      	beq.n	8003eda <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	0e1b      	lsrs	r3, r3, #24
 8003eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb4:	ee07 3a90 	vmov	s15, r3
 8003eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003ebc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ec0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ed0:	ee17 2a90 	vmov	r2, s15
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8003ed8:	e00c      	b.n	8003ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	609a      	str	r2, [r3, #8]
}
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	609a      	str	r2, [r3, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	3724      	adds	r7, #36	; 0x24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	46020c00 	.word	0x46020c00
 8003f04:	4b742400 	.word	0x4b742400
 8003f08:	46000000 	.word	0x46000000
 8003f0c:	080066bc 	.word	0x080066bc

08003f10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08e      	sub	sp, #56	; 0x38
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f1e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8003f22:	430b      	orrs	r3, r1
 8003f24:	d145      	bne.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003f26:	4ba7      	ldr	r3, [pc, #668]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f30:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003f32:	4ba4      	ldr	r3, [pc, #656]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d108      	bne.n	8003f52 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f46:	d104      	bne.n	8003f52 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4e:	f001 b8fc 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003f52:	4b9c      	ldr	r3, [pc, #624]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f60:	d114      	bne.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f68:	d110      	bne.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003f6a:	4b96      	ldr	r3, [pc, #600]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f78:	d103      	bne.n	8003f82 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8003f7a:	23fa      	movs	r3, #250	; 0xfa
 8003f7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003f7e:	f001 b8e4 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8003f82:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003f86:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003f88:	f001 b8df 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003f8c:	4b8d      	ldr	r3, [pc, #564]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f98:	d107      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fa0:	d103      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8003fa2:	4b89      	ldr	r3, [pc, #548]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fa6:	f001 b8d0 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
 8003fae:	f001 b8cc 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fb6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	d151      	bne.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003fbe:	4b81      	ldr	r3, [pc, #516]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003fc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fc4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d035      	beq.n	800403c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	2b80      	cmp	r3, #128	; 0x80
 8003fd4:	d841      	bhi.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	2b60      	cmp	r3, #96	; 0x60
 8003fda:	d02a      	beq.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	2b60      	cmp	r3, #96	; 0x60
 8003fe0:	d83b      	bhi.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	d009      	beq.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	2b40      	cmp	r3, #64	; 0x40
 8003fec:	d835      	bhi.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00c      	beq.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d012      	beq.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003ffa:	e02e      	b.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fb53 	bl	80036ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800400a:	f001 b89e 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800400e:	f107 0318 	add.w	r3, r7, #24
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff fcb0 	bl	8003978 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800401c:	f001 b895 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004020:	f107 030c 	add.w	r3, r7, #12
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fe0d 	bl	8003c44 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800402e:	f001 b88c 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004032:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004038:	f001 b887 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800403c:	4b61      	ldr	r3, [pc, #388]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004048:	d103      	bne.n	8004052 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800404a:	4b60      	ldr	r3, [pc, #384]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800404c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800404e:	f001 b87c 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004056:	f001 b878 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800405e:	f001 b874 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004066:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800406a:	430b      	orrs	r3, r1
 800406c:	d158      	bne.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800406e:	4b55      	ldr	r3, [pc, #340]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004070:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004078:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004080:	d03b      	beq.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004088:	d846      	bhi.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004090:	d02e      	beq.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004098:	d83e      	bhi.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a0:	d00b      	beq.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a8:	d836      	bhi.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00d      	beq.n	80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b6:	d012      	beq.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80040b8:	e02e      	b.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80040ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff faf4 	bl	80036ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040c8:	f001 b83f 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040cc:	f107 0318 	add.w	r3, r7, #24
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fc51 	bl	8003978 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040da:	f001 b836 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80040de:	f107 030c 	add.w	r3, r7, #12
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fdae 	bl	8003c44 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040ec:	f001 b82d 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80040f0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040f6:	f001 b828 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040fa:	4b32      	ldr	r3, [pc, #200]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004106:	d103      	bne.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004108:	4b30      	ldr	r3, [pc, #192]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800410c:	f001 b81d 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004114:	f001 b819 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800411c:	f001 b815 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004124:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004128:	430b      	orrs	r3, r1
 800412a:	d126      	bne.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800412c:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800412e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004136:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004138:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004144:	d106      	bne.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	2b00      	cmp	r3, #0
 800414a:	d103      	bne.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800414c:	4b1f      	ldr	r3, [pc, #124]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800414e:	637b      	str	r3, [r7, #52]	; 0x34
 8004150:	f000 bffb 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004154:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004160:	d107      	bne.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004168:	d103      	bne.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800416a:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
 800416e:	f000 bfec 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
 8004176:	f000 bfe8 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800417a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800417e:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8004182:	430b      	orrs	r3, r1
 8004184:	d164      	bne.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004186:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800418c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004190:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004198:	d03d      	beq.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80041a0:	d852      	bhi.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a8:	d014      	beq.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041b0:	d84a      	bhi.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01f      	beq.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041be:	d012      	beq.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80041c0:	e042      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80041c2:	bf00      	nop
 80041c4:	46020c00 	.word	0x46020c00
 80041c8:	0007a120 	.word	0x0007a120
 80041cc:	00f42400 	.word	0x00f42400
 80041d0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80041d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fa67 	bl	80036ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041e2:	f000 bfb2 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041e6:	f107 0318 	add.w	r3, r7, #24
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fbc4 	bl	8003978 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041f4:	f000 bfa9 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80041f8:	4bab      	ldr	r3, [pc, #684]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004204:	d103      	bne.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8004206:	4ba9      	ldr	r3, [pc, #676]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800420a:	f000 bf9e 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004212:	f000 bf9a 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004216:	4ba4      	ldr	r3, [pc, #656]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004222:	4ba1      	ldr	r3, [pc, #644]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	0e1b      	lsrs	r3, r3, #24
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	e006      	b.n	800423c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 800422e:	4b9e      	ldr	r3, [pc, #632]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	0e1b      	lsrs	r3, r3, #24
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	4a9c      	ldr	r2, [pc, #624]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800423e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004244:	f000 bf81 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800424c:	f000 bf7d 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004254:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8004258:	430b      	orrs	r3, r1
 800425a:	d175      	bne.n	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800425c:	4b92      	ldr	r3, [pc, #584]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800425e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004266:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	2b00      	cmp	r3, #0
 800426c:	d15b      	bne.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800426e:	4b8e      	ldr	r3, [pc, #568]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004274:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004278:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004280:	d034      	beq.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004288:	d849      	bhi.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004290:	d00b      	beq.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004298:	d841      	bhi.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	2b00      	cmp	r3, #0
 800429e:	d016      	beq.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a6:	d009      	beq.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 80042a8:	e039      	b.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80042aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff f9fc 	bl	80036ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80042b8:	f000 bf47 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042bc:	f107 0318 	add.w	r3, r7, #24
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff fb59 	bl	8003978 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80042ca:	f000 bf3e 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80042ce:	4b76      	ldr	r3, [pc, #472]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042da:	d103      	bne.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 80042dc:	4b73      	ldr	r3, [pc, #460]	; (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042de:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80042e0:	f000 bf33 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80042e8:	f000 bf2f 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80042ec:	4b6e      	ldr	r3, [pc, #440]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80042f8:	4b6b      	ldr	r3, [pc, #428]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	0e1b      	lsrs	r3, r3, #24
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	e006      	b.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8004304:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	0e1b      	lsrs	r3, r3, #24
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	4a67      	ldr	r2, [pc, #412]	; (80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004318:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800431a:	f000 bf16 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004322:	f000 bf12 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800432c:	d108      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800432e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff f9ba 	bl	80036ac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	637b      	str	r3, [r7, #52]	; 0x34
 800433c:	f000 bf05 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	637b      	str	r3, [r7, #52]	; 0x34
 8004344:	f000 bf01 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800434c:	1e51      	subs	r1, r2, #1
 800434e:	430b      	orrs	r3, r1
 8004350:	d136      	bne.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004352:	4b55      	ldr	r3, [pc, #340]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004364:	f7fe fafc 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8004368:	6378      	str	r0, [r7, #52]	; 0x34
 800436a:	f000 beee 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	2b01      	cmp	r3, #1
 8004372:	d104      	bne.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004374:	f7fe f9be 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8004378:	6378      	str	r0, [r7, #52]	; 0x34
 800437a:	f000 bee6 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800437e:	4b4a      	ldr	r3, [pc, #296]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800438a:	d106      	bne.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	2b02      	cmp	r3, #2
 8004390:	d103      	bne.n	800439a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8004392:	4b48      	ldr	r3, [pc, #288]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004394:	637b      	str	r3, [r7, #52]	; 0x34
 8004396:	f000 bed8 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800439a:	4b43      	ldr	r3, [pc, #268]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800439c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d107      	bne.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d104      	bne.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 80043ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b2:	637b      	str	r3, [r7, #52]	; 0x34
 80043b4:	f000 bec9 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	637b      	str	r3, [r7, #52]	; 0x34
 80043bc:	f000 bec5 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80043c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043c4:	1e91      	subs	r1, r2, #2
 80043c6:	430b      	orrs	r3, r1
 80043c8:	d136      	bne.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80043ca:	4b37      	ldr	r3, [pc, #220]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80043cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043d0:	f003 030c 	and.w	r3, r3, #12
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80043dc:	f7fe faac 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 80043e0:	6378      	str	r0, [r7, #52]	; 0x34
 80043e2:	f000 beb2 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d104      	bne.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80043ec:	f7fe f982 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80043f0:	6378      	str	r0, [r7, #52]	; 0x34
 80043f2:	f000 beaa 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80043f6:	4b2c      	ldr	r3, [pc, #176]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004402:	d106      	bne.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	2b08      	cmp	r3, #8
 8004408:	d103      	bne.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800440a:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
 800440e:	f000 be9c 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004412:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b02      	cmp	r3, #2
 800441e:	d107      	bne.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	2b0c      	cmp	r3, #12
 8004424:	d104      	bne.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8004426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
 800442c:	f000 be8d 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	637b      	str	r3, [r7, #52]	; 0x34
 8004434:	f000 be89 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800443c:	1f11      	subs	r1, r2, #4
 800443e:	430b      	orrs	r3, r1
 8004440:	d13e      	bne.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004442:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800444c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004454:	f7fe fa70 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 8004458:	6378      	str	r0, [r7, #52]	; 0x34
 800445a:	f000 be76 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	2b10      	cmp	r3, #16
 8004462:	d104      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004464:	f7fe f946 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8004468:	6378      	str	r0, [r7, #52]	; 0x34
 800446a:	f000 be6e 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800446e:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447a:	d106      	bne.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	2b20      	cmp	r3, #32
 8004480:	d103      	bne.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8004482:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004484:	637b      	str	r3, [r7, #52]	; 0x34
 8004486:	f000 be60 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800448a:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800448c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b02      	cmp	r3, #2
 8004496:	d10f      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	2b30      	cmp	r3, #48	; 0x30
 800449c:	d10c      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800449e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a2:	637b      	str	r3, [r7, #52]	; 0x34
 80044a4:	f000 be51 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80044a8:	46020c00 	.word	0x46020c00
 80044ac:	02dc6c00 	.word	0x02dc6c00
 80044b0:	080066bc 	.word	0x080066bc
 80044b4:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	637b      	str	r3, [r7, #52]	; 0x34
 80044bc:	f000 be45 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80044c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044c4:	f1a2 0108 	sub.w	r1, r2, #8
 80044c8:	430b      	orrs	r3, r1
 80044ca:	d136      	bne.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80044cc:	4b9f      	ldr	r3, [pc, #636]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80044ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80044de:	f7fe fa2b 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 80044e2:	6378      	str	r0, [r7, #52]	; 0x34
 80044e4:	f000 be31 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	2b40      	cmp	r3, #64	; 0x40
 80044ec:	d104      	bne.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80044ee:	f7fe f901 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80044f2:	6378      	str	r0, [r7, #52]	; 0x34
 80044f4:	f000 be29 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80044f8:	4b94      	ldr	r3, [pc, #592]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004504:	d106      	bne.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	2b80      	cmp	r3, #128	; 0x80
 800450a:	d103      	bne.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 800450c:	4b90      	ldr	r3, [pc, #576]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
 8004510:	f000 be1b 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004514:	4b8d      	ldr	r3, [pc, #564]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b02      	cmp	r3, #2
 8004520:	d107      	bne.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	2bc0      	cmp	r3, #192	; 0xc0
 8004526:	d104      	bne.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8004528:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452c:	637b      	str	r3, [r7, #52]	; 0x34
 800452e:	f000 be0c 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
 8004536:	f000 be08 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800453a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800453e:	f1a2 0110 	sub.w	r1, r2, #16
 8004542:	430b      	orrs	r3, r1
 8004544:	d139      	bne.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004546:	4b81      	ldr	r3, [pc, #516]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800454c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004550:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004558:	f7fe f9ee 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 800455c:	6378      	str	r0, [r7, #52]	; 0x34
 800455e:	f000 bdf4 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004568:	d104      	bne.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800456a:	f7fe f8c3 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 800456e:	6378      	str	r0, [r7, #52]	; 0x34
 8004570:	f000 bdeb 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004574:	4b75      	ldr	r3, [pc, #468]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004580:	d107      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004588:	d103      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800458a:	4b71      	ldr	r3, [pc, #452]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
 800458e:	f000 bddc 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004592:	4b6e      	ldr	r3, [pc, #440]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b02      	cmp	r3, #2
 800459e:	d108      	bne.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a6:	d104      	bne.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 80045a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ac:	637b      	str	r3, [r7, #52]	; 0x34
 80045ae:	f000 bdcc 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
 80045b6:	f000 bdc8 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80045ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045be:	f1a2 0120 	sub.w	r1, r2, #32
 80045c2:	430b      	orrs	r3, r1
 80045c4:	d158      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80045c6:	4b61      	ldr	r3, [pc, #388]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d104      	bne.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80045d8:	f7fe f9d6 	bl	8002988 <HAL_RCC_GetPCLK3Freq>
 80045dc:	6378      	str	r0, [r7, #52]	; 0x34
 80045de:	f000 bdb4 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d104      	bne.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80045e8:	f7fe f884 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80045ec:	6378      	str	r0, [r7, #52]	; 0x34
 80045ee:	f000 bdac 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80045f2:	4b56      	ldr	r3, [pc, #344]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fe:	d106      	bne.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	2b02      	cmp	r3, #2
 8004604:	d103      	bne.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8004606:	4b52      	ldr	r3, [pc, #328]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
 800460a:	f000 bd9e 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800460e:	4b4f      	ldr	r3, [pc, #316]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b02      	cmp	r3, #2
 800461a:	d107      	bne.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	2b03      	cmp	r3, #3
 8004620:	d104      	bne.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8004622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004626:	637b      	str	r3, [r7, #52]	; 0x34
 8004628:	f000 bd8f 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800462c:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b20      	cmp	r3, #32
 8004636:	d11b      	bne.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	2b04      	cmp	r3, #4
 800463c:	d118      	bne.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800463e:	4b43      	ldr	r3, [pc, #268]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800464a:	4b40      	ldr	r3, [pc, #256]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0e1b      	lsrs	r3, r3, #24
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	e006      	b.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8004656:	4b3d      	ldr	r3, [pc, #244]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004658:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800465c:	041b      	lsls	r3, r3, #16
 800465e:	0e1b      	lsrs	r3, r3, #24
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	4a3b      	ldr	r2, [pc, #236]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
 800466c:	f000 bd6d 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
 8004674:	f000 bd69 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8004678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8004680:	430b      	orrs	r3, r1
 8004682:	d169      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004684:	4b31      	ldr	r3, [pc, #196]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800468a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800468e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004696:	d104      	bne.n	80046a2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004698:	f7fe f82c 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 800469c:	6378      	str	r0, [r7, #52]	; 0x34
 800469e:	f000 bd54 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a8:	d108      	bne.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046aa:	f107 0318 	add.w	r3, r7, #24
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff f962 	bl	8003978 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	637b      	str	r3, [r7, #52]	; 0x34
 80046b8:	f000 bd47 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80046c2:	f7fe f91f 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 80046c6:	6378      	str	r0, [r7, #52]	; 0x34
 80046c8:	f000 bd3f 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80046d2:	d118      	bne.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80046e0:	4b1a      	ldr	r3, [pc, #104]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	0f1b      	lsrs	r3, r3, #28
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	e006      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80046ec:	4b17      	ldr	r3, [pc, #92]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80046ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	0f1b      	lsrs	r3, r3, #28
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	4a16      	ldr	r2, [pc, #88]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80046fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004700:	637b      	str	r3, [r7, #52]	; 0x34
 8004702:	f000 bd22 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004712:	d107      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800471a:	d103      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 800471c:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800471e:	637b      	str	r3, [r7, #52]	; 0x34
 8004720:	f000 bd13 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004730:	d107      	bne.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004738:	d103      	bne.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 800473a:	4b05      	ldr	r3, [pc, #20]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
 800473e:	f000 bd04 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	637b      	str	r3, [r7, #52]	; 0x34
 8004746:	f000 bd00 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800474a:	bf00      	nop
 800474c:	46020c00 	.word	0x46020c00
 8004750:	00f42400 	.word	0x00f42400
 8004754:	080066bc 	.word	0x080066bc
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8004758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800475c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8004760:	430b      	orrs	r3, r1
 8004762:	d14e      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004764:	4ba8      	ldr	r3, [pc, #672]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004766:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	2b04      	cmp	r3, #4
 8004774:	d841      	bhi.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	080047b5 	.word	0x080047b5
 8004780:	08004791 	.word	0x08004791
 8004784:	080047a3 	.word	0x080047a3
 8004788:	080047bf 	.word	0x080047bf
 800478c:	080047c9 	.word	0x080047c9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004794:	4618      	mov	r0, r3
 8004796:	f7fe ff89 	bl	80036ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800479e:	f000 bcd4 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047a2:	f107 030c 	add.w	r3, r7, #12
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fa4c 	bl	8003c44 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047b0:	f000 bccb 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80047b4:	f7fe f8a6 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 80047b8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80047ba:	f000 bcc6 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80047be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80047c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047c4:	f000 bcc1 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047c8:	4b8f      	ldr	r3, [pc, #572]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 80047d4:	4b8c      	ldr	r3, [pc, #560]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	0e1b      	lsrs	r3, r3, #24
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	e006      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80047e0:	4b89      	ldr	r3, [pc, #548]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80047e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	0e1b      	lsrs	r3, r3, #24
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	4a87      	ldr	r2, [pc, #540]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80047f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047f6:	f000 bca8 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047fe:	f000 bca4 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004806:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800480a:	430b      	orrs	r3, r1
 800480c:	d15d      	bne.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800480e:	4b7e      	ldr	r3, [pc, #504]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004814:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004818:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004820:	d036      	beq.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004828:	d84b      	bhi.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004830:	d029      	beq.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004838:	d843      	bhi.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004840:	d013      	beq.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004848:	d83b      	bhi.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	2b00      	cmp	r3, #0
 800484e:	d015      	beq.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004856:	d134      	bne.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe ff25 	bl	80036ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004866:	f000 bc70 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800486a:	f107 030c 	add.w	r3, r7, #12
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff f9e8 	bl	8003c44 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004878:	f000 bc67 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800487c:	f7fe f842 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8004880:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004882:	f000 bc62 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004886:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800488a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800488c:	f000 bc5d 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004890:	4b5d      	ldr	r3, [pc, #372]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800489c:	4b5a      	ldr	r3, [pc, #360]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	0e1b      	lsrs	r3, r3, #24
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	e006      	b.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80048a8:	4b57      	ldr	r3, [pc, #348]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80048aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	0e1b      	lsrs	r3, r3, #24
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	4a55      	ldr	r2, [pc, #340]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80048b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048be:	f000 bc44 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048c6:	f000 bc40 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80048ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ce:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80048d2:	430b      	orrs	r3, r1
 80048d4:	d14a      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80048d6:	4b4c      	ldr	r3, [pc, #304]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80048d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048e0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80048e8:	f7fe f826 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 80048ec:	6378      	str	r0, [r7, #52]	; 0x34
 80048ee:	f000 bc2c 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f8:	d104      	bne.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80048fa:	f7fd fefb 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80048fe:	6378      	str	r0, [r7, #52]	; 0x34
 8004900:	f000 bc23 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004904:	4b40      	ldr	r3, [pc, #256]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004910:	d107      	bne.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004918:	d103      	bne.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800491a:	4b3d      	ldr	r3, [pc, #244]	; (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800491c:	637b      	str	r3, [r7, #52]	; 0x34
 800491e:	f000 bc14 	b.w	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004922:	4b39      	ldr	r3, [pc, #228]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b20      	cmp	r3, #32
 800492c:	d11b      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004934:	d117      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004936:	4b34      	ldr	r3, [pc, #208]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8004942:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	0e1b      	lsrs	r3, r3, #24
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	e006      	b.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800494e:	4b2e      	ldr	r3, [pc, #184]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004954:	041b      	lsls	r3, r3, #16
 8004956:	0e1b      	lsrs	r3, r3, #24
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	4a2b      	ldr	r2, [pc, #172]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800495e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
 8004964:	e3f1      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
 800496a:	e3ee      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800496c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004970:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8004974:	430b      	orrs	r3, r1
 8004976:	d14d      	bne.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004978:	4b23      	ldr	r3, [pc, #140]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800497a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800497e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004982:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	2b00      	cmp	r3, #0
 8004988:	d103      	bne.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800498a:	f7fd ffd5 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 800498e:	6378      	str	r0, [r7, #52]	; 0x34
 8004990:	e3db      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d103      	bne.n	80049a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800499a:	f7fd feab 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 800499e:	6378      	str	r0, [r7, #52]	; 0x34
 80049a0:	e3d3      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80049a2:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ae:	d106      	bne.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b6:	d102      	bne.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 80049b8:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80049ba:	637b      	str	r3, [r7, #52]	; 0x34
 80049bc:	e3c5      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d11b      	bne.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049d0:	d117      	bne.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80049d2:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 80049de:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	0e1b      	lsrs	r3, r3, #24
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	e006      	b.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80049ea:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80049ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	0e1b      	lsrs	r3, r3, #24
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80049fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004a00:	e3a3      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
 8004a06:	e3a0      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8004a08:	46020c00 	.word	0x46020c00
 8004a0c:	080066bc 	.word	0x080066bc
 8004a10:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a18:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	d148      	bne.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004a20:	4b9d      	ldr	r3, [pc, #628]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a2a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	2bc0      	cmp	r3, #192	; 0xc0
 8004a30:	d024      	beq.n	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	2bc0      	cmp	r3, #192	; 0xc0
 8004a36:	d839      	bhi.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	2b80      	cmp	r3, #128	; 0x80
 8004a3c:	d00d      	beq.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	2b80      	cmp	r3, #128	; 0x80
 8004a42:	d833      	bhi.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d011      	beq.n	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8004a50:	e02c      	b.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8004a52:	f7fd ff99 	bl	8002988 <HAL_RCC_GetPCLK3Freq>
 8004a56:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004a58:	e377      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a5a:	4b8f      	ldr	r3, [pc, #572]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a66:	d102      	bne.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8004a68:	4b8c      	ldr	r3, [pc, #560]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004a6c:	e36d      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a72:	e36a      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8004a74:	f7fd fe3e 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8004a78:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004a7a:	e366      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004a7c:	4b86      	ldr	r3, [pc, #536]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8004a88:	4b83      	ldr	r3, [pc, #524]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	0f1b      	lsrs	r3, r3, #28
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	e006      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8004a94:	4b80      	ldr	r3, [pc, #512]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	0f1b      	lsrs	r3, r3, #28
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	4a7f      	ldr	r2, [pc, #508]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004aaa:	e34e      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ab0:	e34b      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab6:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8004aba:	430b      	orrs	r3, r1
 8004abc:	d147      	bne.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004abe:	4b76      	ldr	r3, [pc, #472]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ac4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ac8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d103      	bne.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004ad0:	f7fd ff32 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 8004ad4:	6378      	str	r0, [r7, #52]	; 0x34
 8004ad6:	e338      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ade:	d103      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004ae0:	f7fd fe08 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8004ae4:	6378      	str	r0, [r7, #52]	; 0x34
 8004ae6:	e330      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004ae8:	4b6b      	ldr	r3, [pc, #428]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af4:	d106      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004afc:	d102      	bne.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8004afe:	4b67      	ldr	r3, [pc, #412]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004b00:	637b      	str	r3, [r7, #52]	; 0x34
 8004b02:	e322      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004b04:	4b64      	ldr	r3, [pc, #400]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d11b      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b16:	d117      	bne.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b18:	4b5f      	ldr	r3, [pc, #380]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8004b24:	4b5c      	ldr	r3, [pc, #368]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	0e1b      	lsrs	r3, r3, #24
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	e006      	b.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8004b30:	4b59      	ldr	r3, [pc, #356]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b36:	041b      	lsls	r3, r3, #16
 8004b38:	0e1b      	lsrs	r3, r3, #24
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	4a58      	ldr	r2, [pc, #352]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
 8004b46:	e300      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4c:	e2fd      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8004b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b52:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004b56:	430b      	orrs	r3, r1
 8004b58:	d15b      	bne.n	8004c12 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8004b5a:	4b4f      	ldr	r3, [pc, #316]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b64:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d117      	bne.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004b6c:	4b4a      	ldr	r3, [pc, #296]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8004b78:	4b47      	ldr	r3, [pc, #284]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	0e1b      	lsrs	r3, r3, #24
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	e006      	b.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8004b84:	4b44      	ldr	r3, [pc, #272]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b8a:	041b      	lsls	r3, r3, #16
 8004b8c:	0e1b      	lsrs	r3, r3, #24
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	4a43      	ldr	r2, [pc, #268]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b98:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9a:	e2d6      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004b9c:	4b3e      	ldr	r3, [pc, #248]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ba2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004baa:	d112      	bne.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb2:	d10e      	bne.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bb4:	4b38      	ldr	r3, [pc, #224]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bc2:	d102      	bne.n	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8004bc4:	23fa      	movs	r3, #250	; 0xfa
 8004bc6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bc8:	e2bf      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8004bca:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bd0:	e2bb      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004bd2:	4b31      	ldr	r3, [pc, #196]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bde:	d106      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be6:	d102      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8004be8:	4b2c      	ldr	r3, [pc, #176]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34
 8004bec:	e2ad      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004bee:	4b2a      	ldr	r3, [pc, #168]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c02:	d103      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8004c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0a:	e29e      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c10:	e29b      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c16:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	d162      	bne.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004c1e:	4b1e      	ldr	r3, [pc, #120]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c28:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d117      	bne.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c30:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8004c3c:	4b16      	ldr	r3, [pc, #88]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	0e1b      	lsrs	r3, r3, #24
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	e006      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004c4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c4e:	041b      	lsls	r3, r3, #16
 8004c50:	0e1b      	lsrs	r3, r3, #24
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5e:	e274      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004c60:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004c62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c6e:	d119      	bne.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8004c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c76:	d115      	bne.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c78:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c86:	d102      	bne.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8004c88:	23fa      	movs	r3, #250	; 0xfa
 8004c8a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c8c:	e25d      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8004c8e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004c92:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004c94:	e259      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8004c96:	bf00      	nop
 8004c98:	46020c00 	.word	0x46020c00
 8004c9c:	00f42400 	.word	0x00f42400
 8004ca0:	080066bc 	.word	0x080066bc
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004ca4:	4b9d      	ldr	r3, [pc, #628]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb0:	d106      	bne.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb8:	d102      	bne.n	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8004cba:	4b99      	ldr	r3, [pc, #612]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbe:	e244      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004cc0:	4b96      	ldr	r3, [pc, #600]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004cc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d107      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cd4:	d103      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8004cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
 8004cdc:	e235      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce2:	e232      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8004ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ce8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004cec:	430b      	orrs	r3, r1
 8004cee:	d147      	bne.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004cf0:	4b8a      	ldr	r3, [pc, #552]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cf6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004cfa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004d02:	f7fd fe19 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 8004d06:	6378      	str	r0, [r7, #52]	; 0x34
 8004d08:	e21f      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004d0a:	4b84      	ldr	r3, [pc, #528]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d18:	d112      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d20:	d10e      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d22:	4b7e      	ldr	r3, [pc, #504]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d30:	d102      	bne.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8004d32:	23fa      	movs	r3, #250	; 0xfa
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d36:	e208      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8004d38:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004d3c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004d3e:	e204      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004d40:	4b76      	ldr	r3, [pc, #472]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4c:	d106      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d54:	d102      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8004d56:	4b72      	ldr	r3, [pc, #456]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5a:	e1f6      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004d5c:	4b6f      	ldr	r3, [pc, #444]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d107      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d70:	d103      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8004d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
 8004d78:	e1e7      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d7e:	e1e4      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8004d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d84:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	d12d      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004d8c:	4b63      	ldr	r3, [pc, #396]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d92:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004d96:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004d98:	4b60      	ldr	r3, [pc, #384]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da4:	d105      	bne.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8004dac:	4b5c      	ldr	r3, [pc, #368]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004dae:	637b      	str	r3, [r7, #52]	; 0x34
 8004db0:	e1cb      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004db8:	d107      	bne.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe fc74 	bl	80036ac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc8:	e1bf      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dd2:	f107 0318 	add.w	r3, r7, #24
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe fdce 	bl	8003978 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
 8004de0:	e1b3      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
 8004de6:	e1b0      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8004de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dec:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8004df0:	430b      	orrs	r3, r1
 8004df2:	d14d      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004df4:	4b49      	ldr	r3, [pc, #292]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dfa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004dfe:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e06:	d028      	beq.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e0e:	d83c      	bhi.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e16:	d013      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e1e:	d834      	bhi.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d004      	beq.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2c:	d004      	beq.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004e2e:	e02c      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8004e30:	f7fd fd96 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8004e34:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004e36:	e188      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004e38:	f7fd fc5c 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8004e3c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004e3e:	e184      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e40:	4b36      	ldr	r3, [pc, #216]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4c:	d102      	bne.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8004e4e:	4b34      	ldr	r3, [pc, #208]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004e50:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e52:	e17a      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e58:	e177      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e5a:	4b30      	ldr	r3, [pc, #192]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8004e66:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	0e1b      	lsrs	r3, r3, #24
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	e006      	b.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8004e72:	4b2a      	ldr	r3, [pc, #168]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e78:	041b      	lsls	r3, r3, #16
 8004e7a:	0e1b      	lsrs	r3, r3, #24
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8004e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e88:	e15f      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e8e:	e15c      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8004e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e94:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	d154      	bne.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004e9c:	4b1f      	ldr	r3, [pc, #124]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ea6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eae:	d028      	beq.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eb6:	d843      	bhi.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ebe:	d013      	beq.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ec6:	d83b      	bhi.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d004      	beq.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed4:	d004      	beq.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8004ed6:	e033      	b.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8004ed8:	f7fd fd2e 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 8004edc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004ede:	e134      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004ee0:	f7fd fc08 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8004ee4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004ee6:	e130      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef4:	d102      	bne.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004ef8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004efa:	e126      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f00:	e123      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00c      	beq.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8004f0e:	4b03      	ldr	r3, [pc, #12]	; (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0e1b      	lsrs	r3, r3, #24
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	e00d      	b.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8004f1a:	bf00      	nop
 8004f1c:	46020c00 	.word	0x46020c00
 8004f20:	00f42400 	.word	0x00f42400
 8004f24:	080066bc 	.word	0x080066bc
 8004f28:	4b8a      	ldr	r3, [pc, #552]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f2e:	041b      	lsls	r3, r3, #16
 8004f30:	0e1b      	lsrs	r3, r3, #24
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	4a88      	ldr	r2, [pc, #544]	; (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8004f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f3e:	e104      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f44:	e101      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8004f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f4a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	d16e      	bne.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004f52:	4b80      	ldr	r3, [pc, #512]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004f54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f58:	f003 0318 	and.w	r3, r3, #24
 8004f5c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	2b18      	cmp	r3, #24
 8004f62:	d862      	bhi.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004fd1 	.word	0x08004fd1
 8004f70:	0800502b 	.word	0x0800502b
 8004f74:	0800502b 	.word	0x0800502b
 8004f78:	0800502b 	.word	0x0800502b
 8004f7c:	0800502b 	.word	0x0800502b
 8004f80:	0800502b 	.word	0x0800502b
 8004f84:	0800502b 	.word	0x0800502b
 8004f88:	0800502b 	.word	0x0800502b
 8004f8c:	08004fd9 	.word	0x08004fd9
 8004f90:	0800502b 	.word	0x0800502b
 8004f94:	0800502b 	.word	0x0800502b
 8004f98:	0800502b 	.word	0x0800502b
 8004f9c:	0800502b 	.word	0x0800502b
 8004fa0:	0800502b 	.word	0x0800502b
 8004fa4:	0800502b 	.word	0x0800502b
 8004fa8:	0800502b 	.word	0x0800502b
 8004fac:	08004fe1 	.word	0x08004fe1
 8004fb0:	0800502b 	.word	0x0800502b
 8004fb4:	0800502b 	.word	0x0800502b
 8004fb8:	0800502b 	.word	0x0800502b
 8004fbc:	0800502b 	.word	0x0800502b
 8004fc0:	0800502b 	.word	0x0800502b
 8004fc4:	0800502b 	.word	0x0800502b
 8004fc8:	0800502b 	.word	0x0800502b
 8004fcc:	08004ffb 	.word	0x08004ffb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8004fd0:	f7fd fcda 	bl	8002988 <HAL_RCC_GetPCLK3Freq>
 8004fd4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004fd6:	e0b8      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004fd8:	f7fd fb8c 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8004fdc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004fde:	e0b4      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fe0:	4b5c      	ldr	r3, [pc, #368]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fec:	d102      	bne.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8004fee:	4b5b      	ldr	r3, [pc, #364]	; (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ff2:	e0aa      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ff8:	e0a7      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ffa:	4b56      	ldr	r3, [pc, #344]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8005006:	4b53      	ldr	r3, [pc, #332]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0e1b      	lsrs	r3, r3, #24
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	e006      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8005012:	4b50      	ldr	r3, [pc, #320]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	0e1b      	lsrs	r3, r3, #24
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	4a4d      	ldr	r2, [pc, #308]	; (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8005022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005026:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005028:	e08f      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800502e:	e08c      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005034:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8005038:	430b      	orrs	r3, r1
 800503a:	d14c      	bne.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800503c:	4b45      	ldr	r3, [pc, #276]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800503e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005042:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005046:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800504e:	d013      	beq.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005056:	d83b      	bhi.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800505e:	d013      	beq.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005066:	d833      	bhi.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	2b00      	cmp	r3, #0
 800506c:	d014      	beq.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005074:	d014      	beq.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8005076:	e02b      	b.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005078:	f107 0318 	add.w	r3, r7, #24
 800507c:	4618      	mov	r0, r3
 800507e:	f7fe fc7b 	bl	8003978 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005086:	e060      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe fb0d 	bl	80036ac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005096:	e058      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005098:	f7fd fb2c 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 800509c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800509e:	e054      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80050a0:	4b2c      	ldr	r3, [pc, #176]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80050ac:	4b29      	ldr	r3, [pc, #164]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	0e1b      	lsrs	r3, r3, #24
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	e006      	b.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80050b8:	4b26      	ldr	r3, [pc, #152]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80050ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	0e1b      	lsrs	r3, r3, #24
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	4a24      	ldr	r2, [pc, #144]	; (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80050c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050ce:	e03c      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050d4:	e039      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80050d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050da:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80050de:	430b      	orrs	r3, r1
 80050e0:	d131      	bne.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80050e2:	4b1c      	ldr	r3, [pc, #112]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80050e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ec:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80050ee:	4b19      	ldr	r3, [pc, #100]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80050f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d106      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005106:	637b      	str	r3, [r7, #52]	; 0x34
 8005108:	e01f      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800510c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005118:	d112      	bne.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005120:	d10e      	bne.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8005124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005130:	d102      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8005132:	23fa      	movs	r3, #250	; 0xfa
 8005134:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005136:	e008      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8005138:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800513c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800513e:	e004      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	637b      	str	r3, [r7, #52]	; 0x34
 8005144:	e001      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800514a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800514c:	4618      	mov	r0, r3
 800514e:	3738      	adds	r7, #56	; 0x38
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	46020c00 	.word	0x46020c00
 8005158:	080066bc 	.word	0x080066bc
 800515c:	00f42400 	.word	0x00f42400

08005160 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005168:	4b47      	ldr	r3, [pc, #284]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a46      	ldr	r2, [pc, #280]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 800516e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005172:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005174:	f7fb fdba 	bl	8000cec <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800517a:	e008      	b.n	800518e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800517c:	f7fb fdb6 	bl	8000cec <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e077      	b.n	800527e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800518e:	4b3e      	ldr	r3, [pc, #248]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800519a:	4b3b      	ldr	r3, [pc, #236]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80051a2:	f023 0303 	bic.w	r3, r3, #3
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6811      	ldr	r1, [r2, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6852      	ldr	r2, [r2, #4]
 80051ae:	3a01      	subs	r2, #1
 80051b0:	0212      	lsls	r2, r2, #8
 80051b2:	430a      	orrs	r2, r1
 80051b4:	4934      	ldr	r1, [pc, #208]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	62cb      	str	r3, [r1, #44]	; 0x2c
 80051ba:	4b33      	ldr	r3, [pc, #204]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 80051bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051be:	4b33      	ldr	r3, [pc, #204]	; (800528c <RCCEx_PLL2_Config+0x12c>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6892      	ldr	r2, [r2, #8]
 80051c6:	3a01      	subs	r2, #1
 80051c8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	68d2      	ldr	r2, [r2, #12]
 80051d0:	3a01      	subs	r2, #1
 80051d2:	0252      	lsls	r2, r2, #9
 80051d4:	b292      	uxth	r2, r2
 80051d6:	4311      	orrs	r1, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6912      	ldr	r2, [r2, #16]
 80051dc:	3a01      	subs	r2, #1
 80051de:	0412      	lsls	r2, r2, #16
 80051e0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80051e4:	4311      	orrs	r1, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6952      	ldr	r2, [r2, #20]
 80051ea:	3a01      	subs	r2, #1
 80051ec:	0612      	lsls	r2, r2, #24
 80051ee:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80051f2:	430a      	orrs	r2, r1
 80051f4:	4924      	ldr	r1, [pc, #144]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80051fa:	4b23      	ldr	r3, [pc, #140]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f023 020c 	bic.w	r2, r3, #12
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	4920      	ldr	r1, [pc, #128]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 8005208:	4313      	orrs	r3, r2
 800520a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800520c:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 800520e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	491c      	ldr	r1, [pc, #112]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 8005216:	4313      	orrs	r3, r2
 8005218:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800521a:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 8005220:	f023 0310 	bic.w	r3, r3, #16
 8005224:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005226:	4b18      	ldr	r3, [pc, #96]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	69d2      	ldr	r2, [r2, #28]
 8005236:	00d2      	lsls	r2, r2, #3
 8005238:	4913      	ldr	r1, [pc, #76]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 800523a:	4313      	orrs	r3, r2
 800523c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	4a11      	ldr	r2, [pc, #68]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 8005244:	f043 0310 	orr.w	r3, r3, #16
 8005248:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800524a:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a0e      	ldr	r2, [pc, #56]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 8005250:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005254:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005256:	f7fb fd49 	bl	8000cec <HAL_GetTick>
 800525a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800525c:	e008      	b.n	8005270 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800525e:	f7fb fd45 	bl	8000cec <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e006      	b.n	800527e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005270:	4b05      	ldr	r3, [pc, #20]	; (8005288 <RCCEx_PLL2_Config+0x128>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800527c:	2300      	movs	r3, #0

}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	46020c00 	.word	0x46020c00
 800528c:	80800000 	.word	0x80800000

08005290 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005298:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a46      	ldr	r2, [pc, #280]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 800529e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052a4:	f7fb fd22 	bl	8000cec <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052aa:	e008      	b.n	80052be <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052ac:	f7fb fd1e 	bl	8000cec <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e077      	b.n	80053ae <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052be:	4b3e      	ldr	r3, [pc, #248]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80052ca:	4b3b      	ldr	r3, [pc, #236]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6811      	ldr	r1, [r2, #0]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6852      	ldr	r2, [r2, #4]
 80052de:	3a01      	subs	r2, #1
 80052e0:	0212      	lsls	r2, r2, #8
 80052e2:	430a      	orrs	r2, r1
 80052e4:	4934      	ldr	r1, [pc, #208]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	630b      	str	r3, [r1, #48]	; 0x30
 80052ea:	4b33      	ldr	r3, [pc, #204]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 80052ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ee:	4b33      	ldr	r3, [pc, #204]	; (80053bc <RCCEx_PLL3_Config+0x12c>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6892      	ldr	r2, [r2, #8]
 80052f6:	3a01      	subs	r2, #1
 80052f8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	68d2      	ldr	r2, [r2, #12]
 8005300:	3a01      	subs	r2, #1
 8005302:	0252      	lsls	r2, r2, #9
 8005304:	b292      	uxth	r2, r2
 8005306:	4311      	orrs	r1, r2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6912      	ldr	r2, [r2, #16]
 800530c:	3a01      	subs	r2, #1
 800530e:	0412      	lsls	r2, r2, #16
 8005310:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005314:	4311      	orrs	r1, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6952      	ldr	r2, [r2, #20]
 800531a:	3a01      	subs	r2, #1
 800531c:	0612      	lsls	r2, r2, #24
 800531e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005322:	430a      	orrs	r2, r1
 8005324:	4924      	ldr	r1, [pc, #144]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 8005326:	4313      	orrs	r3, r2
 8005328:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800532a:	4b23      	ldr	r3, [pc, #140]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	f023 020c 	bic.w	r2, r3, #12
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	4920      	ldr	r1, [pc, #128]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 8005338:	4313      	orrs	r3, r2
 800533a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800533c:	4b1e      	ldr	r3, [pc, #120]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 800533e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	491c      	ldr	r1, [pc, #112]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 8005346:	4313      	orrs	r3, r2
 8005348:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800534a:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	4a1a      	ldr	r2, [pc, #104]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 8005350:	f023 0310 	bic.w	r3, r3, #16
 8005354:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005356:	4b18      	ldr	r3, [pc, #96]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 8005358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800535a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	69d2      	ldr	r2, [r2, #28]
 8005366:	00d2      	lsls	r2, r2, #3
 8005368:	4913      	ldr	r1, [pc, #76]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 800536a:	4313      	orrs	r3, r2
 800536c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	4a11      	ldr	r2, [pc, #68]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 8005374:	f043 0310 	orr.w	r3, r3, #16
 8005378:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800537a:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a0e      	ldr	r2, [pc, #56]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 8005380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005384:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005386:	f7fb fcb1 	bl	8000cec <HAL_GetTick>
 800538a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800538c:	e008      	b.n	80053a0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800538e:	f7fb fcad 	bl	8000cec <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e006      	b.n	80053ae <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <RCCEx_PLL3_Config+0x128>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0f0      	beq.n	800538e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	46020c00 	.word	0x46020c00
 80053bc:	80800000 	.word	0x80800000

080053c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e049      	b.n	8005466 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f841 	bl	800546e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3304      	adds	r3, #4
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	f000 fa88 	bl	8005914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
	...

08005484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	d001      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e072      	b.n	8005582 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a35      	ldr	r2, [pc, #212]	; (8005590 <HAL_TIM_Base_Start_IT+0x10c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d040      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a34      	ldr	r2, [pc, #208]	; (8005594 <HAL_TIM_Base_Start_IT+0x110>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d03b      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d0:	d036      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054da:	d031      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2d      	ldr	r2, [pc, #180]	; (8005598 <HAL_TIM_Base_Start_IT+0x114>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d02c      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a2c      	ldr	r2, [pc, #176]	; (800559c <HAL_TIM_Base_Start_IT+0x118>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d027      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a2a      	ldr	r2, [pc, #168]	; (80055a0 <HAL_TIM_Base_Start_IT+0x11c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d022      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a29      	ldr	r2, [pc, #164]	; (80055a4 <HAL_TIM_Base_Start_IT+0x120>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d01d      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a27      	ldr	r2, [pc, #156]	; (80055a8 <HAL_TIM_Base_Start_IT+0x124>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d018      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a26      	ldr	r2, [pc, #152]	; (80055ac <HAL_TIM_Base_Start_IT+0x128>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d013      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a24      	ldr	r2, [pc, #144]	; (80055b0 <HAL_TIM_Base_Start_IT+0x12c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d00e      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a23      	ldr	r2, [pc, #140]	; (80055b4 <HAL_TIM_Base_Start_IT+0x130>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d009      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a21      	ldr	r2, [pc, #132]	; (80055b8 <HAL_TIM_Base_Start_IT+0x134>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d004      	beq.n	8005540 <HAL_TIM_Base_Start_IT+0xbc>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a20      	ldr	r2, [pc, #128]	; (80055bc <HAL_TIM_Base_Start_IT+0x138>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d115      	bne.n	800556c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <HAL_TIM_Base_Start_IT+0x13c>)
 8005548:	4013      	ands	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b06      	cmp	r3, #6
 8005550:	d015      	beq.n	800557e <HAL_TIM_Base_Start_IT+0xfa>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005558:	d011      	beq.n	800557e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0201 	orr.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556a:	e008      	b.n	800557e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	e000      	b.n	8005580 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40012c00 	.word	0x40012c00
 8005594:	50012c00 	.word	0x50012c00
 8005598:	40000400 	.word	0x40000400
 800559c:	50000400 	.word	0x50000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	50000800 	.word	0x50000800
 80055a8:	40000c00 	.word	0x40000c00
 80055ac:	50000c00 	.word	0x50000c00
 80055b0:	40013400 	.word	0x40013400
 80055b4:	50013400 	.word	0x50013400
 80055b8:	40014000 	.word	0x40014000
 80055bc:	50014000 	.word	0x50014000
 80055c0:	00010007 	.word	0x00010007

080055c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d122      	bne.n	8005620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d11b      	bne.n	8005620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0202 	mvn.w	r2, #2
 80055f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f965 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 800560c:	e005      	b.n	800561a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f957 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f968 	bl	80058ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b04      	cmp	r3, #4
 800562c:	d122      	bne.n	8005674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d11b      	bne.n	8005674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0204 	mvn.w	r2, #4
 8005644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f93b 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 8005660:	e005      	b.n	800566e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f92d 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f93e 	bl	80058ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b08      	cmp	r3, #8
 8005680:	d122      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b08      	cmp	r3, #8
 800568e:	d11b      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0208 	mvn.w	r2, #8
 8005698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2204      	movs	r2, #4
 800569e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f911 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 80056b4:	e005      	b.n	80056c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f903 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f914 	bl	80058ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0310 	and.w	r3, r3, #16
 80056d2:	2b10      	cmp	r3, #16
 80056d4:	d122      	bne.n	800571c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d11b      	bne.n	800571c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0210 	mvn.w	r2, #16
 80056ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2208      	movs	r2, #8
 80056f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f8e7 	bl	80058d6 <HAL_TIM_IC_CaptureCallback>
 8005708:	e005      	b.n	8005716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f8d9 	bl	80058c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f8ea 	bl	80058ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d10e      	bne.n	8005748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d107      	bne.n	8005748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0201 	mvn.w	r2, #1
 8005740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fb f8ec 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	d10e      	bne.n	8005774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005760:	2b80      	cmp	r3, #128	; 0x80
 8005762:	d107      	bne.n	8005774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800576c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f9d4 	bl	8005b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005782:	d10e      	bne.n	80057a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578e:	2b80      	cmp	r3, #128	; 0x80
 8005790:	d107      	bne.n	80057a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800579a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f9c7 	bl	8005b30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d10e      	bne.n	80057ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d107      	bne.n	80057ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f898 	bl	80058fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d10e      	bne.n	80057fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d107      	bne.n	80057fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f06f 0220 	mvn.w	r2, #32
 80057f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f987 	bl	8005b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005808:	d10f      	bne.n	800582a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005818:	d107      	bne.n	800582a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f98d 	bl	8005b44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005838:	d10f      	bne.n	800585a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005844:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005848:	d107      	bne.n	800585a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f97f 	bl	8005b58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005868:	d10f      	bne.n	800588a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005878:	d107      	bne.n	800588a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f971 	bl	8005b6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005894:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005898:	d10f      	bne.n	80058ba <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058a8:	d107      	bne.n	80058ba <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80058b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f963 	bl	8005b80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058ba:	bf00      	nop
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
	...

08005914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a68      	ldr	r2, [pc, #416]	; (8005ac8 <TIM_Base_SetConfig+0x1b4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d02b      	beq.n	8005984 <TIM_Base_SetConfig+0x70>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a67      	ldr	r2, [pc, #412]	; (8005acc <TIM_Base_SetConfig+0x1b8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d027      	beq.n	8005984 <TIM_Base_SetConfig+0x70>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593a:	d023      	beq.n	8005984 <TIM_Base_SetConfig+0x70>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005942:	d01f      	beq.n	8005984 <TIM_Base_SetConfig+0x70>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a62      	ldr	r2, [pc, #392]	; (8005ad0 <TIM_Base_SetConfig+0x1bc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d01b      	beq.n	8005984 <TIM_Base_SetConfig+0x70>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a61      	ldr	r2, [pc, #388]	; (8005ad4 <TIM_Base_SetConfig+0x1c0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d017      	beq.n	8005984 <TIM_Base_SetConfig+0x70>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a60      	ldr	r2, [pc, #384]	; (8005ad8 <TIM_Base_SetConfig+0x1c4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d013      	beq.n	8005984 <TIM_Base_SetConfig+0x70>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a5f      	ldr	r2, [pc, #380]	; (8005adc <TIM_Base_SetConfig+0x1c8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00f      	beq.n	8005984 <TIM_Base_SetConfig+0x70>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a5e      	ldr	r2, [pc, #376]	; (8005ae0 <TIM_Base_SetConfig+0x1cc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00b      	beq.n	8005984 <TIM_Base_SetConfig+0x70>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a5d      	ldr	r2, [pc, #372]	; (8005ae4 <TIM_Base_SetConfig+0x1d0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_Base_SetConfig+0x70>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a5c      	ldr	r2, [pc, #368]	; (8005ae8 <TIM_Base_SetConfig+0x1d4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0x70>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a5b      	ldr	r2, [pc, #364]	; (8005aec <TIM_Base_SetConfig+0x1d8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d108      	bne.n	8005996 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a4b      	ldr	r2, [pc, #300]	; (8005ac8 <TIM_Base_SetConfig+0x1b4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d043      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a4a      	ldr	r2, [pc, #296]	; (8005acc <TIM_Base_SetConfig+0x1b8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d03f      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ac:	d03b      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059b4:	d037      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a45      	ldr	r2, [pc, #276]	; (8005ad0 <TIM_Base_SetConfig+0x1bc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d033      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a44      	ldr	r2, [pc, #272]	; (8005ad4 <TIM_Base_SetConfig+0x1c0>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d02f      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a43      	ldr	r2, [pc, #268]	; (8005ad8 <TIM_Base_SetConfig+0x1c4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d02b      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a42      	ldr	r2, [pc, #264]	; (8005adc <TIM_Base_SetConfig+0x1c8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d027      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a41      	ldr	r2, [pc, #260]	; (8005ae0 <TIM_Base_SetConfig+0x1cc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d023      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a40      	ldr	r2, [pc, #256]	; (8005ae4 <TIM_Base_SetConfig+0x1d0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d01f      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a3f      	ldr	r2, [pc, #252]	; (8005ae8 <TIM_Base_SetConfig+0x1d4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01b      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a3e      	ldr	r2, [pc, #248]	; (8005aec <TIM_Base_SetConfig+0x1d8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d017      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a3d      	ldr	r2, [pc, #244]	; (8005af0 <TIM_Base_SetConfig+0x1dc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a3c      	ldr	r2, [pc, #240]	; (8005af4 <TIM_Base_SetConfig+0x1e0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00f      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a3b      	ldr	r2, [pc, #236]	; (8005af8 <TIM_Base_SetConfig+0x1e4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00b      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a3a      	ldr	r2, [pc, #232]	; (8005afc <TIM_Base_SetConfig+0x1e8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d007      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a39      	ldr	r2, [pc, #228]	; (8005b00 <TIM_Base_SetConfig+0x1ec>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d003      	beq.n	8005a26 <TIM_Base_SetConfig+0x112>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a38      	ldr	r2, [pc, #224]	; (8005b04 <TIM_Base_SetConfig+0x1f0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d108      	bne.n	8005a38 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a1a      	ldr	r2, [pc, #104]	; (8005ac8 <TIM_Base_SetConfig+0x1b4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d023      	beq.n	8005aac <TIM_Base_SetConfig+0x198>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a19      	ldr	r2, [pc, #100]	; (8005acc <TIM_Base_SetConfig+0x1b8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d01f      	beq.n	8005aac <TIM_Base_SetConfig+0x198>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ae8 <TIM_Base_SetConfig+0x1d4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d01b      	beq.n	8005aac <TIM_Base_SetConfig+0x198>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a1d      	ldr	r2, [pc, #116]	; (8005aec <TIM_Base_SetConfig+0x1d8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d017      	beq.n	8005aac <TIM_Base_SetConfig+0x198>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a1c      	ldr	r2, [pc, #112]	; (8005af0 <TIM_Base_SetConfig+0x1dc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d013      	beq.n	8005aac <TIM_Base_SetConfig+0x198>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a1b      	ldr	r2, [pc, #108]	; (8005af4 <TIM_Base_SetConfig+0x1e0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00f      	beq.n	8005aac <TIM_Base_SetConfig+0x198>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a1a      	ldr	r2, [pc, #104]	; (8005af8 <TIM_Base_SetConfig+0x1e4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00b      	beq.n	8005aac <TIM_Base_SetConfig+0x198>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a19      	ldr	r2, [pc, #100]	; (8005afc <TIM_Base_SetConfig+0x1e8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d007      	beq.n	8005aac <TIM_Base_SetConfig+0x198>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <TIM_Base_SetConfig+0x1ec>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_Base_SetConfig+0x198>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a17      	ldr	r2, [pc, #92]	; (8005b04 <TIM_Base_SetConfig+0x1f0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d103      	bne.n	8005ab4 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	615a      	str	r2, [r3, #20]
}
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40012c00 	.word	0x40012c00
 8005acc:	50012c00 	.word	0x50012c00
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	50000400 	.word	0x50000400
 8005ad8:	40000800 	.word	0x40000800
 8005adc:	50000800 	.word	0x50000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	50000c00 	.word	0x50000c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	50013400 	.word	0x50013400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	50014000 	.word	0x50014000
 8005af8:	40014400 	.word	0x40014400
 8005afc:	50014400 	.word	0x50014400
 8005b00:	40014800 	.word	0x40014800
 8005b04:	50014800 	.word	0x50014800

08005b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e042      	b.n	8005c2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d106      	bne.n	8005bbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fa fee5 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2224      	movs	r2, #36	; 0x24
 8005bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0201 	bic.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f8d2 	bl	8005d80 <UART_SetConfig>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e022      	b.n	8005c2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fa68 	bl	80060c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 faef 	bl	8006208 <UART_CheckIdleState>
 8005c2a:	4603      	mov	r3, r0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	f040 8092 	bne.w	8005d74 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <HAL_UART_Transmit+0x28>
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e08a      	b.n	8005d76 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Transmit+0x3a>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e083      	b.n	8005d76 <HAL_UART_Transmit+0x142>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c80:	2b80      	cmp	r3, #128	; 0x80
 8005c82:	d107      	bne.n	8005c94 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c92:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2221      	movs	r2, #33	; 0x21
 8005ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ca4:	f7fb f822 	bl	8000cec <HAL_GetTick>
 8005ca8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	88fa      	ldrh	r2, [r7, #6]
 8005cae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	88fa      	ldrh	r2, [r7, #6]
 8005cb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc2:	d108      	bne.n	8005cd6 <HAL_UART_Transmit+0xa2>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	e003      	b.n	8005cde <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005ce6:	e02c      	b.n	8005d42 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2180      	movs	r1, #128	; 0x80
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fad3 	bl	800629e <UART_WaitOnFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e039      	b.n	8005d76 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10b      	bne.n	8005d20 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	3302      	adds	r3, #2
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	e007      	b.n	8005d30 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	781a      	ldrb	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1cc      	bne.n	8005ce8 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2200      	movs	r2, #0
 8005d56:	2140      	movs	r1, #64	; 0x40
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 faa0 	bl	800629e <UART_WaitOnFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e006      	b.n	8005d76 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e000      	b.n	8005d76 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005d74:	2302      	movs	r3, #2
  }
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3720      	adds	r7, #32
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d84:	b094      	sub	sp, #80	; 0x50
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4b7e      	ldr	r3, [pc, #504]	; (8005f90 <UART_SetConfig+0x210>)
 8005d96:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	431a      	orrs	r2, r3
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	431a      	orrs	r2, r3
 8005da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4977      	ldr	r1, [pc, #476]	; (8005f94 <UART_SetConfig+0x214>)
 8005db8:	4019      	ands	r1, r3
 8005dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	68d9      	ldr	r1, [r3, #12]
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	ea40 0301 	orr.w	r3, r0, r1
 8005dda:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b6a      	ldr	r3, [pc, #424]	; (8005f90 <UART_SetConfig+0x210>)
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d009      	beq.n	8005e00 <UART_SetConfig+0x80>
 8005dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b69      	ldr	r3, [pc, #420]	; (8005f98 <UART_SetConfig+0x218>)
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d004      	beq.n	8005e00 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	6a1a      	ldr	r2, [r3, #32]
 8005dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8005e0a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e14:	430b      	orrs	r3, r1
 8005e16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	f023 000f 	bic.w	r0, r3, #15
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	ea40 0301 	orr.w	r3, r0, r1
 8005e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4b59      	ldr	r3, [pc, #356]	; (8005f9c <UART_SetConfig+0x21c>)
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d102      	bne.n	8005e40 <UART_SetConfig+0xc0>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e3e:	e029      	b.n	8005e94 <UART_SetConfig+0x114>
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	4b56      	ldr	r3, [pc, #344]	; (8005fa0 <UART_SetConfig+0x220>)
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d102      	bne.n	8005e50 <UART_SetConfig+0xd0>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e4e:	e021      	b.n	8005e94 <UART_SetConfig+0x114>
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b53      	ldr	r3, [pc, #332]	; (8005fa4 <UART_SetConfig+0x224>)
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d102      	bne.n	8005e60 <UART_SetConfig+0xe0>
 8005e5a:	2304      	movs	r3, #4
 8005e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e5e:	e019      	b.n	8005e94 <UART_SetConfig+0x114>
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4b50      	ldr	r3, [pc, #320]	; (8005fa8 <UART_SetConfig+0x228>)
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d102      	bne.n	8005e70 <UART_SetConfig+0xf0>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e6e:	e011      	b.n	8005e94 <UART_SetConfig+0x114>
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	4b4d      	ldr	r3, [pc, #308]	; (8005fac <UART_SetConfig+0x22c>)
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d102      	bne.n	8005e80 <UART_SetConfig+0x100>
 8005e7a:	2310      	movs	r3, #16
 8005e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e7e:	e009      	b.n	8005e94 <UART_SetConfig+0x114>
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b42      	ldr	r3, [pc, #264]	; (8005f90 <UART_SetConfig+0x210>)
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d102      	bne.n	8005e90 <UART_SetConfig+0x110>
 8005e8a:	2320      	movs	r3, #32
 8005e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e8e:	e001      	b.n	8005e94 <UART_SetConfig+0x114>
 8005e90:	2300      	movs	r3, #0
 8005e92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	4b3d      	ldr	r3, [pc, #244]	; (8005f90 <UART_SetConfig+0x210>)
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d005      	beq.n	8005eaa <UART_SetConfig+0x12a>
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b3d      	ldr	r3, [pc, #244]	; (8005f98 <UART_SetConfig+0x218>)
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	f040 8085 	bne.w	8005fb4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eac:	2200      	movs	r2, #0
 8005eae:	623b      	str	r3, [r7, #32]
 8005eb0:	627a      	str	r2, [r7, #36]	; 0x24
 8005eb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005eb6:	f7fe f82b 	bl	8003f10 <HAL_RCCEx_GetPeriphCLKFreq>
 8005eba:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 80e8 	beq.w	8006094 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	4a39      	ldr	r2, [pc, #228]	; (8005fb0 <UART_SetConfig+0x230>)
 8005eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ed6:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	4613      	mov	r3, r2
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	4413      	add	r3, r2
 8005ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d305      	bcc.n	8005ef4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d903      	bls.n	8005efc <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005efa:	e048      	b.n	8005f8e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efe:	2200      	movs	r2, #0
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	61fa      	str	r2, [r7, #28]
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	4a29      	ldr	r2, [pc, #164]	; (8005fb0 <UART_SetConfig+0x230>)
 8005f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2200      	movs	r2, #0
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	617a      	str	r2, [r7, #20]
 8005f16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005f1e:	f7fa f9a9 	bl	8000274 <__aeabi_uldivmod>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	020b      	lsls	r3, r1, #8
 8005f34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f38:	0202      	lsls	r2, r0, #8
 8005f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f3c:	6849      	ldr	r1, [r1, #4]
 8005f3e:	0849      	lsrs	r1, r1, #1
 8005f40:	2000      	movs	r0, #0
 8005f42:	460c      	mov	r4, r1
 8005f44:	4605      	mov	r5, r0
 8005f46:	eb12 0804 	adds.w	r8, r2, r4
 8005f4a:	eb43 0905 	adc.w	r9, r3, r5
 8005f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	60fa      	str	r2, [r7, #12]
 8005f58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	4649      	mov	r1, r9
 8005f60:	f7fa f988 	bl	8000274 <__aeabi_uldivmod>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4613      	mov	r3, r2
 8005f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f72:	d308      	bcc.n	8005f86 <UART_SetConfig+0x206>
 8005f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f7a:	d204      	bcs.n	8005f86 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f82:	60da      	str	r2, [r3, #12]
 8005f84:	e003      	b.n	8005f8e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8005f8c:	e082      	b.n	8006094 <UART_SetConfig+0x314>
 8005f8e:	e081      	b.n	8006094 <UART_SetConfig+0x314>
 8005f90:	46002400 	.word	0x46002400
 8005f94:	cfff69f3 	.word	0xcfff69f3
 8005f98:	56002400 	.word	0x56002400
 8005f9c:	40013800 	.word	0x40013800
 8005fa0:	40004400 	.word	0x40004400
 8005fa4:	40004800 	.word	0x40004800
 8005fa8:	40004c00 	.word	0x40004c00
 8005fac:	40005000 	.word	0x40005000
 8005fb0:	0800677c 	.word	0x0800677c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fbc:	d13c      	bne.n	8006038 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8005fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	607a      	str	r2, [r7, #4]
 8005fc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fca:	f7fd ffa1 	bl	8003f10 <HAL_RCCEx_GetPeriphCLKFreq>
 8005fce:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d05e      	beq.n	8006094 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	4a39      	ldr	r2, [pc, #228]	; (80060c0 <UART_SetConfig+0x340>)
 8005fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fe8:	005a      	lsls	r2, r3, #1
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	441a      	add	r2, r3
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ffe:	2b0f      	cmp	r3, #15
 8006000:	d916      	bls.n	8006030 <UART_SetConfig+0x2b0>
 8006002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006008:	d212      	bcs.n	8006030 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800600a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600c:	b29b      	uxth	r3, r3
 800600e:	f023 030f 	bic.w	r3, r3, #15
 8006012:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	b29b      	uxth	r3, r3
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	b29a      	uxth	r2, r3
 8006020:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006022:	4313      	orrs	r3, r2
 8006024:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800602c:	60da      	str	r2, [r3, #12]
 800602e:	e031      	b.n	8006094 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006036:	e02d      	b.n	8006094 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800603a:	2200      	movs	r2, #0
 800603c:	469a      	mov	sl, r3
 800603e:	4693      	mov	fp, r2
 8006040:	4650      	mov	r0, sl
 8006042:	4659      	mov	r1, fp
 8006044:	f7fd ff64 	bl	8003f10 <HAL_RCCEx_GetPeriphCLKFreq>
 8006048:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800604a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d021      	beq.n	8006094 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	4a1a      	ldr	r2, [pc, #104]	; (80060c0 <UART_SetConfig+0x340>)
 8006056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800605a:	461a      	mov	r2, r3
 800605c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	441a      	add	r2, r3
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006076:	2b0f      	cmp	r3, #15
 8006078:	d909      	bls.n	800608e <UART_SetConfig+0x30e>
 800607a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	d205      	bcs.n	800608e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006084:	b29a      	uxth	r2, r3
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60da      	str	r2, [r3, #12]
 800608c:	e002      	b.n	8006094 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	2201      	movs	r2, #1
 8006098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	2201      	movs	r2, #1
 80060a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	2200      	movs	r2, #0
 80060a8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	2200      	movs	r2, #0
 80060ae:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80060b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3750      	adds	r7, #80	; 0x50
 80060b8:	46bd      	mov	sp, r7
 80060ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060be:	bf00      	nop
 80060c0:	0800677c 	.word	0x0800677c

080060c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	f003 0308 	and.w	r3, r3, #8
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01a      	beq.n	80061da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c2:	d10a      	bne.n	80061da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	605a      	str	r2, [r3, #4]
  }
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af02      	add	r7, sp, #8
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006218:	f7fa fd68 	bl	8000cec <HAL_GetTick>
 800621c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b08      	cmp	r3, #8
 800622a:	d10e      	bne.n	800624a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800622c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f82f 	bl	800629e <UART_WaitOnFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e025      	b.n	8006296 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b04      	cmp	r3, #4
 8006256:	d10e      	bne.n	8006276 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f819 	bl	800629e <UART_WaitOnFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e00f      	b.n	8006296 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b09c      	sub	sp, #112	; 0x70
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	603b      	str	r3, [r7, #0]
 80062aa:	4613      	mov	r3, r2
 80062ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ae:	e0a9      	b.n	8006404 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	f000 80a5 	beq.w	8006404 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ba:	f7fa fd17 	bl	8000cec <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d302      	bcc.n	80062d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80062ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d140      	bne.n	8006352 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062e4:	667b      	str	r3, [r7, #100]	; 0x64
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e6      	bne.n	80062d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3308      	adds	r3, #8
 8006308:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	f023 0301 	bic.w	r3, r3, #1
 8006318:	663b      	str	r3, [r7, #96]	; 0x60
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3308      	adds	r3, #8
 8006320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006322:	64ba      	str	r2, [r7, #72]	; 0x48
 8006324:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e5      	bne.n	8006302 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e069      	b.n	8006426 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d051      	beq.n	8006404 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800636a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636e:	d149      	bne.n	8006404 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006378:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800638e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
 800639a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800639e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e6      	bne.n	800637a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3308      	adds	r3, #8
 80063b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	613b      	str	r3, [r7, #16]
   return(result);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f023 0301 	bic.w	r3, r3, #1
 80063c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3308      	adds	r3, #8
 80063ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063cc:	623a      	str	r2, [r7, #32]
 80063ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	69f9      	ldr	r1, [r7, #28]
 80063d2:	6a3a      	ldr	r2, [r7, #32]
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e5      	bne.n	80063ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e010      	b.n	8006426 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	69da      	ldr	r2, [r3, #28]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	4013      	ands	r3, r2
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	429a      	cmp	r2, r3
 8006412:	bf0c      	ite	eq
 8006414:	2301      	moveq	r3, #1
 8006416:	2300      	movne	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	429a      	cmp	r2, r3
 8006420:	f43f af46 	beq.w	80062b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3770      	adds	r7, #112	; 0x70
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_UARTEx_DisableFifoMode+0x16>
 8006440:	2302      	movs	r3, #2
 8006442:	e027      	b.n	8006494 <HAL_UARTEx_DisableFifoMode+0x66>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2224      	movs	r2, #36	; 0x24
 8006450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006472:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e02d      	b.n	8006514 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2224      	movs	r2, #36	; 0x24
 80064c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f84f 	bl	8006598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006530:	2302      	movs	r3, #2
 8006532:	e02d      	b.n	8006590 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2224      	movs	r2, #36	; 0x24
 8006540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0201 	bic.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f811 	bl	8006598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d108      	bne.n	80065ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065b8:	e031      	b.n	800661e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065ba:	2308      	movs	r3, #8
 80065bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065be:	2308      	movs	r3, #8
 80065c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	0e5b      	lsrs	r3, r3, #25
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	0f5b      	lsrs	r3, r3, #29
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	7b3a      	ldrb	r2, [r7, #12]
 80065e6:	4911      	ldr	r1, [pc, #68]	; (800662c <UARTEx_SetNbDataToProcess+0x94>)
 80065e8:	5c8a      	ldrb	r2, [r1, r2]
 80065ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065ee:	7b3a      	ldrb	r2, [r7, #12]
 80065f0:	490f      	ldr	r1, [pc, #60]	; (8006630 <UARTEx_SetNbDataToProcess+0x98>)
 80065f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	7b7a      	ldrb	r2, [r7, #13]
 8006604:	4909      	ldr	r1, [pc, #36]	; (800662c <UARTEx_SetNbDataToProcess+0x94>)
 8006606:	5c8a      	ldrb	r2, [r1, r2]
 8006608:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800660c:	7b7a      	ldrb	r2, [r7, #13]
 800660e:	4908      	ldr	r1, [pc, #32]	; (8006630 <UARTEx_SetNbDataToProcess+0x98>)
 8006610:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006612:	fb93 f3f2 	sdiv	r3, r3, r2
 8006616:	b29a      	uxth	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	08006794 	.word	0x08006794
 8006630:	0800679c 	.word	0x0800679c

08006634 <__libc_init_array>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	4d0d      	ldr	r5, [pc, #52]	; (800666c <__libc_init_array+0x38>)
 8006638:	2600      	movs	r6, #0
 800663a:	4c0d      	ldr	r4, [pc, #52]	; (8006670 <__libc_init_array+0x3c>)
 800663c:	1b64      	subs	r4, r4, r5
 800663e:	10a4      	asrs	r4, r4, #2
 8006640:	42a6      	cmp	r6, r4
 8006642:	d109      	bne.n	8006658 <__libc_init_array+0x24>
 8006644:	4d0b      	ldr	r5, [pc, #44]	; (8006674 <__libc_init_array+0x40>)
 8006646:	2600      	movs	r6, #0
 8006648:	4c0b      	ldr	r4, [pc, #44]	; (8006678 <__libc_init_array+0x44>)
 800664a:	f000 f81f 	bl	800668c <_init>
 800664e:	1b64      	subs	r4, r4, r5
 8006650:	10a4      	asrs	r4, r4, #2
 8006652:	42a6      	cmp	r6, r4
 8006654:	d105      	bne.n	8006662 <__libc_init_array+0x2e>
 8006656:	bd70      	pop	{r4, r5, r6, pc}
 8006658:	f855 3b04 	ldr.w	r3, [r5], #4
 800665c:	3601      	adds	r6, #1
 800665e:	4798      	blx	r3
 8006660:	e7ee      	b.n	8006640 <__libc_init_array+0xc>
 8006662:	f855 3b04 	ldr.w	r3, [r5], #4
 8006666:	3601      	adds	r6, #1
 8006668:	4798      	blx	r3
 800666a:	e7f2      	b.n	8006652 <__libc_init_array+0x1e>
 800666c:	080067ac 	.word	0x080067ac
 8006670:	080067ac 	.word	0x080067ac
 8006674:	080067ac 	.word	0x080067ac
 8006678:	080067b0 	.word	0x080067b0

0800667c <memset>:
 800667c:	4402      	add	r2, r0
 800667e:	4603      	mov	r3, r0
 8006680:	4293      	cmp	r3, r2
 8006682:	d100      	bne.n	8006686 <memset+0xa>
 8006684:	4770      	bx	lr
 8006686:	f803 1b01 	strb.w	r1, [r3], #1
 800668a:	e7f9      	b.n	8006680 <memset+0x4>

0800668c <_init>:
 800668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668e:	bf00      	nop
 8006690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006692:	bc08      	pop	{r3}
 8006694:	469e      	mov	lr, r3
 8006696:	4770      	bx	lr

08006698 <_fini>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	bf00      	nop
 800669c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669e:	bc08      	pop	{r3}
 80066a0:	469e      	mov	lr, r3
 80066a2:	4770      	bx	lr
